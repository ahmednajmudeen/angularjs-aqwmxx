!(function () {
    "use strict";
    function e(n, r, o, i, s, l) {
        var a = {
            ALT_NUM_TYPES: [
                { type: "Home" },
                { type: "Business" },
                { type: "Mobile" },
                { type: "Cellular" },
                { type: "Fax" },
                { type: "Data" },
                { type: "Car_Phone" },
                { type: "Lab" },
                { type: "Conference_Room" },
                { type: "Pager" },
                { type: "Home_Office" },
                { type: "Remote_Office" },
                { type: "Branch_Office" },
                { type: "Temporary" },
            ],
            init: function () {
                angular.forEach(a.ALT_NUM_TYPES, function (e) {
                    e.label = l.getPhrase("AltNum." + e.type);
                });
            },
            compareVersions: function (e, t) {
                for (var a = e.split("."), n = t.split("."), o = 0; o < a.length; o++) {
                    var r = parseInt(this.toDigits(a[o])),
                        i = parseInt(this.toDigits(n[o]));
                    if (i < r) return 1;
                    if (r < i) return -1;
                }
                return 0;
            },
            getPrettyAltNumberType: function (e) {
                var t = [];
                return e && (t = n("filter")(a.ALT_NUM_TYPES, { type: e })), t.length ? t[0].label : "Unknown";
            },
            getAltNumTypes: function () {
                return a.ALT_NUM_TYPES;
            },
            toDateString: function (e) {
                return e && angular.isDefined(e) ? e.toISOString() : null;
            },
            toDate: function (e) {
                var t;
                e && angular.isDefined(e) ? ((e = e.replace("T", " ")), (t = moment(e, "YYYY-MM-DD HH:mm").toDate())) : (t = null);
                return t;
            },
            generateRandomVersion: function () {
                var e = +new Date();
                return (e = "?v=" + e.toString().substr(-5));
            },
            randomIntBetween: function (e, t) {
                return angular.isString(e) && (e = parseInt(e)), angular.isString(t) && (t = parseInt(t)), Math.floor(Math.random() * (t - e + 1)) + e;
            },
            toDigits: function (e) {
                return e ? (angular.isString(e) || (e += ""), e.replace(/[^0-9]/g, "")) : "";
            },
            getRanges: function (e) {
                var t,
                    a,
                    n = [];
                if (!angular.isArray(e)) return n;
                for (var o = 0; o < e.length; o++) {
                    for (a = t = e[o]; e[o + 1] - e[o] == 1; ) (a = e[o + 1]), o++;
                    n.push(t == a ? t + "" : t + "-" + a);
                }
                return n;
            },
            isDigits: function (e) {
                return !!angular.isNumber(e) || (!angular.isUndefined(e) && null !== e && 0 === e.replace(/[0-9]/g, "").length);
            },
            splitRanges: function (e, t) {
                for (var a = [], n = e.split(/\s*[\,\s]\s*/), o = 0; o < n.length; o++) {
                    var r = n[o];
                    if ("" !== r)
                        if (/^\d+$/.test(r)) a.push(parseInt(r));
                        else {
                            if (!/^\d+\s*\-\s*\d+$/.test(r)) return "INVALID_ITEM";
                            var i = r.split(/\s*\-\s*/),
                                s = parseInt(i[0]),
                                l = parseInt(i[1]);
                            if (l <= s) return "INVALID_RANGE";
                            for (var c = s; c <= l; c++) a.push(c);
                        }
                }
                return (
                    t &&
                        a.sort(function (e, t) {
                            return e - t;
                        }),
                    a
                );
            },
            getInactivityString: function (e) {
                var t,
                    a = e.cache.lastActivity;
                return a ? ((t = n("date")(a, "mediumDate") + " " + n("date")(a, "shortTime")), e.cache.isLoggedIn ? (e.cache.isActive ? "" : l.getPhrase("InactiveSince", t)) : l.getPhrase("LoggedOutSince", t)) : "";
            },
            getAgentInfo: function () {
                var e = { lastAgentID: void 0, lastAIC: void 0, aicHistory: [] };
                return angular.isDefined(s.globalVars.Settings.AgentInfo) && (e = s.globalVars.Settings.AgentInfo), e;
            },
            putAgentInfo: function (e, t, a) {
                var n = { lastAgentID: e, lastAIC: t, aicHistory: a };
                (s.globalVars.Settings.AgentInfo = n), o.saveUserSettings();
            },
            get_mru_callForwards: function () {
                var e = [];
                return angular.isDefined(s.globalVars.Settings.MostRecentlyUsedCallForwards) && (e = s.globalVars.Settings.MostRecentlyUsedCallForwards), e;
            },
            removeProfilePhoto: function (e) {
                var t = i.defer(),
                    a = { ext: e };
                return (
                    r.post("/ucapi/presence/RemovePhoto", a).then(
                        function (e) {
                            t.resolve(e.data);
                        },
                        function (e) {
                            t.reject(e);
                        }
                    ),
                    t.promise
                );
            },
            uploadProfilePhoto: function (n, e) {
                console.log("uploadProfilePhoto size=" + e.size + " type=" + e.type);
                var o = i.defer(),
                    t = new FileReader();
                return (
                    (t.onload = function (e) {
                        var t = e.target.result,
                            a = { ext: n, photo: t };
                        r.post("/ucapi/presence/UpdatePhoto", a, { timeout: 6e4 }).then(
                            function (e) {
                                console.log("UpdatePhoto success"), o.resolve(e.data);
                            },
                            function (e) {
                                console.log("UpdatePhoto: failed, HTTP status " + e), o.reject(e);
                            }
                        );
                    }),
                    t.readAsDataURL(e),
                    o.promise
                );
            },
        };
        return a;
    }
    angular.module("UtilitiesModule", []).factory("$Utilities", e), (e.$inject = ["$filter", "$http", "HttpService", "$q", "$rootScope", "UCLocaleService"]);
})(),
    angular
        .module("UtilitiesModule")
        .filter("filterVisible", [
            function () {
                return function (e) {
                    var t = [];
                    return (
                        angular.forEach(e, function (e) {
                            e.visible && t.push(e);
                        }),
                        t
                    );
                };
            },
        ])
        .filter("filterByNameAndExtension", [
            "$rootScope",
            function (r) {
                return function (e, t) {
                    if ((angular.isDefined(t) || (t = ""), t.length < 2 && !r.globalVars.Settings.HideOfflineUsers)) return e;
                    var a = [];
                    t = t.replace(/\./g, "\\.");
                    var n = new RegExp("^" + t, "i"),
                        o = new RegExp(t, "i");
                    return (
                        angular.forEach(e, function (e) {
                            (!r.globalVars.Settings.HideOfflineUsers || (r.globalVars.Settings.HideOfflineUsers && e.cache.isLoggedIn)) && (n.test(e.FirstName) ? a.push(e) : n.test(e.LastName) ? a.push(e) : o.test(e.ExtName) && a.push(e));
                        }),
                        a
                    );
                };
            },
        ])
        .filter("filterByNameAndExtensionContacts", [
            function () {
                return function (e, t) {
                    if (!angular.isDefined(t) || t.length < 3) return e;
                    var a = [],
                        n = new RegExp("^" + t, "i");
                    return (
                        angular.forEach(e, function (e) {
                            n.test(e.FirstName) ? a.push(e) : n.test(e.LastName) && a.push(e);
                        }),
                        a
                    );
                };
            },
        ])
        .filter("rpPrettyDate", [
            "$filter",
            "$Utilities",
            function (r, i) {
                return function (e) {
                    var t,
                        a,
                        n = new Date(),
                        o = i.toDate(e);
                    return (
                        n.getFullYear() == o.getFullYear() && n.getMonth() == o.getMonth() && n.getDate() == o.getDate() && (t = "Today"),
                        angular.isDefined(t) || ((a = new Date()).setTime(a.getTime() + 864e5), a.getFullYear() == o.getFullYear() && a.getMonth() == o.getMonth() && a.getDate() == o.getDate() && (t = "Tomorrow")),
                        angular.isDefined(t) || (t = r("date")(o, "mediumDate")),
                        t + " " + r("date")(o, "shortTime")
                    );
                };
            },
        ])
        .filter("shortDuration", [
            function () {
                return function (e) {
                    if (angular.isString(e)) {
                        if ("" === e) return "";
                        e = parseInt(e);
                    }
                    if (!angular.isNumber(e)) return e;
                    var t = Math.floor(e / 3600),
                        a = e % 3600,
                        n = a % 60;
                    return n < 10 && (n = "0" + n), (t ? t + ":" : "") + Math.floor(a / 60) + ":" + n;
                };
            },
        ])
        .filter("displayDuration", [
            function () {
                return function (e) {
                    angular.isDefined(e) || (e = 0);
                    var t = 0,
                        a = 0,
                        n = 0;
                    3600 <= e && (e -= 3600 * (t = Math.floor(e / 3600))), 60 <= e && ((a = Math.floor(e / 60)), 0 < t && a < 10 && (a = "0" + a), (e -= 60 * a)), (n = e) < 10 && (n = "0" + n);
                    var o = "";
                    return t && (o += t + ":"), (o += a ? a + ":" : "0:"), (o += n);
                };
            },
        ])
        .filter("urlEncode", [
            function () {
                return window.encodeURIComponent;
            },
        ]),
    angular
        .module("UtilitiesModule")
        .directive("resize", [
            "$rootScope",
            "$window",
            "$timeout",
            function (n, o, r) {
                return function (a, e) {
                    var t = angular.element(o);
                    (a.getWindowDimensions = function () {
                        return { h: t.height(), w: t.width() };
                    }),
                        a.$watch(
                            a.getWindowDimensions,
                            function (e, t) {
                                (a.windowHeight = e.h), (a.windowWidth = e.w), n.$broadcast("WINDOW_RESIZE", { height: e.h, width: e.w });
                            },
                            !0
                        ),
                        t.bind("resize", function () {
                            r(function () {
                                a.$apply();
                            }, 0);
                        });
                };
            },
        ])
        .directive("rpFormatNumber", [
            "$compile",
            function (l) {
                return {
                    restrict: "E",
                    scope: { item: "=", dial: "&" },
                    controller: [
                        "$scope",
                        function (t) {
                            t.dialIt = function (e) {
                                t.dial({ contactObj: e });
                            };
                        },
                    ],
                    link: function (e, t) {
                        var a,
                            n,
                            o,
                            r = e.$root.globalVars.Settings.CP_Mode,
                            i = e.$root.globalVars.Settings.Is4xxDevice,
                            s = e.$root.globalVars.telScheme;
                        t
                            .html(
                                ((a = r),
                                (n = i),
                                (o = s),
                                n ? "<a href='" + o + "{{item.rawNumber}}'>{{item.Number}}</a>" : "USE_APP_CP" === a ? "<a href ng-click='dialIt(item)'>{{item.Number}}</a>" : "<a href='" + o + "{{item.rawNumber}}'>{{item.Number}}</a>")
                            )
                            .show(),
                            l(t.contents())(e);
                    },
                };
            },
        ])
        .directive("rpFormatO365Mobile", [
            "$compile",
            function (l) {
                return {
                    restrict: "E",
                    scope: { item: "=", dial: "&" },
                    controller: [
                        "$scope",
                        function (t) {
                            t.dialIt = function (e) {
                                t.dial({ contactObj: e });
                            };
                        },
                    ],
                    link: function (e, t) {
                        var a,
                            n,
                            o,
                            r = e.$root.globalVars.Settings.CP_Mode,
                            i = e.$root.globalVars.Settings.Is4xxDevice,
                            s = e.$root.globalVars.telScheme;
                        t
                            .html(
                                ((a = r),
                                (n = i),
                                (o = s),
                                n
                                    ? "<a href='" + o + "{{item.MobilePhone}}'>{{item.MobilePhone}}</a>"
                                    : "USE_APP_CP" === a
                                    ? "<a href ng-click='dialIt(item)'>{{item.MobilePhone}}</a>"
                                    : "<a href='" + o + "{{item.MobilePhone}}'>{{item.MobilePhone}}</a>")
                            )
                            .show(),
                            l(t.contents())(e);
                    },
                };
            },
        ])
        .directive("rpFormatO365Business", [
            "$compile",
            function (l) {
                return {
                    restrict: "E",
                    scope: { item: "=", dial: "&" },
                    controller: [
                        "$scope",
                        function (t) {
                            t.dialIt = function (e) {
                                t.dial({ contactObj: e });
                            };
                        },
                    ],
                    link: function (e, t) {
                        var a,
                            n,
                            o,
                            r = e.$root.globalVars.Settings.CP_Mode,
                            i = e.$root.globalVars.Settings.Is4xxDevice,
                            s = e.$root.globalVars.telScheme;
                        t
                            .html(
                                ((a = r),
                                (n = i),
                                (o = s),
                                n
                                    ? "<a href='" + o + "{{item.BusinessPhones[0]}}'>{{item.BusinessPhones[0]}}</a>"
                                    : "USE_APP_CP" === a
                                    ? "<a href ng-click='dialIt(item)'>{{item.BusinessPhones[0]}}</a>"
                                    : "<a href='" + o + "{{item.BusinessPhones[0]}}'>{{item.BusinessPhones[0]}}</a>")
                            )
                            .show(),
                            l(t.contents())(e);
                    },
                };
            },
        ])
        .directive("refreshOn", [
            "$compile",
            function (i) {
                return {
                    restrict: "A",
                    scope: !0,
                    compile: function (e) {
                        var r = angular.element("<a></a>").append(e.clone()).html();
                        return function (t, a, e) {
                            var n = e.refreshOn || "refresh",
                                o = t.$parent.$on(n, function () {
                                    var e = i(r)(t.$parent);
                                    a.replaceWith(e), o(), t.$destroy();
                                });
                        };
                    },
                };
            },
        ])
        .directive("rpFormatAltNumbers", [
            "$compile",
            function (l) {
                return {
                    restrict: "E",
                    scope: { item: "=", altNums: "=", dial: "&" },
                    controller: [
                        "$scope",
                        function (a) {
                            a.dialIt = function (e, t) {
                                a.dial({ contactObj: e, altNumberIndex: t });
                            };
                        },
                    ],
                    link: function (e, t, a) {
                        var n,
                            o,
                            r,
                            i = e.$root.globalVars.Settings.Is4xxDevice,
                            s = e.$root.globalVars.telScheme;
                        t
                            .html(
                                ((n = a.cpMode),
                                (o = i),
                                (r = s),
                                o
                                    ? "<a href='" + r + "{{item.rawNumber}}'>{{item.Number}}</a>"
                                    : "USE_APP_CP" === n
                                    ? "<div ng-repeat='(key, altNumber) in altNums'><a href ng-click='dialIt(item, key)'>{{altNumber.Number}} ({{altNumber.AltType}})</a></div>"
                                    : "<div ng-repeat='altNumber in altNums'><a href='" + r + "{{altNumber.rawNumber}}'>{{altNumber.Number}} ({{altNumber.AltType}})</a></div>")
                            )
                            .show(),
                            l(t.contents())(e);
                    },
                };
            },
        ])
        .directive("rpBlfPanel", [
            function () {
                return { restrict: "E", templateUrl: "views/templates/blfPanel.tmpl.html" };
            },
        ])
        .directive("rpBlfCommunicate", [
            function () {
                return { restrict: "E", templateUrl: "views/templates/blfCommunicate.tmpl.html" };
            },
        ])
        .directive("rpMultiRing", [
            function () {
                return { restrict: "E", templateUrl: "views/templates/multiRing.tmpl.html" };
            },
        ])
        .directive("rpIncomingCallsSetup", [
            function () {
                return { restrict: "E", templateUrl: "views/templates/incomingCallsSetup.tmpl.html" };
            },
        ])
        .directive("rpActiveCall", [
            function () {
                return { restrict: "E", templateUrl: "views/templates/activeCall.tmpl.html" };
            },
        ])
        .directive("rpClickToCall", [
            function () {
                return {
                    restrict: "E",
                    scope: { contact: "=", call: "&" },
                    templateUrl: "views/templates/clickToCall.tmpl.html",
                    link: function (a, e) {
                        (a.enableEmailSend = a.$root.globalVars.Settings.EnableEmailSend),
                            (a.callNumbers = function (e) {
                                var t = { contactObj: a.contact, video: !1 };
                                a.call(t);
                            }),
                            (a.makeVideoCall = function (e) {
                                var t = { contactObj: a.contact, video: !0 };
                                a.call(t);
                            });
                    },
                };
            },
        ])
        .directive("rpMobileCallProcessing", [
            function () {
                return { restrict: "E", templateUrl: "views/templates/mobileDeviceDetected.tmpl.html", scope: { data: "=" } };
            },
        ])
        .directive("setNightMode", [
            function () {
                return { restrict: "E", templateUrl: "views/templates/setNightMode.tmpl.html", scope: { data: "=" } };
            },
        ])
        .directive("rpContactCompanyEdit", [
            function () {
                return {
                    restrict: "E",
                    scope: { data: "=", type: "=" },
                    link: function (a, e, t) {
                        (a.getTemplateUrl = function (e) {
                            var t;
                            (t = angular.isDefined(e) ? e : a.type), (a.contentURL = "Internal" == t ? "views/templates/contactCompanyEditInternal.tmpl.html" : "views/templates/contactCompanyEdit.tmpl.html");
                        }),
                            a.getTemplateUrl();
                    },
                    template: '<div ng-include src="contentURL"/>',
                };
            },
        ])
        .directive("rpPresenceAdvancedSettings", [
            function () {
                return { restrict: "E", scope: { data: "=" }, templateUrl: "views/templates/presenceAdvancedSettings.tmpl.html" };
            },
        ])
        .directive("rpEnter", [
            function () {
                return function (t, e, a) {
                    e.bind("keydown keypress", function (e) {
                        13 === e.which &&
                            (t.$apply(function () {
                                t.$eval(a.ngEnter);
                            }),
                            e.preventDefault());
                    });
                };
            },
        ])
        .directive("rpContactGeneralEdit", [
            function () {
                return {
                    restrict: "E",
                    scope: { data: "=", type: "=" },
                    link: function (a, e, t) {
                        (a.getTemplateUrl = function (e) {
                            var t;
                            (t = angular.isDefined(e) ? e : a.type), (a.contentURL = "Internal" == t ? "views/templates/contactGeneralEditInternal.tmpl.html" : "views/templates/contactGeneralEdit.tmpl.html");
                        }),
                            a.getTemplateUrl();
                    },
                    template: '<div ng-include src="contentURL"/>',
                };
            },
        ]),
    (function () {
        "use strict";
        function e(e, a, n, o) {
            var r = {
                productVersion: "7.5.01",
                locale: "en-US",
                loginError: void 0,
                version: function () {
                    return r.productVersion;
                },
                initialize_I18N: function () {
                    var t = a.defer();
                    return (
                        n(function () {
                            (r.locale = window.navigator.language || window.navigator.userLanguage),
                                r.locale || (e.error("Locale empty, defaulting to en-us"), (r.locale = "en-US")),
                                (r.locale = r.locale.toLocaleLowerCase()),
                                e.info("Using browser locale", r.locale),
                                o.loadLocale(r.locale).then(
                                    function (e) {
                                        t.resolve("success");
                                    },
                                    function (e) {
                                        t.reject("error");
                                    }
                                );
                        }, 100),
                        t.promise
                    );
                },
                setLoginError: function (e) {
                    console.log("loginError", e), e ? sessionStorage.setItem("loginError", e) : sessionStorage.removeItem("loginError");
                    r.loginError = e ? o.getPhrase(e) : "";
                },
            };
            return r;
        }
        angular.module("GlobalModule", []).factory("$Global", e), (e.$inject = ["$log", "$q", "$timeout", "UCLocaleService"]);
    })(),
    (function () {
        "use strict";
        function e(e, t, a, n) {
            var o = {
                product: void 0,
                bulletins: void 0,
                init: function (e) {
                    var t = a.defer();
                    return console.debug("null out bulleting read"), t.resolve(!0), t.promise;
                },
            };
            return (o.clearSetting = r), (o.saveSetting = i), o;
            function r() {
                angular.isString(o.product) ? localStorage.removeItem(o.product + "_bulletin") : console.error("product not initialized");
            }
            function i(e) {
                angular.isString(o.product) ? localStorage.setItem(o.product + "_bulletin", e) : console.error("product not initialized");
            }
        }
        function t(i, s, l, e) {
            var c = {
                bulletins: void 0,
                open: function (e, t) {
                    if (!angular.isArray(e)) return null;
                    var a;
                    c.bulletins = void 0;
                    var n = s.productVersion;
                    (a = n.split(".")).pop();
                    var o = a.join(".");
                    if (t) {
                        var r = (a = t.split(" "))[0];
                        t = r === o ? t : null;
                    }
                    return (e = (e = i("orderBy")(e, "version")).filter(function (e) {
                        return e.version.split(" ")[0] === o && (null === t || e.version > t);
                    })).length
                        ? ((c.bulletins = e),
                          l.open({
                              templateUrl: "modals/views/userBulletinModal.html",
                              controller: "UserBulletinModalController as vm",
                              size: "lg",
                              backdrop: "static",
                              keyboard: !0,
                              resolve: {
                                  bulletins: function () {
                                      return c.bulletins;
                                  },
                              },
                          }))
                        : null;
                },
            };
            return c;
        }
        function a(e, t, a, n) {
            var o = this;
            function r() {
                o.index++, (o.htmlBody = atob(o.bulletins[o.index].bulletin));
            }
            (o.modalHeight = (70 * n.innerHeight) / 100),
                (o.doNotShowAgain = !1),
                (o.bulletins = a.bulletins),
                (o.index = -1),
                (o.back = function () {
                    o.index--, (o.htmlBody = atob(o.bulletins[o.index].bulletin));
                }),
                (o.close = function () {
                    t.close(!!o.doNotShowAgain && { version: o.bulletins[o.index].version });
                }),
                (o.next = r)();
        }
        angular.module("UserBulletin", []).factory("$UserBulletin", e).service("$UserBulletinModal", t).controller("UserBulletinModalController", a),
            (e.$inject = ["$Global", "$http", "$q", "$UserBulletinModal"]),
            (t.$inject = ["$filter", "$Global", "$uibModal", "$Utilities"]),
            (a.$inject = ["bulletins", "$uibModalInstance", "$UserBulletinModal", "$window"]);
    })(),
    (function () {
        "use strict";
        function e(o, r) {
            var i = {
                sessionID: void 0,
                login: function (t, e) {
                    var a = r.defer(),
                        n = i.createSessionID();
                    return (
                        (i.sessionID = n),
                        o.post("/ucapi/cti/Login", { user: t, password: e, session: n, mode: "uc" }).then(
                            function (e) {
                                console.log("User: " + t + " successfully logged in with extension data=" + JSON.stringify(e.data)), sessionStorage.setItem("sessionID", n), a.resolve(e);
                            },
                            function (e) {
                                a.reject(e);
                            }
                        ),
                        a.promise
                    );
                },
                logout: function () {
                    var t = r.defer();
                    return (
                        o.post("/ucapi/cti/Logout", { mode: "uc", session: i.sessionID }, { timeout: 5e3 }).then(
                            function (e) {
                                t.resolve(e);
                            },
                            function (e) {
                                t.reject(e);
                            }
                        ),
                        t.promise
                    );
                },
                createSessionID: function () {
                    return (+new Date()).toString().substr(-8);
                },
            };
            return i;
        }
        angular.module("AuthenticationModule", []).factory("$Authentication", e), (e.$inject = ["$http", "$q"]);
    })(),
    (function () {
        "use strict";
        angular.module("HttpInterceptorModule", []).service("UCServices", a).factory("httpInterceptor", n).config(e);
        var t = null;
        function e(e) {
            (e.defaults.useXDomain = !0), (e.defaults.withCredentials = !0), window.UC_BladeAddress ? (console.info("DeveloperMode", UC_BladeAddress), (t = UC_BladeAddress)) : (t = ""), e.interceptors.push("httpInterceptor");
        }
        function a() {
            var e = {};
            return (e.address = t), e;
        }
        function n(a) {
            return {
                request: function (e) {
                    if (/^\/api\//.test(e.url) || /^\/ucapi\//.test(e.url) || /^\/uc\//.test(e.url)) {
                        if ("GET" === e.method && e.url.indexOf("?") < 0) {
                            var t = +new Date();
                            (t = "?v=" + t.toString().substr(-5)), (e.url += t);
                        }
                        a.address && (e.url = a.address + e.url);
                    }
                    return e;
                },
            };
        }
        (e.$inject = ["$httpProvider"]), (a.$inject = []), (n.$inject = ["UCServices"]);
    })(),
    (function (e) {
        "use strict";
        angular.module("UCLocale", []).service("UCLocaleService", [
            "$q",
            "$http",
            "tmhDynamicLocale",
            function (o, n, r) {
                var s = {
                    debug: !1,
                    phrases: null,
                    path: null,
                    setPath: function (e) {
                        s.path = e;
                    },
                    getPath: function (e) {
                        return s.path ? s.path : "i18n/locales/";
                    },
                    loadLocale: function (a) {
                        var n = o.defer();
                        return (
                            s.loadPhrases(a).then(
                                function (e) {
                                    r.set(a).then(
                                        function (e) {
                                            console.log("Successfully loaded ngLocale: " + e.id), n.resolve("Phrases and ngLocale loaded and installed.");
                                        },
                                        function (e) {
                                            if ((console.log("Locale set failed for " + a), "en-us" === a || "en" === a)) n.resolve("Phrases loaded, ngLocale not loaded and installed.");
                                            else {
                                                var t = a.split("-");
                                                angular.isArray(t) && 1 < t.length
                                                    ? ((a = t[0]),
                                                      console.log("Attempt to install backup locale: " + a),
                                                      r.set(a).then(
                                                          function (e) {
                                                              console.log("Successfully loaded ngLocale: " + e.id), n.resolve("Phrases and ngLocale loaded and installed.");
                                                          },
                                                          function (e) {
                                                              console.log("Failed to load ngLocale: " + a),
                                                                  console.log("Attempt to install en-us locale"),
                                                                  r.set("en-us").then(
                                                                      function (e) {
                                                                          console.log("Successfully loaded ngLocale: " + e.id), n.resolve("Phrases and ngLocale loaded and installed.");
                                                                      },
                                                                      function (e) {
                                                                          n.resolve("Phrases loaded, ngLocale for en-us, not loaded and installed.");
                                                                      }
                                                                  );
                                                          }
                                                      ))
                                                    : (console.log("Attempt to install en-us locale"),
                                                      r.set("en-us").then(
                                                          function (e) {
                                                              console.log("Successfully loaded ngLocale: " + e.id), n.resolve("Phrases and ngLocale loaded and installed.");
                                                          },
                                                          function (e) {
                                                              n.resolve("Phrases loaded, ngLocale for en-us, not loaded and installed.");
                                                          }
                                                      ));
                                            }
                                        }
                                    );
                                },
                                function (e) {
                                    console.log("loadLocale: Failed to load locale phrase file for " + a), n.reject("Fatal error, could not load a phrase file.");
                                }
                            ),
                            n.promise
                        );
                    },
                    getUSEnglishLocaleFile: function (e) {
                        var t = o.defer();
                        return (
                            s.getLocaleFile("en-us").then(
                                function (e) {
                                    t.resolve(locale + " loaded.");
                                },
                                function (e) {
                                    t.reject("Unable to download en-us as failsafe locale.");
                                }
                            ),
                            t.promise
                        );
                    },
                    getLocaleFile: function (t) {
                        var a = o.defer(),
                            e = s.getPath() + t.toLowerCase() + ".json";
                        return (
                            console.log("getLocaleFile: load phrases for " + t + ", url=" + e),
                            n.get(e).then(
                                function (e) {
                                    e.data && angular.isObject(e.data) ? ((s.phrases = e.data), a.resolve(t + " loaded.")) : (console.log("Locale phrases data is not an array, structure is invalid "), a.reject("InvalidFormat"));
                                },
                                function (e) {
                                    console.error("getLocaleFile", e), a.reject("File Load Error");
                                }
                            ),
                            a.promise
                        );
                    },
                    loadPhrases: function (a) {
                        var n = o.defer();
                        if ((console.log("loadPhrases: " + a), a))
                            return (
                                s.getLocaleFile(a).then(
                                    function (e) {
                                        n.resolve(a + " loaded.");
                                    },
                                    function (e) {
                                        var t = a.split("-");
                                        angular.isArray(t) && 1 < t.length
                                            ? (console.log("Attempt to load default language locale: " + t[0]),
                                              s.getLocaleFile(t[0]).then(
                                                  function (e) {
                                                      n.resolve(t[0] + " loaded.");
                                                  },
                                                  function (e) {
                                                      "en-us" === a.toLowerCase()
                                                          ? n.reject("Unable to download en-us as failsafe locale.")
                                                          : s.getLocaleFile("en-us").then(
                                                                function (e) {
                                                                    n.resolve(a + " loaded.");
                                                                },
                                                                function (e) {
                                                                    n.reject("Unable to download en-us as failsafe locale.");
                                                                }
                                                            );
                                                  }
                                              ))
                                            : s.getLocaleFile("en-us").then(
                                                  function (e) {
                                                      n.resolve("en-us locale phrase file loaded.");
                                                  },
                                                  function (e) {
                                                      n.reject("Unable to download en-us as failsafe locale.");
                                                  }
                                              );
                                    }
                                ),
                                n.promise
                            );
                        n.resolve("locale is required.");
                    },
                    getPhrase: function (e, t) {
                        if (angular.isObject(s.phrases)) {
                            var a = s.phrases[e];
                            if (a) {
                                if (t) {
                                    angular.isArray(t) || (t = [t]);
                                    for (var n = 0; n < t.length; n++) {
                                        var o = new RegExp("%" + (n + 1), "g");
                                        a = a.replace(o, t[n]);
                                    }
                                }
                                if (s.debug) {
                                    var r = a.split(" "),
                                        i = [];
                                    return (
                                        angular.forEach(r, function (e) {
                                            var t = Math.floor(1.25 * e.length);
                                            i.push(Array(t + 1).join("M"));
                                        }),
                                        i.join(" ")
                                    );
                                }
                                return a;
                            }
                            return "<<" + e + ">>";
                        }
                    },
                    phraseExists: function (e) {
                        if (angular.isObject(s.phrases)) return s.phrases[e];
                    },
                };
                return s;
            },
        ]);
    })(window),
    (function (e) {
        "use strict";
        angular.module("UCStorage", []).service("UCStorageService", [
            "$Global",
            "HttpService",
            "$q",
            "$rootScope",
            "$window",
            function (e, a, n, t, o) {
                var r = {};
                function i() {
                    angular.forEach(r.defaultRemoteUserSettings, function (e, t) {
                        r.remoteUserSettings[t] || (r.remoteUserSettings[t] = e);
                    });
                }
                return (
                    (r.defaultRemoteUserSettings = {}),
                    (r.remoteUserSettings = null),
                    (r.dirtyRemoteSettings = !1),
                    (r.supportsLocalStorage = function () {
                        try {
                            return "localStorage" in o && null !== o.localStorage;
                        } catch (e) {
                            return !1;
                        }
                    }),
                    (r.writeLocalStorage = function (e, t) {
                        try {
                            localStorage.setItem(e, t);
                        } catch (e) {
                            return void console.log("UCStorageService:writeLocalStorage err=" + JSON.stringify(e));
                        }
                    }),
                    (r.readLocalStorage = function (e) {
                        try {
                            return localStorage.getItem(e);
                        } catch (e) {
                            return void console.log("UCStorageService:readLocalStorage err=" + JSON.stringify(e));
                        }
                    }),
                    (r.deleteLocalStorageKey = function (e) {
                        try {
                            localStorage.removeItem(e);
                        } catch (e) {
                            return void console.log("UCStorageService:deleteLocalStorageKey err=" + JSON.stringify(e));
                        }
                    }),
                    (r.flushAllLocalApplicationSettings = function () {
                        (t.globalVars.Settings.version = e.productVersion), r.writeLocalStorage("UserSettings", JSON.stringify(t.globalVars.Settings));
                    }),
                    (r.setDefaultRemoteUserSettings = function (e) {
                        r.defaultRemoteUserSettings = e;
                    }),
                    (r.readRemoteUserSettings = function () {
                        r.remoteUserSettings = {};
                        var t = n.defer();
                        return (
                            a.getSettings().then(
                                function (e) {
                                    if (null !== e && e.Data)
                                        try {
                                            r.remoteUserSettings = JSON.parse(e.Data);
                                        } catch (e) {
                                            console.log("Error parsing getSettings");
                                        } finally {
                                            i();
                                        }
                                    else i();
                                    t.resolve(r.remoteUserSettings);
                                },
                                function (e) {
                                    t.reject(e);
                                }
                            ),
                            t.promise
                        );
                    }),
                    r
                );
            },
        ]);
    })(window),
    (function () {
        "use strict";
        function e(n, u, g, r, i) {
            var s = {
                init: function () {
                    var t = g.defer();
                    return (
                        (s.presenceStatusHash = {}),
                        s.getPresenceStates().then(
                            function (e) {
                                var a = {};
                                angular.forEach(s.defaultPresenceStatusArr, function (e) {
                                    a[e.data] = e;
                                }),
                                    (s.presenceStatusArr = []),
                                    angular.forEach(e.Data, function (e) {
                                        if (e.Enabled) {
                                            var t = a[e.State];
                                            s.presenceStatusArr.push(t), new RegExp("^UserDefined").test(e.State) && (new RegExp("^User Defined ").test(e.Text) || (t.label = e.Text));
                                        }
                                    }),
                                    angular.forEach(s.presenceStatusArr, function (e) {
                                        if (((s.presenceStatusHash[e.data] = e), !angular.isDefined(e.label))) {
                                            var t = n.phraseExists(e.data);
                                            e.label = t || e.data;
                                        }
                                    }),
                                    t.resolve("hasPresenceStates");
                            },
                            function (e) {
                                (s.presenceStatusArray = s.defaultPresenceStatusArr),
                                    angular.forEach(s.presenceStatusArr, function (e) {
                                        (s.presenceStatusHash[e.data] = e).label = n.getPhrase(e.data);
                                    }),
                                    t.resolve("hasDefaultPresenceStates");
                            }
                        ),
                        t.promise
                    );
                },
                presenceStatusArray: function () {
                    return s.presenceStatusArr;
                },
                getPresenceIcon: function (e) {
                    var t = s.presenceStatusHash[e];
                    if (t) return t.icon;
                    return null;
                },
                getPresenceLabel: function (e) {
                    if (e) {
                        var t = s.presenceStatusHash[e];
                        return t ? t.label : "Unknown";
                    }
                    return e;
                },
                getPresenceColor: function (e) {
                    var t = s.presenceStatusHash[e];
                    return t ? t.color : null;
                },
                getPresenceAvailability: function (e) {
                    var t = s.presenceStatusHash[e];
                    if (t) return t.available;
                    return !1;
                },
                getPresenceStates: function () {
                    var t = g.defer();
                    return (
                        u.post("/ucapi/presence/GetDescriptors", {}).then(
                            function (e) {
                                console.log("GetDescriptors success"), t.resolve(e.data);
                            },
                            function (e) {
                                t.reject(e);
                            }
                        ),
                        t.promise
                    );
                },
                updatePresence: function (e, t, a, n, o, r, i, s, l) {
                    var c = g.defer(),
                        d = { contactId: e, presence: { Status: t, Title: a, ReturnTime: n, Location: o, Note: r, IsImmediate: !angular.isDefined(l) || l, ForwardSetting: { Mode: i, Number: s } } };
                    return (
                        console.log("updatePresence contactId=" + e),
                        u.post("/ucapi/presence/SetPresence", d).then(
                            function (e) {
                                console.log("SetPresence success"), c.resolve(e.data);
                            },
                            function (e) {
                                console.log("SetPresence: failed, HTTP status " + t), c.reject(e);
                            }
                        ),
                        c.promise
                    );
                },
                setPresenceToStatus: function (e) {
                    var t = g.defer();
                    return (
                        s.updatePresence(r.getUser().presence.id, e, null, null, null, null, "DoNotForward").then(
                            function (e) {
                                t.resolve(e.data);
                            },
                            function (e) {
                                t.reject(e);
                            }
                        ),
                        t.promise
                    );
                },
                setPresenceUsingProfile: function (t) {
                    var a = g.defer();
                    return (
                        s
                            .updatePresence(
                                r.getUser().presence.id,
                                t.presence.status,
                                t.presence.subject,
                                t.presence.returnTime ? t.presence.returnTime : null,
                                t.presence.location,
                                t.presence.remarks,
                                t.presence.forwarding.mode,
                                t.presence.forwarding.destination,
                                !0
                            )
                            .then(
                                function (e) {
                                    i.setCurrentProfile(t), a.resolve(e.Data);
                                },
                                function (e) {
                                    a.reject(e);
                                }
                            ),
                        a.promise
                    );
                },
                savePresence: function () {
                    var e,
                        t = r.getUser(),
                        a = i.getCurrentProfile();
                    if (a) (e = angular.copy(a)).presence.returnTime = t.PresenceDetails.ReturnTime;
                    else {
                        e = {};
                        var n = {};
                        (n.status = t.PresenceDetails.Status),
                            (n.location = t.PresenceDetails.Location),
                            (n.returnTime = t.PresenceDetails.ReturnTime),
                            (n.remarks = t.PresenceDetails.Note),
                            (n.subject = t.PresenceDetails.Title),
                            (n.forwarding = {});
                        var o = t.presence.forwarding.mode;
                        "Idle" === o ? (o = "DoNotForward") : "Forward" === o ? (o = "ForwardImmediate") : "Dnd" === o ? (o = "DoNotDisturb") : "DualRinging" === o && (o = "ForwardBothRinging"),
                            (n.forwarding.mode = o),
                            (n.forwarding.destination = t.presence.forwarding.destination),
                            (e = { presence: n });
                    }
                    s.savedPresenceData = e;
                },
                restorePresence: function () {
                    console.log("restorePresence savedPresence=", s.savedPresenceData), s.savedPresenceData && (s.setPresenceUsingProfile(s.savedPresenceData), (s.savedPresenceData = null));
                },
                savedPresenceData: null,
                leaveAsDND: !1,
                presenceStatusHash: null,
                presenceStatusArr: [],
                defaultPresenceStatusArr: [
                    { data: "InTheOffice", icon: "fa fa-laptop fa-fw", color: "text-success", available: !0 },
                    { data: "InMeeting", icon: "fa fa-info-circle     fa-fw", color: "text-warning" },
                    { data: "OutToLunch", icon: "fa fa-cutlery fa-fw", color: "text-info" },
                    { data: "Unavailable", icon: "fa fa-ban fa-fw", color: "text-danger" },
                    { data: "OutOfOffice", icon: "fa fa-refresh fa-fw", color: "text-danger" },
                    { data: "GoneForTheDay", icon: "fa fa-home fa-fw", color: "text-primary" },
                    { data: "BusinessTravel", icon: "fa fa-plane fa-fw", color: "text-danger" },
                    { data: "Sick", icon: "fa fa-procedures fa-fw", color: "text-danger" },
                    { data: "OnVacation", icon: "fas fa-umbrella-beach fa-fw", color: "text-danger" },
                    { data: "Unknown", icon: "fa fa-question fa-fw", color: "text-warning" },
                    { data: "UserDefined1", icon: "fas fa-square fa-fw", color: "text-warning" },
                    { data: "UserDefined2", icon: "fal fa-square fa-fw", color: "text-warning" },
                    { data: "UserDefined3", icon: "fas circle fa-fw", color: "text-warning" },
                    { data: "UserDefined4", icon: "fal circle fa-fw", color: "text-warning" },
                ],
            };
            return s;
        }
        function t(o, t, r, a, n, e, i) {
            var s = {
                profiles: [],
                currentProfile: void 0,
                updateProfileList: function (e) {
                    e.map(function (e) {
                        return (
                            angular.isObject(e.presence.forwarding)
                                ? (e.presence.forwarding.Mode && ((e.presence.forwarding.mode = e.presence.forwarding.Mode), delete e.presence.forwarding.Mode),
                                  e.presence.forwarding.Number && ((e.presence.forwarding.destination = e.presence.forwarding.Number), delete e.presence.forwarding.Number))
                                : ((e.presence.forwarding = {}), (e.presence.forwarding.mode = "DoNotForward")),
                            e
                        );
                    });
                    return (e = a("orderBy")(e, "name"));
                },
                init: function () {
                    var t = r.defer(),
                        e = "/api/profile" + i.generateRandomVersion();
                    return (
                        o.get(e, {}).then(
                            function (e) {
                                (s.profiles = s.updateProfileList(e.data)), (s.currentProfile = s.findProfile(n.globalVars.Settings.currentProfile)), t.resolve({ currentProfile: s.currentProfile, profiles: s.profiles });
                            },
                            function (e) {
                                t.reject(e);
                            }
                        ),
                        t.promise
                    );
                },
                findProfile: function (e) {
                    if (e) {
                        for (var t = 0; t < s.profiles.length; t++) {
                            var a = s.profiles[t];
                            if (a.id === e) return a;
                        }
                        return null;
                    }
                },
                findProfileByName: function (e) {
                    if (e) {
                        for (var t = 0; t < s.profiles.length; t++) {
                            var a = s.profiles[t];
                            if (a.name === e) return a;
                        }
                        return null;
                    }
                },
                getProfiles: function () {
                    return s.profiles;
                },
                setCurrentProfile: function (e) {
                    (s.currentProfile = e), s.currentProfile ? (n.globalVars.Settings.currentProfile = s.currentProfile.id) : (n.globalVars.Settings.currentProfile = null), t.saveUserSettings();
                },
                getCurrentProfile: function () {
                    return s.currentProfile;
                },
                removeProfileFromList: function (e) {
                    if (e) for (var t = 0; t < s.profiles.length; t++) if (s.profiles[t].id === e) return s.profiles.splice(t, 1), !0;
                    return !1;
                },
                deleteProfile: function (t) {
                    var a = r.defer();
                    return (
                        o.delete("/api/profile/" + t, {}).then(
                            function (e) {
                                s.removeProfileFromList(t), a.resolve(!0);
                            },
                            function (e) {
                                a.reject(e);
                            }
                        ),
                        a.promise
                    );
                },
                postProfile: function (a) {
                    var n = r.defer(),
                        e = angular.copy(a);
                    return (
                        e.presence.forwarding.destination && ((e.presence.forwarding.Number = e.presence.forwarding.destination), delete e.presence.destination),
                        o.post("/api/profile", e).then(
                            function (e) {
                                s.removeProfileFromList(a.id);
                                var t = angular.copy(s.profiles);
                                t.push(e.data), (s.profiles = s.updateProfileList(t)), n.resolve(e.data);
                            },
                            function (e) {
                                n.reject(e);
                            }
                        ),
                        n.promise
                    );
                },
            };
            return s;
        }
        angular.module("PresenceServiceModule", []).factory("$Presence", e).factory("ProfileService", t),
            (e.$inject = ["UCLocaleService", "$http", "$q", "CurrentUser", "ProfileService"]),
            (t.$inject = ["$http", "HttpService", "$q", "$filter", "$rootScope", "UCStorageService", "$Utilities"]);
    })(),
    (function (z) {
        "use strict";
        angular.module("UCVideo", ["VideoModal", "ConfirmationModal"]).service("$UCVideo", [
            "$document",
            "$log",
            "$rootScope",
            "$http",
            "$q",
            "$timeout",
            "$state",
            "$interval",
            "$filter",
            "toaster",
            "$IncomingVideoModal",
            "$OutgoingVideoModal",
            "AudioService",
            "$notification",
            "GetUsersService",
            "$Presence",
            "ProfileService",
            "$ConfirmationModal",
            function (e, p, m, b, o, h, a, t, n, C, v, S, y, D, I, r, s, w) {
                var l,
                    c,
                    P,
                    T,
                    A,
                    M,
                    i,
                    d,
                    N = {
                        streamMuteSettings: { audio: !1, video: !1 },
                        dimension_options: [
                            { width: 320, height: 240 },
                            { width: 250, height: 188 },
                            { width: 180, height: 135 },
                        ],
                        missedVideoCalls: 0,
                        addVideo: function (e) {
                            _(e, { muteAudio: !0 });
                        },
                        cancelOutgoingCall: function (e, t) {
                            U(e), (a = e), b.post("/ucapi/rtc/EndCall", { user: a, text: angular.toJson({ cancel: !0 }) }), t && (p.info("Stop caller side ringing"), y.stopIncomingCallAudio());
                            var a;
                        },
                        endVideo: function () {
                            console.log("endVideo:"), (T = {});
                            var e = Object.keys(A);
                            angular.forEach(e, function (e) {
                                b.post("/ucapi/rtc/EndCall", { user: e }), H(e);
                            }),
                                W();
                        },
                        init: function (e) {
                            p.info("UCVideo init myExtension=", e),
                                (P = e),
                                (c = { iceServers: [{ url: "stun:stun.l.google.com:19302" }, { url: "stun:stun.services.mozilla.com" }, { url: "stun:stun1.l.google.com:19302" }, { url: "stun:stun2.l.google.com:19302" }] }),
                                (A = {}),
                                (N.numConnections = 0),
                                (T = {}),
                                (N.missedVideoCalls = 0),
                                m.$on("RtcMessage", u);
                        },
                    };
                return (
                    (N.startVideo = _),
                    (N.toggleAudioMute = q),
                    (N.toggleVideoMute = function () {
                        var e = l.getVideoTracks();
                        if (0 === e.length) return void console.log("No local video available.");
                        console.log("Toggling video mute state.");
                        for (var t = 0; t < e.length; ++t) e[t].enabled = !e[t].enabled;
                        console.log("Video " + (e[0].enabled ? "unmuted." : "muted."));
                        var a = angular.copy(N.streamMuteSettings);
                        (a.video = !e[0].enabled), (N.streamMuteSettings = a);
                    }),
                    (N.video0InUse = void 0),
                    (N.video1InUse = void 0),
                    (N.video2InUse = void 0),
                    (N.numConnections = 0),
                    (N.videoConstraints = { video: { width: { ideal: 320 }, height: { ideal: 240 } } }),
                    (N.dimensions = N.dimension_options[0]),
                    N
                );
                function O() {
                    if (m.globalVars.NotificationsAvailable) {
                        !(function () {
                            try {
                                i && i();
                            } catch (e) {
                            } finally {
                                i = null;
                            }
                        })(),
                            N.missedVideoCalls++;
                        var e = m.getLocalPhrase("MissedVideoCalls.Title"),
                            t = m.getLocalPhrase("MissedVideoCalls", [N.missedVideoCalls]);
                        i = D.showNotification(e, t, "resources/images/feather-video-red.png", 0, function () {
                            (N.missedVideoCalls = 0), z.focus(), a.go("app.callHistory");
                        });
                    }
                }
                function V(e, t) {
                    var a;
                    (a = t ? (t.name == t.extension ? t.name : t.name + " (" + t.extension + ")") : ""), "remoteVideo0" === e ? (N.displayName0 = a) : "remoteVideo1" === e ? (N.displayName1 = a) : (N.displayName2 = a);
                }
                function L() {
                    try {
                        M();
                    } catch (e) {}
                }
                function E(e, t, a, n) {
                    p.log("startCallSetup: extension=%s, muteAudio=%d, outbound=%d, joiningSenderToConf=%d", e, t, a, n), (T[e] = { extension: e, muteAudio: t, outbound: a, joiningSenderToConf: n });
                }
                function U(e) {
                    p.info("endCallSetup:", e), delete T[e];
                }
                function $(e, t) {
                    p.info("sendRtcMessage: ", e, t);
                    var a = o.defer(),
                        n = {};
                    return (
                        (n.data = t),
                        b.post("/ucapi/rtc/Send", { user: e, text: angular.toJson(n) }).then(
                            function (e) {
                                a.resolve(!0);
                            },
                            function (e) {
                                a.reject(e);
                            }
                        ),
                        a.promise
                    );
                }
                function x(e) {
                    return new Promise(function (r, t) {
                        z.getUserMedia(
                            e,
                            function (e) {
                                console.log("Local stream created"), (l = e);
                                var t = document.getElementById("localVideo");
                                (t.onloadedmetadata = function (e) {
                                    console.log("Local video loaded");
                                }),
                                    attachMediaStream(t, e);
                                var a = { video: !1, audio: !1 },
                                    n = l.getAudioTracks();
                                0 < n.length && (console.log("Using audio device: " + n[0].label), (a.audio = !n[0].enabled));
                                var o = l.getVideoTracks();
                                0 < o.length && (console.log("Using video device: " + o[0].label), (a.video = !o[0].enabled)), (N.streamMuteSettings = a), r(e);
                            },
                            function (e) {
                                console.error("getUserMedia error=" + JSON.stringify(e)), t(e);
                            }
                        );
                    });
                }
                function j(e) {
                    if (A[e]) return A[e];
                    console.info("No peer connection for ", e);
                }
                function R(i) {
                    p.info("openPeerConnection:", i);
                    var a = {};
                    (a.extension = i),
                        (A[i] = a),
                        N.numConnections++,
                        p.info("openPeerConnection: numPeerConnections=", N.numConnections),
                        N.video0InUse
                            ? N.video1InUse
                                ? N.video2InUse
                                    ? p.error("No video slots available")
                                    : ((N.video2InUse = !0), (a.remoteVideo = "remoteVideo2"))
                                : ((N.video1InUse = !0), (a.remoteVideo = "remoteVideo1"))
                            : ((N.video0InUse = !0), (a.remoteVideo = "remoteVideo0")),
                        (N.dimensions = N.dimension_options[N.numConnections - 1]);
                    var e = new RTCPeerConnection(c);
                    if (
                        (((a.pc = e).onicecandidate = function (e) {
                            if ((console.log("onIceCandidate candidate=", e.candidate), e.candidate)) {
                                var t = { candidate: {} };
                                for (var a in e.candidate) "function" != typeof e.candidate[a] && "object" != typeof e.candidate[a] && (t.candidate[a] = e.candidate[a]);
                                b.post("/ucapi/rtc/Candidate", { user: i, candidate: angular.toJson(t) });
                            }
                        }),
                        (e.onaddstream = function (e) {
                            p.info("onAddStream event=", e, a);
                            var t = document.getElementById(a.remoteVideo);
                            attachMediaStream(t, e.stream);
                        }),
                        (e.onremovestream = f),
                        (e.ondatachannel = g),
                        (e.oniceconnectionstatechange = function (e) {
                            console.log("onIceConnectionStateChange event=" + JSON.stringify(e));
                            var t = e.target;
                            if ((console.log("onIceConnectionStateChange iceConnectionState=" + t.iceConnectionState), "disconnected" === t.iceConnectionState && t.connected)) {
                                console.log("connection was disconnected");
                                for (var a = Object.keys(A), n = !1, o = 0; o < a.length; o++) {
                                    var r = a[o];
                                    if (A[r] === t) {
                                        (n = !0), H(r);
                                        break;
                                    }
                                }
                                n || console.error("onIceConnectionStateChange: Could not find peer connection in collection");
                            } else (t.connected = "connected" === t.iceConnectionState || "completed" === t.iceConnectionState), console.log("pc2.connected=" + t.connected), t.connected && U(i);
                        }),
                        e.addStream(l),
                        1 === N.numConnections &&
                            (console.log("enableAvailabilityChangeEvents"),
                            (d = m.$on("AVAILABILITY_CHANGE", function (e, t) {
                                var a = t[0],
                                    n = j(a.Number);
                                n && !a.CanChat && (p.info("Closing connection since", a.Number, " logged out"), H(a.Number));
                            })),
                            m.globalVars.Settings.VideoCallProfile))
                    ) {
                        r.savePresence();
                        var t = s.findProfile(m.globalVars.Settings.VideoCallProfile);
                        t && r.setPresenceUsingProfile(t);
                    }
                    return a;
                }
                function H(e) {
                    console.log("closeConnectionWithPeer extension:", e);
                    var t = j(e);
                    t &&
                        t.pc &&
                        (t.pc.close(),
                        V(t.remoteVideo, null),
                        "remoteVideo0" === t.remoteVideo
                            ? (N.video0InUse = !1)
                            : "remoteVideo1" === t.remoteVideo
                            ? (N.video1InUse = !1)
                            : "remoteVideo2" === t.remoteVideo
                            ? (N.video2InUse = !1)
                            : p.error("unrecognized remoteVideo", t.remoteVideo),
                        delete A[e],
                        N.numConnections--,
                        p.info("closeConnectionWithPeer: numPeerConnections=", N.numConnections));
                    var a = !1;
                    0 === N.numConnections &&
                        ((a = !0),
                        l &&
                            (void 0 === l.getTracks
                                ? l.stop()
                                : l.getTracks().forEach(function (e) {
                                      e.stop();
                                  }),
                            (l = null)),
                        console.log("disableAvailabilityChangeEvents"),
                        d && (d(), (d = null)),
                        m.globalVars.Settings.VideoCallProfile && r.restorePresence()),
                        (function (e, t) {
                            if ((p.info("closeVideoComponents", e, t), t)) {
                                var a = document.getElementById("localVideo");
                                a && (a.pause(), (a.src = ""));
                            }
                            if (e) {
                                var n = document.getElementById(e.remoteVideo);
                                n && (n.pause(), (n.src = ""));
                            } else p.error("closeVideoComponents: no peer connection established");
                        })(t, a),
                        a && W(),
                        (N.dimensions = N.dimension_options[N.numConnections - 1]);
                }
                function k(a, n) {
                    p.info("createOffer:", a);
                    var o = n.pc;
                    o.createOffer(
                        function (e) {
                            p.info("createOffer successful");
                            var t = new RTCSessionDescription(e);
                            o.setLocalDescription(
                                t,
                                function () {
                                    b.post("/ucapi/rtc/Offer", { user: a, sdp: angular.toJson(t) });
                                },
                                function () {
                                    console.log("set description error");
                                }
                            ),
                                n.muteAudio &&
                                    h(function () {
                                        q();
                                    }, 2e3);
                        },
                        function (e) {
                            console.error("createOffer error=" + JSON.stringify(e));
                        }
                    );
                }
                function u(e, t) {
                    var a,
                        n,
                        o = t.params[0],
                        r = o.User ? o.User.Name : o.Name;
                    if ("RtcReceive" === t.eventName) return (a = o), void ("peerBridge" === (n = angular.fromJson(a.Text).data).type ? _(n.with, { muteAudio: !1, quiet: !0 }) : console.log("unexpected RtcSend message", n.type));
                    var i,
                        s,
                        l = o.Text ? angular.fromJson(o.Text) : {},
                        c = j(r);
                    if ((c && ((i = c.pc), (s = o.Sdp ? angular.fromJson(o.Sdp) : void 0)), "RtcCandidate" === t.eventName))
                        try {
                            var d = s.candidate;
                            i.addIceCandidate(new RTCIceCandidate(d));
                        } catch (e) {
                            console.log("RtcCandidate error", e);
                        }
                    else if ("RtcAccept" === t.eventName)
                        l.quiet
                            ? k(r, R(r))
                            : (p.info("Stop caller side ringing"),
                              G(),
                              y.stopIncomingCallAudio(),
                              S.close(r),
                              h(function () {
                                  0 < N.numConnections
                                      ? (k(r, R(r)),
                                        angular.forEach(Object.keys(A), function (e) {
                                            e !== r && $(e, { type: "peerBridge", with: r });
                                        }))
                                      : x({ audio: !0, video: N.videoConstraints.video }).then(
                                            function (e) {
                                                console.log("getUserMedia succeeded");
                                                var t = R(r),
                                                    a = T[r];
                                                a && a.muteAudio && (t.muteAudio = !0), k(r, t);
                                            },
                                            function (e) {
                                                var t;
                                                console.log("getUserMedia error", e),
                                                    B(r, { quiet: l.quiet, reason: "ERROR" }),
                                                    (t = e.message ? e.message : angular.toJson(e)),
                                                    C.pop("error", "Media Access Error", t, null, "trustedHtml"),
                                                    H(r),
                                                    U(r);
                                            }
                                        );
                              }, 250));
                    else if ("RtcInvite" === t.eventName) {
                        if (3 <= N.numConnections) return p.error("reject call since max connections exceeded", N.numConnections), void B(r, { quiet: l.quiet, reason: "EXCEEDED_MAX_CONNECTIONS" });
                        if (l.quiet)
                            N.numConnections < 3 ? (E(r, !1, !1), R(r), F(r, { quiet: l.quiet })) : (p.error("reject call since max connections exceeded", N.numConnections), B(r, { quiet: l.quiet, reason: "EXCEEDED_MAX_CONNECTIONS" }));
                        else {
                            var u = !1;
                            if (0 < N.numConnections) {
                                if (l.peers.length) return p.error("Conference cannot be joined to another conference"), void B(r, { quiet: l.quiet, reason: "MERGE_CONFERENCE" });
                                p.info(r, "wants to join our conference"), (u = !0);
                            }
                            if ((y.playIncomingCallAudio(), !m.globalVars.WindowIsActive && !m.globalVars.WindowIsInFocus && m.globalVars.NotificationsAvailable)) {
                                var g = I.getUserFromExtension(r);
                                g || (g = { name: r }), (M = D.showNotification("Incoming video call", "Video call from " + g.name, "resources/images/fa-video-camera.png", 5e3));
                            }
                            v.open(r, u).result.then(
                                function (e) {
                                    p.info("Accepted video call from ", r, "to", P),
                                        y.stopIncomingCallAudio(),
                                        L(),
                                        u
                                            ? (E(r, !1, !1, u), R(r), F(r))
                                            : (G(),
                                              h(function () {
                                                  x({ audio: !0, video: N.videoConstraints.video }).then(
                                                      function (e) {
                                                          console.log("getUserMedia callee succeeded"),
                                                              E(r, l.muteAudio, !1, u),
                                                              R(r),
                                                              F(r),
                                                              l.muteAudio &&
                                                                  h(function () {
                                                                      q();
                                                                  }, 500);
                                                      },
                                                      function (e) {
                                                          var t;
                                                          console.log("getUserMedia callee failed"),
                                                              (t = e.message ? e.message : angular.toJson(e)),
                                                              C.pop("error", "Media Access Error", t, null, "trustedHtml"),
                                                              B(r, { quiet: l.quiet, reason: "ERROR" }),
                                                              H(r),
                                                              U(r);
                                                      }
                                                  );
                                              }, 250));
                                },
                                function (e) {
                                    p.info("Reject video call from ", r, "reason", e), y.stopIncomingCallAudio(), L(), "rejected" === e && B(r, { quiet: l.quiet, reason: "DECLINED" });
                                }
                            );
                        }
                    } else if ("RtcOffer" === t.eventName) {
                        var f = new RTCSessionDescription(s);
                        i.setRemoteDescription(
                            f,
                            function () {
                                p.info("createAnswer", r),
                                    i.createAnswer(
                                        function (t) {
                                            console.log("answer=" + JSON.stringify(t)),
                                                i.setLocalDescription(
                                                    t,
                                                    function () {
                                                        console.log("setRemoteDescription offer successful"), b.post("/ucapi/rtc/Answer", { user: r, sdp: angular.toJson(t) });
                                                        var e = I.getUserFromExtension(r);
                                                        e || (e = { name: r }),
                                                            V(c.remoteVideo, e),
                                                            T[r].joiningSenderToConf &&
                                                                h(function () {
                                                                    angular.forEach(Object.keys(A), function (e) {
                                                                        e !== r && $(e, { type: "peerBridge", with: r });
                                                                    });
                                                                }, 2e3);
                                                    },
                                                    function () {
                                                        console.log("set description error");
                                                    }
                                                );
                                        },
                                        function (e) {
                                            console.error("createAnswer error=" + JSON.stringify(e));
                                        }
                                    );
                            },
                            function (e) {
                                console.log("setRemoteDescription offer error: " + JSON.stringify(e));
                            }
                        );
                    } else
                        "RtcReject" === t.eventName
                            ? (p.warn("Callee", r, "rejected the call"),
                              U(r),
                              l.quiet || (p.info("Stop caller side ringing"), y.stopIncomingCallAudio(), S.close(r)),
                              H(r),
                              "DECLINED" === l.reason
                                  ? w.open("Video Call Attempt Rejected", "The other party declined your invitation to video chat", "OK")
                                  : "MERGE_CONFERENCE" === l.reason
                                  ? w.open("Video Call Attempt Rejected", "Joining two conferences is not supported.", "OK")
                                  : "EXCEEDED_MAX_CONNECTIONS" === l.reason
                                  ? w.open("Video Call Attempt Rejected", "The called party does not have enough resources to support this call.", "OK")
                                  : "ERROR" === l.reason && w.open("Video Call Error", "The called party could not setup video.", "OK"))
                            : "RtcAnswer" === t.eventName
                            ? i.setRemoteDescription(
                                  new RTCSessionDescription(s),
                                  function () {
                                      console.log("setRemoteDescription answer successful");
                                      var e = I.getUserFromExtension(r);
                                      e || (e = { name: r }), V(c.remoteVideo, e);
                                  },
                                  function (e) {
                                      console.log("setRemoteDescription answer error: " + JSON.stringify(e));
                                  }
                              )
                            : "RtcEnd" === t.eventName
                            ? (console.log("RtcEnd"), l.cancel ? (v.dismiss(), O()) : H(r))
                            : p.error("Unexpected event", t.eventName);
                }
                function g(e) {
                    console.log("onDataChannel event=" + JSON.stringify(e)),
                        (e.channel.onopen = function () {
                            console.log("Data channel is open and ready to be used.");
                        });
                }
                function f(e) {
                    console.log("onRemoveStream event=" + JSON.stringify(e));
                }
                function F(e, t) {
                    return angular.isDefined(t) || (t = {}), b.post("/ucapi/rtc/Accept", { user: e, text: angular.toJson(t) });
                }
                function B(e, t) {
                    return angular.isDefined(t) || (t = {}), b.post("/ucapi/rtc/Reject", { user: e, text: angular.toJson(t) });
                }
                function _(e, t) {
                    if ((p.log("Starting video call from", P, "to", e, t), A[e])) p.error("Cannot connect to existing extension.");
                    else {
                        var a = I.getUserFromExtension(e);
                        if (a) {
                            if (!a.cache.canVideo) return p.error("Extension", e, " cannot do video"), void w.open("Video Call Attempt Failed", "Unable to perform a video call at this time with " + a.name + " (" + e + ")", "OK");
                            if (3 <= N.numConnections) w.open("Video Call Attempt Rejected", "Video call was disallowed because it would have exceeded 3 concurrent connections.", "OK");
                            else {
                                var n,
                                    o,
                                    r = !1,
                                    i = !1;
                                if ((angular.isObject(t) && ((r = t.muteAudio), (i = t.quiet)), T[e])) p.error("startVideo: ", e, "is already in setup stage");
                                else
                                    i || (0 === S.numberOfOutgoingCalls() && (p.info("Start caller side ringing"), y.playIncomingCallAudio()), E(e, r, !0), S.open(e)),
                                        (n = e),
                                        (o = { peers: Object.keys(A), quiet: i, muteAudio: r }),
                                        angular.isDefined(o) || (o = {}),
                                        b.post("/ucapi/rtc/Invite", { user: n, text: angular.toJson(o) });
                            }
                        } else p.error("Extension", e, " does not have a user");
                    }
                }
                function G() {
                    m.globalVars.hasVideo = !0;
                }
                function W() {
                    h(function () {
                        m.globalVars.hasVideo = !1;
                    }, 250);
                }
                function q() {
                    var e = l.getAudioTracks();
                    if (0 !== e.length) {
                        console.log("Toggling audio mute state.");
                        for (var t = 0; t < e.length; ++t) e[t].enabled = !e[t].enabled;
                        console.log("Audio " + (e[0].enabled ? "unmuted." : "muted."));
                        var a = angular.copy(N.streamMuteSettings);
                        (a.audio = !e[0].enabled), (N.streamMuteSettings = a);
                    } else console.log("No local audio available.");
                }
            },
        ]);
    })(window),
    (function () {
        "use strict";
        function e(e, n, o, r, i, s) {
            var l = {
                getAgentStatus: function (e) {
                    var a = o.defer(),
                        t = {};
                    angular.isArray(e) && e.length && (t.idList = e);
                    return (
                        n.post("/ucapi/agent/GetAgentStatus", t).then(
                            function (e) {
                                var t = e.data.Data.map(function (e) {
                                    return (
                                        l.agent_id_required ? (e.extension = e.LoginID) : (e.extension = e.Extension),
                                        e.Membership &&
                                            (e.Membership = e.Membership.map(function (e) {
                                                return parseInt(e);
                                            })),
                                        e
                                    );
                                });
                                (t = r("orderBy")(t, ["Name", "Extension"])), a.resolve(t);
                            },
                            function (e) {
                                a.reject(e);
                            }
                        ),
                        a.promise
                    );
                },
                getQueueStatus: function (e) {
                    var t = o.defer(),
                        a = {};
                    angular.isArray(e) && e.length && (a.queues = e);
                    return (
                        n.post("/ucapi/agent/GetQueueStatus", a).then(
                            function (e) {
                                t.resolve(e.data.Data);
                            },
                            function (e) {
                                t.reject(e);
                            }
                        ),
                        t.promise
                    );
                },
                init: function () {
                    var a = o.defer();
                    return (
                        angular.forEach(Object.keys(l.statesDisplay), function (e) {
                            l.statesDisplay[e].label = s.getPhrase("State." + e);
                        }),
                        n.get("/api/breakCodes").then(
                            function (e) {
                                i.globalVars.HasBreakCodes
                                    ? ((l.breakCodes = e.data.filter(function (e) {
                                          return e.IsEnabled;
                                      })),
                                      angular.forEach(l.breakCodes, function (e) {
                                          var t = angular.copy(l.statesDisplay.OffDuty);
                                          (t.label = e.SystemDefined ? s.getPhrase(e.Code) : e.Code), (e.label = t.label), (l.statesDisplay[e.Code] = t);
                                      }))
                                    : (l.breakCodes = []),
                                    n.get("/api/tallyCodes/active").then(
                                        function (e) {
                                            var t = {};
                                            i.globalVars.HasTallyCodes &&
                                                angular.forEach(e.data, function (e) {
                                                    t[parseInt(e.QueueID)] = e;
                                                }),
                                                (l.tallyCodes = t),
                                                a.resolve(!0);
                                        },
                                        function (e) {
                                            a.reject(e);
                                        }
                                    );
                            },
                            function (e) {
                                a.reject(e);
                            }
                        ),
                        a.promise
                    );
                },
                agent_id_required: void 0,
                breakCodes: [],
                numIncompleteRequiredTallyCode: 0,
                numIncompleteOptionalTallyCode: 0,
                statesDisplay: {
                    Out: { image: "fa fa-sign-out", color: "text-danger", colorCell: "am_state_out" },
                    Ready: { image: "fa fa-sign-in", color: "text-primary", colorCell: "am_state_ready" },
                    OffDuty: { image: "fa fa-coffee", color: "text-warning", colorCell: "am_state_break" },
                    WrapUp: { image: "fa fa-pencil-square-o", color: "text-warning", colorCell: "am_state_break" },
                    Busy: { image: "fas fa-headset", color: "call-connected", colorCell: "am_state_busy" },
                    Ringing: { image: "fas fa-headset", color: "call-connected", colorCell: "am_state_busy" },
                    NonAcd: { image: "fa fa-phone", color: "text-default", colorCell: "am_state_nonacd" },
                    PendingBreak: { image: "fa fa-coffee", color: "call-connected", colorCell: "am_state_busy" },
                    PendingWrapUp: { image: "fa fa-pencil-square-o", color: "call-connected", colorCell: "am_state_busy" },
                },
            };
            return l;
        }
        angular.module("AgentUtilsModule", []).factory("$AgentUtils", e), (e.$inject = ["$log", "$http", "$q", "$filter", "$rootScope", "UCLocaleService"]);
    })(),
    (function () {
        "use strict";
        function e(i, s, l, c, d, e, u, g, t, f, p, m, b, a, n, h) {
            var C = {
                init: function (a, n, o) {
                    var r = c.defer();
                    return (
                        f.init().then(
                            function (e) {
                                var t;
                                (l.globalVars.BreakCodes = f.breakCodes),
                                    (l.globalVars.EnhancedBreak = 1 < l.globalVars.BreakCodes.length),
                                    (C.extension = a),
                                    (C.agent_id_required = n),
                                    (f.agent_id_required = n),
                                    (C.aic_required = o),
                                    ((t = c.defer()),
                                    i.post("/ucapi/agent/AvailableFeatures", {}).then(
                                        function (e) {
                                            (C.features.canLogin = e.data.Data.CanLogin),
                                                (C.features.canMonitor = e.data.Data.CanMonitor && !l.globalVars.IsMobile),
                                                (C.features.canRest = e.data.Data.CanRest),
                                                (C.features.canWrap = e.data.Data.CanWrap),
                                                (C.features.isEnabled = e.data.Data.IsEnabled),
                                                t.resolve(!0);
                                        },
                                        function (e) {
                                            s.error("AvailableFeatures", e), t.reject(e);
                                        }
                                    ),
                                    t.promise).then(
                                        function (e) {
                                            v().then(
                                                function (e) {
                                                    var t;
                                                    C.features.canMonitor &&
                                                        ((t = c.defer()),
                                                        f.getQueueStatus().then(
                                                            function (e) {
                                                                (C.queues = e.map(function (e) {
                                                                    return { ID: e.ID, Name: e.Name };
                                                                })),
                                                                    (C.queues = d("orderBy")(C.queues, ["Name"])),
                                                                    f.getAgentStatus().then(
                                                                        function (e) {
                                                                            (C.agents = e), t.resolve(C.agents);
                                                                        },
                                                                        function (e) {
                                                                            t.reject(e);
                                                                        }
                                                                    );
                                                            },
                                                            function (e) {
                                                                t.reject(e);
                                                            }
                                                        ),
                                                        t.promise).then(
                                                            function (e) {
                                                                if ((S([]), "Out" !== C.currentStatus)) {
                                                                    var t = C.agents.find(function (e) {
                                                                        return e.Extension == a;
                                                                    });
                                                                    t ? ((C.loginID = t.ID), S(t.Membership)) : s.error("Agent with Extension", a, "could not be found.");
                                                                }
                                                                u(
                                                                    function () {
                                                                        C.agentMonitorEnabled && m.sendKeepAlive(), C.queueMonitorEnabled && p.sendKeepAlive(), C.abandonedCallsEnabled && b.sendKeepAlive();
                                                                    },
                                                                    5e3,
                                                                    0,
                                                                    !1
                                                                ),
                                                                    r.resolve(!0);
                                                            },
                                                            function (e) {
                                                                r.reject(e);
                                                            }
                                                        );
                                                },
                                                function (e) {
                                                    r.reject(e);
                                                }
                                            );
                                        },
                                        function (e) {
                                            r.reject(e);
                                        }
                                    );
                            },
                            function (e) {
                                console.error("Agent Utils failed to initialize", e);
                            }
                        ),
                        r.promise
                    );
                },
                login: function (t, a) {
                    if (((l.globalVars.Settings.AgentInfo = h.getAgentInfo()), (C.agent_id_required && !angular.isDefined(t)) || (C.aic_required && !angular.isDefined(a)))) {
                        var e,
                            n = l.globalVars.Settings.AgentInfo.lastAgentID,
                            o = C.currentStatus;
                        "Out" === o && (e = l.globalVars.Settings.AgentInfo.lastAIC);
                        var r = g.open("Out" === o, C.agent_id_required, C.aic_required, n, e, l.globalVars.Settings.AgentInfo.aicHistory);
                        return void r.result.then(function (e) {
                            I(e.id, e.aic), "Ready" === o && y();
                        });
                    }
                    i.post("/ucapi/agent/Login", { id: t, aic: a }).then(
                        function (e) {
                            s.info("Login", e.data.Data), I(t, a);
                        },
                        function (e) {
                            s.error("Login", e);
                        }
                    );
                },
                logout: function () {
                    i.post("/ucapi/agent/Logout", { mode: "uc" }).then(
                        function (e) {
                            s.info("Logout", e.data.Data);
                        },
                        function (e) {
                            s.error("Logout", e);
                        }
                    );
                },
                breakStart: function (e) {
                    var t;
                    t = e ? { ID: e.ID, Code: e.Code } : l.globalVars.BreakCodes[0];
                    i.post("/ucapi/agent/BreakStart", t).then(
                        function (e) {
                            s.info("breakStart", e.data.Data), "Busy" === C.currentStatus && (C.currentStatus = "PendingBreak");
                        },
                        function (e) {
                            s.error("breakStart", e);
                        }
                    );
                },
                breakEnd: function () {
                    i.post("/ucapi/agent/RestEnd", {}).then(
                        function (e) {
                            s.info("RestEnd", e.data.Data), "PendingBreak" === C.currentStatus && v();
                        },
                        function (e) {
                            s.error("RestEnd", e);
                        }
                    );
                },
                wrapStart: function () {
                    i.post("/ucapi/agent/WrapStart", {}).then(
                        function (e) {
                            s.info("WrapStart", e.data.Data), "Busy" === C.currentStatus && (C.currentStatus = "PendingWrapUp");
                        },
                        function (e) {
                            s.error("WrapStart", e);
                        }
                    );
                },
                wrapEnd: function () {
                    i.post("/ucapi/agent/WrapEnd", {}).then(
                        function (e) {
                            s.info("WrapEnd", e.data.Data), "PendingWrapUp" === C.currentStatus && v();
                        },
                        function (e) {
                            s.error("WrapEnd", e);
                        }
                    );
                },
                startQueueMonitor: function () {
                    0 == C.arrQueuesToMonitor.length
                        ? a.open(n.getPhrase("LaunchQueueMonitor.title"), n.getPhrase("LaunchQueueMonitor.msg"), "OK")
                        : p.launch().then(function (e) {
                              (C.queueMonitorEnabled = !0), r();
                          });
                },
                startAgentMonitor: function () {
                    0 == C.arrAgentsToMonitor.length
                        ? a.open(n.getPhrase("LaunchAgentMonitor.title"), n.getPhrase("LaunchAgentMonitor.msg"), "OK")
                        : (m.setQueues(C.queues),
                          m.launch().then(function (e) {
                              (C.agentMonitorEnabled = !0), D();
                          }));
                },
                startAbandonedCalls: function () {
                    0 == C.arrQueuesToMonitor.length
                        ? a.open(n.getPhrase("LaunchQueueMonitor.title"), n.getPhrase("LaunchAbandonedCalls.msg"), "OK")
                        : ((b.extension = C.extension),
                          C.abandonedCallsEnabled
                              ? (console.log("AbandonedCalls is thought to be open, so reuse the abandoned call data"), b.launch(null).then(function (e) {}))
                              : (console.log("AbandonedCalls is thought to not be open, so get abandoned call data first"),
                                o().then(function (e) {
                                    b.launch(e).then(function (e) {
                                        C.abandonedCallsEnabled = !0;
                                    });
                                })));
                },
                setQueueMonitorConfig: function (e) {
                    (a = e.queues),
                        (C.arrQueuesToMonitor = (angular.isArray(a) ? a : []).map(function (e) {
                            return e.ID;
                        })),
                        C.queueMonitorEnabled && r(),
                        p.setQueueThresholds(e.thresholds),
                        (t = C.arrQueuesToMonitor),
                        i.post("/ucapi/agent/MonitorAbandoned", { queues: t }).then(
                            function (e) {
                                o().then(function (e) {
                                    var t = 0;
                                    angular.forEach(e, function (e) {
                                        "Returned" !== e.CallbackStatus && t++;
                                    }),
                                        (l.globalVars.NumAbandonedCalls = t);
                                });
                            },
                            function (e) {
                                s.error("MonitorAbandoned", e);
                            }
                        );
                    var t;
                    var a;
                },
                setAgentsToMonitor: function (e) {
                    (C.arrAgentsToMonitor = (angular.isArray(e) ? e : []).map(function (e) {
                        return e.ID;
                    })),
                        C.agentMonitorEnabled && D();
                },
                sendCallEvent: function (e, t) {
                    b.sendCallEvent(e, t);
                },
                onAbandonedCallsChange: function (e, t) {
                    C.abandonedCallsEnabled ? b.sendAlert(e, t[0]) : "AlertAdd" === e ? l.globalVars.NumAbandonedCalls++ : "AlertDelete" === e && l.globalVars.NumAbandonedCalls--;
                },
                onAgentChange: function (e, t) {
                    var a = t[0];
                    (C.currentStatus = a.State), "Ready" === C.currentStatus ? ((C.loginID = a.LoginID), y()) : "Out" === C.currentStatus && ((C.myLoggedInQueues = ""), (C.numLoggedInQueues = 0), (C.loginID = void 0));
                },
                onQueueMonitor: function (e, t) {
                    s.info("onQueueMonitor", e, t), p.sendData({ type: e, data: { status: t[0] } });
                },
                onAgentMonitor: function (e, t) {
                    var a = t[0];
                    (a = t[0].map(function (e) {
                        return (
                            "Out" !== e.State &&
                                angular.isArray(e.Membership) &&
                                (e.Membership = e.Membership.map(function (e) {
                                    return parseInt(e);
                                })),
                            C.agent_id_required ? (e.extension = e.LoginID) : (e.extension = e.Extension),
                            e
                        );
                    })),
                        m.sendData({ type: e, data: { status: a } });
                },
                colors: [{ data: "qm_color1" }, { data: "qm_color2" }, { data: "qm_color3" }, { data: "qm_color4" }, { data: "qm_color5" }, { data: "qm_color6" }, { data: "qm_color7" }, { data: "qm_color8" }],
                currentStatus: void 0,
                features: {},
                agents: [],
                agentMonitorEnabled: !1,
                arrAgentsToMonitor: [],
                queues: [],
                queueMonitorEnabled: !1,
                arrQueuesToMonitor: [],
                abandonedCallsEnabled: !1,
                numLoggedInQueues: 0,
                myLoggedInQueues: "",
                loginID: void 0,
            };
            return (
                l.$on("MonitorClosed", function (e, t) {
                    s.debug("onMonitorClosed", t),
                        "QueueMonitor" === t.type
                            ? ((C.queueMonitorEnabled = !1),
                              i.post("/ucapi/agent/StopQueueMon", {}).then(
                                  function (e) {},
                                  function (e) {}
                              ))
                            : "AgentMonitor" === t.type
                            ? ((C.agentMonitorEnabled = !1),
                              i.post("/ucapi/agent/StopAgentMon", {}).then(
                                  function (e) {},
                                  function (e) {}
                              ))
                            : "AbandonedCalls" === t.type && (C.abandonedCallsEnabled = !1);
                }),
                C
            );
            function v() {
                var t = c.defer();
                return (
                    i.post("/ucapi/agent/CurrentStatus", {}).then(
                        function (e) {
                            (C.currentStatus = e.data.Data.State), t.resolve(C.currentStatus);
                        },
                        function (e) {
                            s.error("CurrentStatus", e), t.reject(e);
                        }
                    ),
                    t.promise
                );
            }
            function o() {
                var t = c.defer();
                return (
                    i.post("/ucapi/agent/FetchAbandoned", {}).then(
                        function (e) {
                            t.resolve(e.data.Data);
                        },
                        function (e) {
                            s.error("CurrentStatus", e), t.reject(e);
                        }
                    ),
                    t.promise
                );
            }
            function S(e) {
                var a = [];
                e &&
                    angular.forEach(e, function (t) {
                        var e = C.queues.find(function (e) {
                            return e.ID == t;
                        });
                        e && a.push(e.Name);
                    }),
                    a.sort(),
                    (C.myLoggedInQueues = a.join(", ")),
                    (C.numLoggedInQueues = a.length),
                    s.info("myLoggedInQueues", C.myLoggedInQueues);
            }
            function y() {
                f.getAgentStatus([C.loginID]).then(
                    function (e) {
                        e[0].Membership ? S(e[0].Membership) : S([]);
                    },
                    function (e) {
                        S([]);
                    }
                );
            }
            function r() {
                i.post("/ucapi/agent/MonitorQueues", { idList: C.arrQueuesToMonitor }).then(
                    function (e) {
                        p.setQueuesToMonitor(C.arrQueuesToMonitor);
                    },
                    function (e) {}
                );
            }
            function D() {
                i.post("/ucapi/agent/MonitorAgents", { idList: C.arrAgentsToMonitor }).then(
                    function (e) {
                        m.setAgentsToMonitor(C.arrAgentsToMonitor);
                    },
                    function (e) {}
                );
            }
            function I(e, t) {
                var a = l.globalVars.Settings.AgentInfo.aicHistory;
                t && a.indexOf(t) < 0 && (a.push(t), (a = a.splice(0, 5)).sort()), h.putAgentInfo(e, t, a);
            }
        }
        function t(n, o, t, r, e, i, a, s) {
            var l = this;
            function c(t) {
                return l.currentRecentCall.tallyCodes.Codes.find(function (e) {
                    return t == e.ID;
                });
            }
            function d(e) {
                l.numRecentCalls = l.recentCalls.length;
                for (var t = 0; t < l.recentCalls.length; t++) l.recentCalls[t].index = t + 1;
                if ((e < 0 && 0 < l.recentCalls.length && (e = 0), e < 0 || e > l.recentCalls.length - 1)) return (l.currentRecentCall = null), void (r.globalVars.ShowRecentCalls = !1);
                (l.currentRecentCall = l.recentCalls[e]), (l.showBefore = 1 <= e), (l.showAfter = e <= l.recentCalls.length - 2);
            }
            (l.deleteCurrentCall = function () {
                (e = l.currentRecentCall), (t = l.recentCalls.indexOf(e)), 0 <= t && (l.recentCalls.splice(t, 1), d(t - 1), e.tallyCodes.IsOptional && n.numIncompleteOptionalTallyCode--);
                var e, t;
            }),
                (l.showNextCall = function () {
                    if (!l.showAfter) return;
                    d(l.recentCalls.indexOf(l.currentRecentCall) + 1);
                }),
                (l.showPreviousCall = function () {
                    if (!l.showBefore) return;
                    d(l.recentCalls.indexOf(l.currentRecentCall) - 1);
                }),
                (l.currentRecentCall = null),
                (l.recentCalls = []),
                (l.showBefore = !1),
                (l.showAfter = !1),
                (l.numRecentCalls = 0),
                (l.updateDispositionCode = function (a) {
                    console.debug("updateDispositionCode", a);
                    var e = c(a);
                    e &&
                        t.post("/api/callDisposition/" + l.currentRecentCall.RecordID, e).then(
                            function (e) {
                                var t = l.currentRecentCall.dispCode;
                                (l.currentRecentCall.dispCode = a),
                                    (l.currentRecentCall.canDelete = !0),
                                    (angular.isUndefined(t) || null === t) && (l.currentRecentCall.tallyCodes.IsOptional ? n.numIncompleteOptionalTallyCode-- : n.numIncompleteRequiredTallyCode--);
                            },
                            function (e) {
                                console.error("setting disp code", e);
                            }
                        );
                }),
                (l.showDispositionCode = function () {
                    if (s.isDigits(l.currentRecentCall.dispCode)) {
                        var e = c(l.currentRecentCall.dispCode);
                        if (e) return e.Code;
                    }
                    return "<< " + a.getPhrase("Select") + " >>";
                }),
                e.$on("AcdCallAnswer", function (e, t) {
                    console.debug("agentCallDispCtrl AcdCallAnswer", t);
                    var a = !l.currentRecentCall || (l.currentRecentCall && l.currentRecentCall.dispCode) ? 500 : 5e3;
                    i(function () {
                        !(function (e) {
                            var t = n.tallyCodes[parseInt(e.QueueID)];
                            if (t) {
                                (e.tallyCodes = t).IsOptional ? ((e.canDelete = !0), n.numIncompleteOptionalTallyCode++) : n.numIncompleteRequiredTallyCode++, l.recentCalls.push(e), d(l.recentCalls.length - 1);
                                var a = moment(e.ArrivalTime).toDate();
                                return (e.arrivalTime = o("date")(a, "mediumDate") + " " + o("date")(a, "shortTime")), (r.globalVars.ShowRecentCalls = !0);
                            }
                        })(t[0]);
                    }, a);
                }),
                e.$on("AcdCallEnd", function (e, t) {
                    console.debug("agentCallDispCtrl AcdCallEnd", t);
                    var a = t[0],
                        n = l.recentCalls.find(function (e) {
                            return e.RecordID == a.RecordID;
                        });
                    n && ((n.WaitTime = a.WaitTime), (n.Duration = a.Duration), (n.callEnded = !0));
                });
        }
        angular.module("AgentServiceModule", ["QueueMonitorLauncher", "AgentMonitorLauncher", "AbandonedCallsLauncher"]).factory("$Agent", e).controller("AgentCallDispCtrl", t),
            (e.$inject = [
                "$http",
                "$log",
                "$rootScope",
                "$q",
                "$filter",
                "$timeout",
                "$interval",
                "$AgentLoginModal",
                "UCStorageService",
                "$AgentUtils",
                "$QueueMonitorLauncher",
                "$AgentMonitorLauncher",
                "$AbandonedCallsLauncher",
                "$ConfirmationModal",
                "UCLocaleService",
                "$Utilities",
            ]),
            (t.$inject = ["$AgentUtils", "$filter", "$http", "$rootScope", "$scope", "$timeout", "UCLocaleService", "$Utilities"]);
    })(),
    (function () {
        "use strict";
        function e(e, a, s) {
            var t = {};
            return (
                (t.isEnabled = n),
                (t.requestPermission = function () {
                    var t = a.defer();
                    if (n()) return t.resolve("granted"), t.promise;
                    return (
                        Notification.requestPermission(function (e) {
                            t.resolve(e);
                        }),
                        t.promise
                    );
                }),
                (t.showNotification = function (e, t, a, n, o, r) {
                    o ||
                        (o = function () {
                            console.log("Notification clicked"), window.focus();
                        });
                    r ||
                        (r = function (e, t) {
                            e ? console.log("Unable to show notification: " + e.message) : console.log("Notification Shown.");
                        });
                    var i = { body: t, icon: a, onClick: o };
                    n ? (i.autoClose = n) : (i.requireInteraction = !0);
                    return s.showNotification(e, i, r);
                }),
                t
            );
            function n() {
                return "granted" === Notification.permission;
            }
        }
        angular.module("Notification", ["angular-web-notification"]).factory("$notification", e), (e.$inject = ["$rootScope", "$q", "webNotification"]);
    })(),
    (function () {
        var e = angular.module("ucsuite_wc", [
            "ui.router",
            "ngAnimate",
            "formly",
            "formlyBootstrap",
            "ui.bootstrap",
            "ngSanitize",
            "ngMessages",
            "tmh.dynamicLocale",
            "AppMainModule",
            "AuthenticationModule",
            "LoginModule",
            "HomeModule",
            "CallHistoryModule",
            "ChatModule",
            "ContactsNewModule",
            "UCLocale",
            "UCStorage",
            "ui.select",
            "luegg.directives",
            "toggle-switch",
            "xeditable",
            "toaster",
            "ngAudio",
            "Notification",
            "ngCsv",
            "ngCookies",
            "ui.grid",
            "ui.grid.resizeColumns",
            "ui.grid.saveState",
            "ui.grid.moveColumns",
            "ui.grid.selection",
            "angular-md5",
            "ab-base64",
            "dialModal",
            "incomingCallModal",
            "ConfirmationModal",
            "confirmControlExtensionModal",
            "emptyBuddyListModal",
            "busyInfoModal",
            "mobileDeviceDetectedModal",
            "presenceEventsModal",
            "UserSettingsModal",
            "editContactsModal",
            "editPresenceEventModal",
            "aboutModal",
            "helpModal",
            "chooseNumberToCallModal",
            "presenceLoginWarningModal",
            "EditMultiRingModal",
            "ParkCallModal",
            "PageModal",
            "SetNightModeModal",
            "SetLogoutStatusModal",
            "AgentLoginModal",
            "AgentServiceModule",
            "AgentUtilsModule",
            "PresenceServiceModule",
            "angularFileUpload",
            "VideoConferenceModal",
            "HttpInterceptorModule",
            "TestDriverModal",
            "InactiveToActiveModule",
            "UpdateContactFilterModal",
            "ShowRecentCallsModal",
        ]);
        function t(e, t, a) {
            a.localeLocationPattern("i18n/ng-locales/angular-locale_{{locale}}.js"),
                t.otherwise("/login"),
                e.state("login", { url: "/login", views: { appView: { templateUrl: "app-components/loginPage.html", controller: "LoginCtrl as loginCtrl" } } });
        }
        function a(e, a, n, o) {
            FastClick.attach(document.body),
                e.$on("$locationChangeStart", function () {
                    var e = -1 === a.path().indexOf("/login"),
                        t = n.isLoggedIn;
                    e && !t && a.path("/login");
                }),
                (e.getLocalPhrase = function (e, t) {
                    return o.getPhrase(e, t);
                });
        }
        e.config(t),
            e.run(a),
            (t.$inject = ["$stateProvider", "$urlRouterProvider", "tmhDynamicLocaleProvider"]),
            (a.$inject = ["$rootScope", "$location", "$Authentication", "UCLocaleService"]),
            e.constant("ROOT_URL", "http://192.168.0.111:8090"),
            e.factory("CurrentUser", [
                "$rootScope",
                "$filter",
                function (e, o) {
                    var r = {
                        extension: void 0,
                        userObj: void 0,
                        buddyLists: [],
                        currentBuddyList: void 0,
                        initBuddyLists: function () {
                            r.buddyLists = [];
                        },
                        getExtension: function () {
                            return r.extension;
                        },
                        setExtension: function (e) {
                            r.extension = e;
                        },
                        getUser: function () {
                            return r.userObj;
                        },
                        setUser: function (e) {
                            r.userObj = e;
                        },
                        setBuddyList: function (t) {
                            t
                                ? ((r.currentBuddyList = t),
                                  angular.forEach(r.getBuddyLists(), function (e) {
                                      e.current = e === t;
                                  }))
                                : (r.currentBuddyList = null);
                        },
                        getBuddyLists: function () {
                            return r.buddyLists;
                        },
                        getBuddyList: function (t) {
                            if (!angular.isDefined(t)) return null;
                            var a = null;
                            return (
                                angular.forEach(r.getBuddyLists(), function (e) {
                                    e.ID === t && (a = e);
                                }),
                                a
                            );
                        },
                        addBuddyList: function (e) {
                            if ((r.buddyLists.push(e), 1 < r.buddyLists.length)) {
                                var t,
                                    a = null;
                                for (t = 0; t < r.buddyLists.length; t++) {
                                    var n = r.buddyLists[t];
                                    if ("PERSONAL" === n.ID) {
                                        a = n;
                                        break;
                                    }
                                }
                                a && r.buddyLists.splice(t, 1), (r.buddyLists = o("orderBy")(r.buddyLists, "name")), a && r.buddyLists.unshift(a);
                            }
                        },
                        removeBuddyList: function (e) {
                            var t = r.buddyLists.indexOf(e);
                            0 <= t && r.buddyLists.splice(t, 1);
                        },
                        getCurrentBuddyList: function () {
                            for (var e = 0; e < r.buddyLists.length; e++) {
                                var t = r.buddyLists[e];
                                if (t.current) return t;
                            }
                            return r.buddyLists.length ? ((r.buddyLists[0].current = !0), r.buddyLists[0]) : null;
                        },
                        getNextBuddyList: function () {
                            var e = r.buddyLists;
                            if (null === e || 0 == e.length) return null;
                            var t = r.getCurrentBuddyList();
                            if (null === t) return null;
                            if (1 === e.length) return t;
                            var a = r.buddyLists.indexOf(t);
                            return ++a >= r.buddyLists.length && (a = 0), r.buddyLists[a];
                        },
                    };
                    return r;
                },
            ]),
            e.factory("LogService", [
                "$http",
                "$q",
                function (n, o) {
                    var e = {
                        getByExtension: function (e) {
                            var t = o.defer(),
                                a = { ext: e };
                            return (
                                n.post("/ucapi/log/GetByExtension", a).then(
                                    function (e) {
                                        t.resolve(e.data.Data);
                                    },
                                    function (e) {
                                        console.error("GetByExtension", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        getAll: function () {
                            var t = o.defer();
                            return (
                                n.post("/ucapi/log/GetAll", {}).then(
                                    function (e) {
                                        t.resolve(e.data.Data);
                                    },
                                    function (e) {
                                        console.error("GetAll", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                    };
                    return e;
                },
            ]),
            e.factory("ChatService", [
                "AudioService",
                "$filter",
                "GetUsersService",
                "$http",
                "HttpService",
                "$notification",
                "$q",
                "$rootScope",
                "$state",
                "$timeout",
                "$Utilities",
                "CurrentUser",
                "UCLocaleService",
                "$ContactsNew",
                function (c, C, v, r, i, d, s, S, u, l, y, D, I, g) {
                    var w = {};
                    function n(t, e) {
                        var a,
                            n = y.toDigits(e),
                            o = g.contacts
                                .filter(function (e) {
                                    return e.contactType === t;
                                })
                                .find(function (e) {
                                    if (angular.isArray(e.phones))
                                        for (a = 0; a < e.phones.length; a++) {
                                            var t = e.phones[a];
                                            if ("Mobile" === t.type && n == t.rawNumber) return !0;
                                        }
                                    return !1;
                                });
                        return o ? { contact: o, phoneIndex: a } : null;
                    }
                    return (
                        (w.chats = []),
                        (w.getChats = function () {
                            return w.chats;
                        }),
                        (w.getDisplayTime = function (e) {
                            var t = moment.utc(e).valueOf(),
                                a = moment(t),
                                n = moment().startOf("day"),
                                o = a.clone().startOf("day").diff(n, "days", !0);
                            return 0 === o ? C("date")(e, "shortTime") : o <= -7 ? C("date")(e, "mediumDate") + " " + C("date")(e, "shortTime") : a.calendar();
                        }),
                        (w.getNumUnreadChats = function () {
                            var t = 0;
                            return (
                                angular.forEach(w.chats, function (e) {
                                    e && (t += e.numUnread);
                                }),
                                t
                            );
                        }),
                        (w.calcNumUnreadChats = function () {
                            var t = 0,
                                a = 0;
                            angular.forEach(w.chats, function (e) {
                                e && ((t += e.numUnread), e.missedChatAlert && a++);
                            }),
                                (S.globalVars.numUnreadChats = t),
                                (S.globalVars.newChatAlert = 0 < t),
                                (S.globalVars.missedChatsAlert = a);
                        }),
                        (w.clearUnreadChats = function (e) {
                            e && ((e.numUnread = 0), e.userObj && (e.userObj.cache.numUnreadChats = 0), (e.missedChatAlert = !1)), w.calcNumUnreadChats();
                        }),
                        (w.getChat = function (t, a, e, n) {
                            if (a) {
                                var o = w.chats.find(function (e) {
                                    return !!e.group && a.ID === e.group.ID;
                                });
                                return o || w.addChat(null, a);
                            }
                            if (e)
                                var r = y.toDigits(t),
                                    i = y.toDigits(n),
                                    s = w.chats.find(function (e) {
                                        return !!e.isSMS && r == e.rawNumber && e.rawMyNumber == i;
                                    });
                            else
                                s = w.chats.find(function (e) {
                                    return e.extension == t;
                                });
                            return s;
                        }),
                        (w.getChatMessages = function (e) {
                            var t = w.getChat(e);
                            return t ? t.messages : [];
                        }),
                        (w.getChatMessagesForChatObj = function (e) {
                            return e ? e.messages : [];
                        }),
                        (w.closeChat = function (e, t) {
                            if (t) {
                                i.ImEndChat(e);
                                var a = w.getChat(e);
                                a && (a.open = !1);
                            }
                        }),
                        (w.inviteToChat = function (a) {
                            var n = s.defer();
                            return (
                                i.ImInvite(a).then(
                                    function (e) {
                                        var t = w.getChat(a);
                                        t || (t = w.addChat(a)), (t.open = !0), n.resolve(e);
                                    },
                                    function (e) {
                                        n.reject(e);
                                    }
                                ),
                                n.promise
                            );
                        }),
                        (w.sendMessage = function (a, n) {
                            var o = s.defer(),
                                e = a.extension,
                                t = a.group;
                            return (
                                a.isSMS
                                    ? r.post("/api/sms", { from: a.myNumber, to: e, body: n }).then(
                                          function (e) {
                                              var t = w.addSentMessage(a, n);
                                              t && (t.MessageSid = e.data.sid),
                                                  l(function () {
                                                      o.resolve(t);
                                                  }, 0);
                                          },
                                          function (e) {
                                              console.error("group chat send", e), o.reject(e);
                                          }
                                      )
                                    : t
                                    ? r.post("/ucapi/groupchat/send", { id: t.ID, msg: n }).then(
                                          function (e) {
                                              var t = w.addSentMessage(a, n);
                                              l(function () {
                                                  o.resolve(t);
                                              }, 0);
                                          },
                                          function (e) {
                                              console.error("group chat send", e), o.reject(e);
                                          }
                                      )
                                    : a.open
                                    ? i.ImSend(e, n).then(
                                          function (e) {
                                              var t = w.addSentMessage(a, n);
                                              l(function () {
                                                  o.resolve(t);
                                              }, 0);
                                          },
                                          function (e) {
                                              console.error("chat send", error), o.reject(error);
                                          }
                                      )
                                    : (console.error("chat channel is not open with ext " + e), o.reject({ status: -1 })),
                                o.promise
                            );
                        }),
                        (w.getChatsWithUnreadMessages = function () {
                            var t = [];
                            return (
                                angular.forEach(w.chats, function (e) {
                                    e.numUnread && t.push(e);
                                }),
                                t
                            );
                        }),
                        (w.addConversation = function (e, t) {
                            return w.addChat(e.Party, null, t, t ? e.MyNumber : null);
                        }),
                        (w.deleteGroupChat = function (e) {
                            if (e.group)
                                for (var t = 0; t < w.chats.length; t++) {
                                    var a = w.chats[t];
                                    if (a.group && a.group.ID === e.group.ID) return w.chats.splice(t, 1), a;
                                }
                            else if (0 <= (t = w.chats.indexOf(e))) return w.chats.splice(t, 1), e;
                            return null;
                        }),
                        (w.updateGroupChat = function (e) {
                            var t = w.getChat(null, e.group);
                            t ? (t.group = e.group) : w.addChat(null, e.group), w.reorderChatList();
                        }),
                        (w.resetChat = function (e) {
                            e && ((e.messages = []), (e.numUnread = 0), (e.pastSessions = []), (e.lastMessageTimestamp = null), w.calcNumUnreadChats());
                        }),
                        (w.reorderChatList = function () {
                            w.chats = C("orderBy")(w.chats, ["-lastMessageTimestamp", "label"]);
                        }),
                        (w.addChat = function (e, t, a, n) {
                            var o,
                                r,
                                i,
                                s,
                                l,
                                c,
                                d,
                                u,
                                g = y.toDate("1980-01-01T00:00:00");
                            if (a) {
                                (s = !0), (c = y.toDigits(e)), (d = y.toDigits(n));
                                var f = S.globalVars.SmsNumbers.find(function (e) {
                                    return e.rawNumber === d;
                                });
                                i = f && f.label ? e + " (" + (u = f.label) + ")" : "SMS: " + e;
                            } else if (((c = e), t)) {
                                if (((r = t.Name), t.IsBuddyList)) (s = S.globalVars.IsAttendant), (i = I.getPhrase("BuddyList.name", [r]));
                                else {
                                    var p = [],
                                        m = D.getExtension();
                                    angular.forEach(t.Members, function (e) {
                                        e.Name != m && p.push(e.DisplayName + " (" + e.Name + ")");
                                    }),
                                        (p = C("orderBy")(p)),
                                        (s = S.globalVars.IsAttendant || (t.Owner && t.Owner.Name == m)),
                                        (i = p.join(", "));
                                }
                                var b = t.LastMessage;
                                b && ((g = y.toDate(b)) && (l = w.getDisplayTime(g)), (g = g || y.toDate("1980-01-01T00:00:00")));
                            } else {
                                if (!(o = v.getUsersHash()[parseInt(e)])) return null;
                                (r = o.name), (o.cache.numUnreadChats = 0), (i = o.extension == r ? r : o.name + " (" + o.extension + ")"), (s = !0);
                            }
                            var h = {
                                isSMS: a,
                                extension: e,
                                rawNumber: c,
                                myNumber: n,
                                rawMyNumber: d,
                                group: t,
                                userObj: o,
                                name: r,
                                open: !1,
                                typing: !1,
                                numUnread: 0,
                                label: i,
                                canDelete: s,
                                messages: [],
                                lastMessageTimestamp: g,
                                dateTime: l,
                            };
                            return a && u && (h.smsLabel = u), w.chats.push(h), h;
                        }),
                        (w.urlify = function (e) {
                            return e.replace(
                                /((((ht|f)tp(s?):\/\/)|(www\.))[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\=\-\.\?\,\'\/\\\+&amp;%\$#_]*)?)|([-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?)|([\d]?[\-\s\(]?\d{3}[\-\s\)]?\d{3}[\-\s]?\d{4}|\+?\d{3,15})/gi,
                                function (e, t, a) {
                                    if (!t && !a)
                                        return 0 <= e.indexOf("@")
                                            ? '<a href="" class="chat-link" ng-click="email(\'' + e + "')\">" + e + "</a>"
                                            : '<a href="" class="chat-link" ng-click="call(\'' + e.replace(/[^\+0-9]/g, "") + "')\">" + e + "</a>";
                                    var n = "www." == a ? "http://" + e : e,
                                        o = n.match(/^(\w+:\/\/[\w\-\.]+)\W*$/);
                                    return angular.isArray(o) && 2 <= o.length && (n = o[1]), '<a href="" class="chat-link" ng-click="open(\'' + n + "')\">" + e + "</a>";
                                }
                            );
                        }),
                        (w.addReceivedMessage = function (e, t) {
                            w.addMessageToChat(e, w.urlify(t), !1, null), (e.numUnread += 1), e.group || (e.userObj.cache.numUnreadChats = e.numUnread), w.calcNumUnreadChats();
                        }),
                        (w.addEndChatNotification = function (e) {
                            w.addMessageToChat(e, null, !1, { chatEnded: !0 });
                        }),
                        (w.addCanChatNotification = function (e, t) {
                            w.addMessageToChat(e, null, !1, { canChat: t });
                        }),
                        (w.addSentMessage = function (e, t) {
                            return w.addMessageToChat(e, w.urlify(t), !0, null);
                        }),
                        (w.addMessageToChat = function (e, t, a, n) {
                            var o,
                                r = e.extension,
                                i = e.group,
                                s = w.getDisplayTime(new Date());
                            if (n)
                                return (
                                    n.chatEnded ? ((o = { dateTime: s, type: "CHAT_ENDED" }), e.messages.push(o)) : angular.isDefined(n.canChat) && ((o = { dateTime: s, type: n.canChat ? "LOGGED_IN" : "LOGGED_OUT" }), e.messages.push(o)), o
                                );
                            var l = { dateTime: s, text: t, sent: a, type: "TEXT" };
                            if (i) {
                                var c = v.getUsersHash();
                                r = a ? D.extension : e.senderExtension;
                                var d = c[parseInt(r)];
                                d ? (l.user = { extension: d.extension, name: d.name, photo: d.photo }) : console.warn("no user found for extension", r);
                            }
                            return e.messages.push(l), (e.lastMessageTimestamp = new Date()), (e.dateTime = s), w.reorderChatList(), l;
                        }),
                        (w.resetChats = function () {
                            w.chats = [];
                        }),
                        (w.removeChat = function (e) {
                            for (var t = 0; w.chats.length; t++) {
                                var a = w.chats[t];
                                if (a.extension === e) return w.chats.splice(t, 1), a;
                            }
                            return w.calcNumUnreadChats(), null;
                        }),
                        (w.ImInviteHandler = function (e, t) {
                            var a = t[0].Name;
                            console.log("start chat from extension=" + a),
                                i.ImAccept(a).then(
                                    function (e) {
                                        var t = w.getChat(a);
                                        null === t && (t = w.addChat(a)), (t.open = !0);
                                    },
                                    function (e) {}
                                );
                        }),
                        (w.ImEndHandler = function (e, t) {
                            var a = t[0].Name,
                                n = w.getChat(a);
                            n && (n.open = !1), w.addEndChatNotification(n), S.$broadcast("IM_END", { chatObj: n }), console.log("end chat with extension=" + a);
                        }),
                        (w.ImReceivedHandler = function (e, t) {
                            var a = t[0],
                                n = a.Sender.Name,
                                o = a.Group,
                                r = w.getChat(n, o);
                            if (
                                (r || ((r = w.addChat(n, o)).open = !0),
                                (r.lastMessageTimestamp = new Date()),
                                r.group && (r.senderExtension = n),
                                w.addReceivedMessage(r, a.Text),
                                S.$broadcast("IM_RECEIVED", { chatObj: r }),
                                c.playIncomingText(),
                                !S.globalVars.WindowIsActive && !S.globalVars.WindowIsInFocus && S.globalVars.NotificationsAvailable)
                            ) {
                                var i, s;
                                i = r.group ? (r.group.IsBuddyList ? "Buddy list chat: " + r.name : "Group chat") : "UC Suite - Incoming Chat";
                                var l = v.getUsersHash()[n];
                                (s = l ? l.name + " (" + n + "): " + a.Text : r.name + " (" + n + "): " + a.Text),
                                    d.showNotification(i, s, "resources/images/fa-comment-o.png", 15e3, function () {
                                        window.focus(), u.go("app.newChat", { chatParm: r });
                                    });
                            }
                        }),
                        (w.ImIdleHandler = function (e, t) {
                            var a = t[0].Name,
                                n = w.getChat(a);
                            n && ((n.typing = !1), S.$broadcast("IM_TYPING", { chatObj: n }));
                        }),
                        (w.ImActiveHandler = function (e, t) {
                            var a = t[0].Name,
                                n = w.getChat(a);
                            n && ((n.typing = !0), S.$broadcast("IM_TYPING", { chatObj: n }));
                        }),
                        (w.findMobileContact = function (e) {
                            var t = y.toDigits(e),
                                a = n("Internal", t);
                            return null === a && null === (a = n("External", t)) && (a = n("Personal", t)), a;
                        }),
                        (w.getSmsChatObject = function (e, t) {
                            var a = w.getChat(t, null, !0, e);
                            a || (a = w.addChat(t, null, !0, e));
                            var n = w.findMobileContact(t);
                            return (
                                n ? ((a.contact = n.contact), (a.contactPhoneIndex = n.phoneIndex)) : (a.contact = null),
                                a.contact
                                    ? ((a.label = a.contact.firstName ? a.contact.firstName : ""), a.contact.lastName && (a.label += " " + a.contact.lastName), (a.label += ": " + a.contact.phones[a.contactPhoneIndex].value))
                                    : (a.label = t),
                                a
                            );
                        }),
                        (w.SmsReceivedHandler = function (e, t) {
                            var a = t[0],
                                n = w.getSmsChatObject(a.to, a.from),
                                o = w.getDisplayTime(new Date());
                            (n.dateTime = o),
                                (n.lastMessageTimestamp = new Date()),
                                n.messages.push({ dateTime: o, text: w.urlify(a.body), sent: !1, type: "TEXT" }),
                                (n.numUnread += 1),
                                w.reorderChatList(),
                                w.calcNumUnreadChats(),
                                S.$broadcast("IM_RECEIVED", { chatObj: n }),
                                c.playIncomingText(),
                                S.globalVars.WindowIsActive ||
                                    S.globalVars.WindowIsInFocus ||
                                    !S.globalVars.NotificationsAvailable ||
                                    d.showNotification("UC Suite - SMS Chat", n.label, "resources/images/fa-sms.png", 15e3, function () {
                                        window.focus(), u.go("app.newChat", { chatParm: n });
                                    });
                        }),
                        S.$on("ImInvite", w.ImInviteHandler),
                        S.$on("ImEnd", w.ImEndHandler),
                        S.$on("ImReceived", w.ImReceivedHandler),
                        S.$on("ImIdle", w.ImIdleHandler),
                        S.$on("ImActive", w.ImActiveHandler),
                        S.$on("SmsReceived", w.SmsReceivedHandler),
                        S.$on("ImSent", function (e, t) {
                            var a = t[0],
                                n = a.Group;
                            if (n) {
                                var o = w.getChat(null, n);
                                w.addSentMessage(o, a.Text);
                            } else {
                                var r = a.Recipients[0].Name;
                                o = w.getChat(r);
                                w.addSentMessage(o, a.Text);
                            }
                        }),
                        w.resetChats(),
                        w
                    );
                },
            ]),
            e.factory("Contacts", [
                "$filter",
                "$q",
                "$rootScope",
                "HttpService",
                function (e, n, t, c) {
                    var o,
                        a,
                        d = {};
                    return (
                        (d.getCompanyContacts = function () {
                            o = [];
                            var a = n.defer(),
                                e = n.defer();
                            return (
                                d.fetchAllContacts(e, [], "Internal", 0, 100, !1, "first", t.globalVars.Settings.ShowHidden),
                                e.promise.then(
                                    function (t) {
                                        c.getOrganizations("Internal").then(
                                            function (e) {
                                                (o = e.Data), a.resolve(t);
                                            },
                                            function (e) {
                                                a.reject(e);
                                            }
                                        );
                                    },
                                    function (e) {
                                        a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        }),
                        (d.getExternalContacts = function () {
                            a = [];
                            var t = n.defer(),
                                e = n.defer();
                            return (
                                d.fetchAllContacts(e, [], "External", 0, 100, !1, "first"),
                                e.promise.then(
                                    function (e) {
                                        t.resolve(e);
                                    },
                                    function (e) {
                                        t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        }),
                        (d.getPersonalContacts = function () {
                            var t = n.defer(),
                                e = n.defer();
                            return (
                                d.fetchAllContacts(e, [], "Personal", 0, 100, !1, "first"),
                                e.promise.then(
                                    function (e) {
                                        t.resolve(e);
                                    },
                                    function (e) {
                                        t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        }),
                        (d.getO365Contacts = function () {
                            var t = n.defer(),
                                e = n.defer();
                            return (
                                d.fetchAllContacts(e, [], "O365", 0, 50, !1, "first"),
                                e.promise.then(
                                    function (e) {
                                        t.resolve(e);
                                    },
                                    function (e) {
                                        t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        }),
                        (d.getOutlookContacts = function () {
                            var t = n.defer(),
                                e = n.defer();
                            return (
                                d.fetchAllContacts(e, [], "Outlook", 0, 100, !1, "first"),
                                e.promise.then(
                                    function (e) {
                                        t.resolve(e);
                                    },
                                    function (e) {
                                        t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        }),
                        (d.internalOrgs = function () {
                            return o;
                        }),
                        (d.externalOrgs = function () {
                            return a;
                        }),
                        (d.fetchAllContacts = function (a, n, o, e, r, i, s, l) {
                            var t = { dirName: o, filter: { First: e, Limit: r, SortColumn: s, Descending: i, IncludeHidden: l } };
                            c.fetchContacts(t).then(
                                function (e) {
                                    if ("O365" === o) {
                                        if (null === e) return void a.resolve(n);
                                        n = n.concat(e);
                                        var t = e.First + e.Count;
                                        Math.min(e.Count, e.Remaining) ? d.fetchAllContacts(a, n, o, t, r, i, s, l) : a.resolve(n);
                                    } else {
                                        n = n.concat(e.Data);
                                        t = e.First + e.Count;
                                        Math.min(e.Count, e.Remaining) ? d.fetchAllContacts(a, n, o, t, r, i, s, l) : a.resolve(n);
                                    }
                                },
                                function (e) {
                                    a.reject(e);
                                }
                            );
                        }),
                        (d.setUser = function (e) {
                            d.userObj = e;
                        }),
                        d
                    );
                },
            ]),
            e.factory("HttpService", [
                "$filter",
                "$Global",
                "$rootScope",
                "$http",
                "$q",
                "$timeout",
                "CurrentUser",
                function (e, t, a, r, i, n, o) {
                    var s = {
                        formatBuddyListObject: function (e) {
                            var t = [];
                            angular.forEach(e.Extensions, function (e) {
                                t.push(parseInt(e));
                            });
                            var a = t.sort(function (e, t) {
                                return e - t;
                            });
                            return { ID: e.ID, name: e.Name, list: a, didList: e.DidList };
                        },
                        monitorCalls: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/MonitorCalls", { asEntries: !1 }).then(
                                    function (e) {
                                        console.log("MonitorCalls data=" + JSON.stringify(e.data)), t.resolve(e.data);
                                    },
                                    function (e) {
                                        t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        sendToMailbox: function (e) {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/SendToMailbox", { mailbox: e }).then(
                                    function (e) {
                                        console.log("SendToMailbox data=" + JSON.stringify(e.data)), t.resolve(e.data.Data);
                                    },
                                    function (e) {
                                        t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        dialMailBox: function (e) {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/DialMailBox", { mailbox: e }).then(
                                    function (e) {
                                        console.log("DialMailBox data=" + JSON.stringify(e.data)), t.resolve(e.data.Data);
                                    },
                                    function (e) {
                                        t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        getBuddyLists: function () {
                            o.initBuddyLists();
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/GetBlfGroups", null).then(
                                    function (e) {
                                        console.log("GetBlfGroups count=" + e.data.Data.length),
                                            angular.forEach(e.data.Data, function (e) {
                                                o.addBuddyList(s.formatBuddyListObject(e));
                                            }),
                                            t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("GetBlfGroups: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        fetchContacts: function (e) {
                            var t = i.defer();
                            return (
                                "O365" === e.dirName
                                    ? r.get("/api/o365users/").then(
                                          function (e) {
                                              t.resolve(e.data);
                                          },
                                          function (e) {
                                              console.log("O365Contacts: failed, HTTP status", e), t.reject(e);
                                          }
                                      )
                                    : r.post("/ucapi/dir/FetchContacts", e).then(
                                          function (e) {
                                              console.log("FetchContacts count=" + e.data.Data.length), t.resolve(e.data);
                                          },
                                          function (e) {
                                              console.log("FetchContacts: failed, HTTP status " + e), t.reject(e);
                                          }
                                      ),
                                t.promise
                            );
                        },
                        getContact: function (e, t) {
                            var a = i.defer(),
                                n = { dirId: e, contactId: t };
                            return (
                                r.post("/ucapi/dir/GetContact", n).then(
                                    function (e) {
                                        console.log("GetContact"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("GetContact headers: failed, HTTP status ", e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        addContact: function (e, t) {
                            var a = i.defer(),
                                n = { dirName: e, item: t };
                            return (
                                r.post("/ucapi/dir/AddContact", n).then(
                                    function (e) {
                                        console.log("AddContact"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("AddContact headers: failed, HTTP status ", e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        getOrganizations: function (e) {
                            var t = i.defer(),
                                a = { dirName: e };
                            return (
                                r.post("/ucapi/dir/GetOrganizations", a).then(
                                    function (e) {
                                        console.log("GetOrganizations"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.log("GetOrganizations headers: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        updateContact: function (e, t) {
                            var a = i.defer(),
                                n = { dirName: e, item: t };
                            return (
                                r.post("/ucapi/dir/UpdateContact", n).then(
                                    function (e) {
                                        console.log("UpdateContact"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.log("UpdateContact headers: failed, HTTP status " + e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        deleteContact: function (e, t, a) {
                            var n = i.defer(),
                                o = { dirName: e };
                            return (
                                angular.isDefined(t) && angular.isObject(t) ? (o.item = t) : (o.Id = a),
                                r.post("/ucapi/dir/DeleteContact", o).then(
                                    function (e) {
                                        console.log("DeleteContact"), n.resolve(e.data);
                                    },
                                    function (e) {
                                        console.log("DeleteContact headers: failed, HTTP status " + e), n.reject(e);
                                    }
                                ),
                                n.promise
                            );
                        },
                        saveBuddyList: function (e) {
                            var t = i.defer(),
                                a = { listId: angular.isDefined(e.ID) ? e.ID : "", name: e.name, deviceNumbers: e.list };
                            return (
                                angular.isArray(e.didList) && e.didList.length ? (a.dids = e.didList) : (a.dids = null),
                                r.post("/ucapi/device/UpdateBlfList", a).then(
                                    function (e) {
                                        console.log("UpdateBlfList success"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.log("UpdateBlfList: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        removeBuddyList: function (e) {
                            var t = i.defer(),
                                a = { listId: e.ID };
                            return (
                                r.post("/ucapi/device/RemoveBlfGroup", a).then(
                                    function (e) {
                                        console.log("RemoveBlfGroup success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("RemoveBlfGroup: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        dial: function (e) {
                            var t = i.defer(),
                                a = { digits: e };
                            return (
                                console.log("Dial number=" + e),
                                r.post("/ucapi/device/Dial", a).then(
                                    function (e) {
                                        console.log("Dial success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("Dial: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        startTransfer: function (e, t) {
                            var a = i.defer(),
                                n = { dest: e, blind: t };
                            return (
                                console.log("startTransfer number=" + e + " blind transfer=" + t),
                                r.post("/ucapi/device/StartTransfer", n).then(
                                    function (e) {
                                        console.log("StartTransfer success"), a.resolve("success");
                                    },
                                    function (e) {
                                        console.log("StartTransfer: failed, HTTP status " + e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        getPresenceContact: function (e) {
                            var t = i.defer(),
                                a = { contactId: e };
                            return (
                                console.log("getPresenceContact contactId=" + e),
                                r.post("/ucapi/presence/GetPresenceContact", a).then(
                                    function (e) {
                                        console.log("GetPresenceContact success"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.log("GetPresenceContact: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        validateSession: function (e, t) {
                            var a = i.defer(),
                                n = { session: e, mode: "uc" },
                                o = t ? { timeout: t } : void 0;
                            return (
                                r.post("/ucapi/cti/ValidateSession", n, o).then(
                                    function (e) {
                                        a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.log("ValidateSession: failed, HTTP status " + e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        getSettings: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/cti/GetSettings", {}).then(
                                    function (e) {
                                        t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.log("GetSettings: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        putSettings: function (e) {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/cti/PutSettings", { prefs: e }).then(
                                    function (e) {
                                        t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.log("PutSettings: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        saveUserSettings: function () {
                            return (a.globalVars.Settings.version = t.productVersion), r.post("/ucapi/cti/PutSettings", { qualifier: "uc_settings", prefs: JSON.stringify(a.globalVars.Settings) });
                        },
                        clearUserSettings: function () {
                            return r.post("/ucapi/cti/PutSettings", { qualifier: "uc_settings", prefs: null });
                        },
                        startConference: function (e) {
                            var t = i.defer(),
                                a = { dest: e };
                            return (
                                console.log("startConference number=" + e),
                                r.post("/ucapi/device/StartConference", a).then(
                                    function (e) {
                                        console.log("StartConference success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("StartConference: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        stopConference: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/StopConference", {}).then(
                                    function (e) {
                                        console.log("StopConference success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("StopConference: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        joinConference: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/JoinConference", {}).then(
                                    function (e) {
                                        console.log("JoinConference success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("JoinConference: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        stopTransfer: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/StopTransfer", {}).then(
                                    function (e) {
                                        console.log("StopTransfer success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("StopTransfer: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        completeTransfer: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/CompleteTransfer", {}).then(
                                    function (e) {
                                        console.log("CompleteTransfer success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("CompleteTransfer: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        hangup: function (e) {
                            var t = i.defer();
                            angular.isDefined(e) || (console.log("callID was undefined so setting to 0."), (e = 0));
                            var a = { callId: e };
                            return (
                                console.log("hangup callID=" + e),
                                r.post("/ucapi/device/Hangup", a).then(
                                    function (e) {
                                        console.log("Hangup success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("Hangup: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        redirectToVM: function (e) {
                            var t = i.defer();
                            angular.isDefined(e) || (console.log("callID was undefined so setting to 0."), (e = 0));
                            var a = { callId: e };
                            return (
                                console.log("redirectToVM callID=" + e),
                                r.post("/ucapi/device/RedirectToVM", a).then(
                                    function (e) {
                                        console.log("RedirectToVM success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("Hangup: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        answer: function (e) {
                            var t = i.defer();
                            angular.isDefined(e) || (console.log("callID was undefined so setting to 0."), (e = 0));
                            var a = { callId: e };
                            return (
                                console.log("answer callID=" + e),
                                r.post("/ucapi/device/Answer", a).then(
                                    function (e) {
                                        console.log("answer success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("answer: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        openDevice: function (e) {
                            var t = i.defer(),
                                a = { ext: o.getExtension(), appName: "UCSUITE2", forceOverride: e };
                            return (
                                console.log("openDevice force=" + e),
                                r.post("/ucapi/device/OpenDevice", a).then(
                                    function (e) {
                                        console.log("OpenDevice success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("OpenDevice: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        closeDevice: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/CloseDevice", {}).then(
                                    function (e) {
                                        console.log("CloseDevice success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("CloseDevice: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        holdCall: function (e) {
                            var t = i.defer();
                            angular.isDefined(e) || (console.log("callID was undefined so setting to 0."), (e = 0));
                            var a = { callId: e };
                            return (
                                console.log("hold callID=" + e),
                                r.post("/ucapi/device/Hold", a).then(
                                    function (e) {
                                        console.log("hold success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("hold: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        resumeCall: function (e) {
                            var t = i.defer();
                            angular.isDefined(e) || (console.log("callID was undefined so setting to 0."), (e = 0));
                            var a = { callId: e };
                            return (
                                console.log("retrieve callID=" + e),
                                r.post("/ucapi/device/Retrieve", a).then(
                                    function (e) {
                                        console.log("retrieve success"), t.resolve("success");
                                    },
                                    function (e) {
                                        console.log("retrieve: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        ImFetchSessions: function (e) {
                            var t = i.defer(),
                                a = { otherParty: e };
                            return (
                                r.post("/ucapi/im/FetchSessions", a).then(
                                    function (e) {
                                        console.log("FetchSessions success"), t.resolve(e.data.Data);
                                    },
                                    function (e) {
                                        console.log("FetchSessions: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        ImGetOtherParties: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/im/GetOtherParties", {}).then(
                                    function (e) {
                                        console.log("GetOtherParties success"), t.resolve(e.data.Data);
                                    },
                                    function (e) {
                                        console.log("GetOtherParties: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        ImFetchConversation: function (e) {
                            var t = i.defer(),
                                a = { sessionID: e };
                            return (
                                r.post("/ucapi/im/FetchConversation", a).then(
                                    function (e) {
                                        console.log("FetchConversation success"), t.resolve(e.data.Data);
                                    },
                                    function (e) {
                                        console.log("FetchConversation: failed, HTTP status " + e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        ImInvite: function (e) {
                            var t = i.defer(),
                                a = { user: e };
                            return (
                                r.post("/ucapi/im/Invite", a).then(
                                    function (e) {
                                        console.log("Invite"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("Invite", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        ImAccept: function (e) {
                            var t = i.defer(),
                                a = { user: e };
                            return (
                                r.post("/ucapi/im/Accept", a).then(
                                    function (e) {
                                        console.log("Accept success"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("Accept", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        getActiveIMUsers: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/im/GetUsers", {}).then(
                                    function (e) {
                                        console.log("Accept success"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("GetUsers", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        ImSend: function (e, t) {
                            var a = i.defer(),
                                n = { user: e, msg: t };
                            return (
                                r.post("/ucapi/im/Send", n).then(
                                    function (e) {
                                        console.log("Send"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("Send", e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        ImEndChat: function (e) {
                            var t = i.defer(),
                                a = { user: e };
                            return (
                                r.post("/ucapi/im/EndChat", a).then(
                                    function (e) {
                                        console.log("EndChat"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("EndChat", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        ImTyping: function (e) {
                            var t = i.defer(),
                                a = { user: e };
                            return (
                                r.post("/ucapi/im/Typing", a).then(
                                    function (e) {
                                        console.log("Typing"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("Typing", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        ImIdle: function (e) {
                            var t = i.defer(),
                                a = { user: e };
                            return (
                                r.post("/ucapi/im/Idle", a).then(
                                    function (e) {
                                        console.log("Idle"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("Idle", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        GetCallHistoryAll: function (e, t) {
                            var a = i.defer(),
                                n = { callType: "All", filter: { SortColumn: "Date", Descending: !0, First: e, Limit: t, IncludeHidden: !1 } };
                            return (
                                r.post("/ucapi/history/GetHistory", n).then(
                                    function (e) {
                                        console.log("GetHistory"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("GetHistory", e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        deleteCallHistory: function (e) {
                            var t = i.defer(),
                                a = { idList: e };
                            return (
                                r.post("/ucapi/history/DeleteHistory", a).then(
                                    function (e) {
                                        console.log("DeleteHistory success"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("DeleteHistory", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        deleteAppointment: function (e, t) {
                            var a = i.defer(),
                                n = { appointment: t, contactId: e };
                            return (
                                r.post("/ucapi/presence/RemoveAppointment", n).then(
                                    function (e) {
                                        console.log("RemoveAppointment"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("RemoveAppointment", e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        updateAppointment: function (e, t) {
                            var a = i.defer(),
                                n = { appointment: t, contactId: e };
                            return (
                                r.post("/ucapi/presence/UpdateAppointment", n).then(
                                    function (e) {
                                        console.log("UpdateAppointment"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("UpdateAppointment", e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        addAppointment: function (e, t) {
                            var a = i.defer(),
                                n = { appointment: t, contactId: e };
                            return (
                                r.post("/ucapi/presence/AddAppointment", n).then(
                                    function (e) {
                                        console.log("AddAppointment"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("AddAppointment", e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        startMonitoring: function (e) {
                            var t = i.defer(),
                                a = { dirName: e };
                            return (
                                r.post("/ucapi/dir/StartMonitoring", a).then(
                                    function (e) {
                                        console.log("StartMonitoring"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("AddAppointment", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        stopMonitoring: function () {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/device/StopMonitoring", {}).then(
                                    function (e) {
                                        console.log("StopMonitoring"), t.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("StopMonitoring", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                        AutoLogin: function (e, t) {
                            var a = i.defer(),
                                n = { credentials: e, session: t };
                            return (
                                r.post("/ucapi/cti/AutoLogin", n).then(
                                    function (e) {
                                        console.log("AutoLogin"), a.resolve(e.data);
                                    },
                                    function (e) {
                                        console.error("AutoLogin", e), a.reject(e);
                                    }
                                ),
                                a.promise
                            );
                        },
                        PhoneProUrl: function (e) {
                            var t = i.defer();
                            return (
                                r.post("/ucapi/cti/PhoneProUrl", {}).then(
                                    function (e) {
                                        t.resolve(e.data.Data);
                                    },
                                    function (e) {
                                        console.error("PhoneProUrl", e), t.reject(e);
                                    }
                                ),
                                t.promise
                            );
                        },
                    };
                    return s;
                },
            ]),
            e.factory("GetUsersService", [
                "$filter",
                "$rootScope",
                "$http",
                "$q",
                "Contacts",
                "$Utilities",
                "CurrentUser",
                "$Presence",
                "UCServices",
                function (e, s, a, n, o, l, c, d, u) {
                    var r = {},
                        i = [],
                        g = {};
                    function f() {
                        var t = n.defer();
                        return (
                            (i = []),
                            (g = {}),
                            o.getCompanyContacts().then(
                                function (e) {
                                    angular.forEach(e, function (e) {
                                        r.massageInternalContact(e), i.push(e), (g[e.extension] = e);
                                    }),
                                        t.resolve(i);
                                },
                                function (e) {
                                    t.reject("Login.error.503");
                                }
                            ),
                            t.promise
                        );
                    }
                    return (
                        (r.realUsers = {}),
                        (r.getRealUsers = function () {
                            var n = [];
                            return (
                                angular.forEach(g, function (e, t) {
                                    var a = r.realUsers[t];
                                    t && a && ((e.chatCapable = a.CanChat), n.push(e));
                                }),
                                e("orderBy")(n, "name")
                            );
                        }),
                        (r.massageInternalContact = function (e) {
                            var t = parseInt(e.Number);
                            angular.isObject(e.cache) || (e.cache = {}),
                                (e.extension = t),
                                "EXT_NAME" === s.globalVars.Settings.NameDisplayPreference
                                    ? (e.name = e.ExtName)
                                    : "FIRST_LAST" === s.globalVars.Settings.NameDisplayPreference
                                    ? e.FirstName
                                        ? ((e.name = e.FirstName), e.LastName && ((e.name += " "), (e.name += e.LastName)))
                                        : (e.name = e.LastName)
                                    : "LAST_FIRST" === s.globalVars.Settings.NameDisplayPreference
                                    ? e.LastName
                                        ? ((e.name = e.LastName), e.FirstName && ((e.name += " "), (e.name += e.FirstName)))
                                        : (e.name = e.FirstName)
                                    : "FIRST_ONLY" === s.globalVars.Settings.NameDisplayPreference && (e.name = e.FirstName),
                                e.name || (e.name = e.ExtName ? e.ExtName : e.Number),
                                (e.cache.numUnreadChats = 0),
                                "Out" === e.UcState
                                    ? ((e.cache.isActive = !1),
                                      (e.cache.isInactive = !1),
                                      (e.cache.isLoggedIn = !1),
                                      (e.cache.canChat = !1),
                                      (e.cache.lastActivity = l.toDate(e.LastUIActivity)),
                                      (e.cache.lastActivityBlf = l.getInactivityString(e)))
                                    : "Inactive" === e.UcState
                                    ? ((e.cache.isActive = !1),
                                      (e.cache.isInactive = !0),
                                      (e.cache.isLoggedIn = !0),
                                      (e.cache.canChat = e.CanChat),
                                      (e.cache.lastActivity = l.toDate(e.LastUIActivity)),
                                      (e.cache.lastActivityBlf = l.getInactivityString(e)))
                                    : ((e.cache.isActive = !0), (e.cache.isInactive = !1), (e.cache.isLoggedIn = !0), (e.cache.canChat = e.CanChat), (e.cache.lastActivity = null), (e.cache.lastActivityBlf = null)),
                                (e.cache.isSelf = c.getExtension() == t),
                                (e.cache.isMobile = e.IsMobile && e.cache.isLoggedIn),
                                (e.cache.showChat = !e.cache.isSelf && e.cache.canChat),
                                (e.cache.canVideo = s.globalVars.supportsWebRTC && e.CanRtc && !e.cache.isSelf && e.cache.isLoggedIn && !s.globalVars.IsUT880),
                                (e.cache.usingVideo = e.cache.canVideo && e.OnWebCall),
                                angular.isDefined(e.presence) || (e.presence = {}),
                                (e.presence.id = e.Id),
                                (e.presence.status = e.PresenceStatus),
                                angular.isDefined(e.presence.forwarding) || (e.presence.forwarding = {});
                            var a = e.DeviceStatus;
                            (e.presence.forwarding.mode = a), (e.presence.forwarding.destination = e.ForwardDest);
                            var n = 0;
                            if (
                                (e.cache.isSelf ||
                                    (angular.isDefined(e.AlternateNumbers) && null != e.AlternateNumbers
                                        ? angular.forEach(e.AlternateNumbers, function (e) {
                                              (e.rawNumber = l.toDigits(e.Number)), (n += "Mobile" === e.AltType ? 1 : 0);
                                          })
                                        : (e.AlternateNumbers = [])),
                                (e.numMobileNumbers = n),
                                e.PresenceDetails)
                            ) {
                                if ((" " === e.PresenceDetails.Location && (e.PresenceDetails.Location = null), "9999-01-01T00:00" === e.PresenceDetails.ReturnTime && (e.PresenceDetails.ReturnTime = null), e.PresenceDetails.ReturnTime)) {
                                    var o = new Date();
                                    o.setTime(o.getTime() - 6048e5);
                                    var r = l.toDate(e.PresenceDetails.ReturnTime);
                                    null !== r && r <= o && (e.PresenceDetails.ReturnTime = null);
                                }
                                e.cache.hasPresenceDetails = e.PresenceDetails.Title || e.PresenceDetails.Note || e.PresenceDetails.Location || e.PresenceDetails.ReturnTime;
                            } else e.cache.hasPresenceDetails = !1;
                            (e.cache.blfNote = e.PresenceDetails ? e.PresenceDetails.Note || e.PresenceDetails.Title : null),
                                (e.cache.photoClass = null),
                                e.cache.isLoggedIn && e.cache.isActive ? (e.cache.presenceColor = d.getPresenceColor(e.presence.status)) : (e.cache.presenceColor = "inactive-text"),
                                (e.cache.presenceIcon = d.getPresenceIcon(e.presence.status)),
                                (e.cache.presenceLabel = d.getPresenceLabel(e.presence.status)),
                                (e.cache.blfStatusIndicator = s.getBlfStatusImageWithColor(a)),
                                (e.photo = u.address + e.Photo),
                                (e.thumbnail = u.address + e.Thumbnail);
                            var i = "?v=" + e.PhotoVersion;
                            e.photo && (e.photo += i), e.thumbnail && (e.thumbnail += i);
                        }),
                        (r.readUsers = function () {
                            var t = n.defer();
                            return (
                                (r.realUsers = {}),
                                a.get("/api/user").then(
                                    function (e) {
                                        angular.forEach(e.data, function (e) {
                                            e.DesksetExtension ? (r.realUsers[parseInt(e.DesksetExtension)] = e) : e.SoftphoneExtension && (r.realUsers[parseInt(e.SoftphoneExtension)] = e);
                                        }),
                                            f().then(
                                                function (e) {
                                                    t.resolve(e);
                                                },
                                                function (e) {
                                                    t.reject(e);
                                                }
                                            );
                                    },
                                    function (e) {
                                        console.error("getting users", e),
                                            f().then(
                                                function (e) {
                                                    t.resolve(e);
                                                },
                                                function (e) {
                                                    t.reject(e);
                                                }
                                            );
                                    }
                                ),
                                t.promise
                            );
                        }),
                        (r.getUsers = function () {
                            return i;
                        }),
                        (r.getUsersHash = function () {
                            return g;
                        }),
                        (r.getUserFromExtension = function (e) {
                            return this.getUsersHash()[angular.isNumber(e) ? e : parseInt(e)];
                        }),
                        (r.getEmailToUserHash = function () {
                            var e = r.getUsersHash(),
                                t = {};
                            return (
                                angular.forEach(e, function (e) {
                                    e.Email && r.realUsers[e.extension] && ((e.Email = e.Email.replace("red-phoenix", "myunifiedmessaging")), (t[e.Email.toLowerCase()] = e));
                                }),
                                t
                            );
                        }),
                        r
                    );
                },
            ]),
            e.factory("AudioService", [
                "$rootScope",
                "$timeout",
                "ngAudio",
                function (a, n, e) {
                    var t,
                        o,
                        r = {};
                    return (
                        (a.incomingCallAudio = void 0),
                        (r.init = function () {
                            console.log("AudioService: init begin"),
                                ((t = a.globalVars.isIE ? e.load("resources/audio/NewTextMessage.mp3") : e.load("resources/audio/NewTextMessage.wav")).volume = 0.8),
                                a.globalVars.isIE ? (a.incomingCallAudio = e.load("resources/audio/Ringin.mp3")) : (a.incomingCallAudio = e.load("resources/audio/Ringin.wav")),
                                (a.incomingCallAudio.volume = 0.6),
                                console.log("AudioService: init end");
                        }),
                        (r.reset = function () {
                            console.log("AudioService: reset begin"), t && (t.stop(), (t = void 0)), a.incomingCallAudio && (a.incomingCallAudio.stop(), (a.incomingCallAudio = void 0)), console.log("AudioService: reset end");
                        }),
                        (r.playIncomingText = function () {
                            try {
                                a.globalVars.Settings.EnableIncomingTextTone && t.play();
                            } catch (e) {}
                        }),
                        (r.playIncomingCallAudio = function () {
                            try {
                                a.globalVars.Settings.EnableIncomingCallTone &&
                                    (a.incomingCallAudio.play(),
                                    (o = a.$watchCollection("incomingCallAudio", function (e, t) {
                                        0 == e.remaining &&
                                            o &&
                                            n(
                                                function () {
                                                    a.globalVars.Settings.EnableIncomingCallTone ? a.incomingCallAudio.play() : o();
                                                },
                                                1e3,
                                                !1
                                            );
                                    })));
                            } catch (e) {}
                        }),
                        (r.stopIncomingCallAudio = function () {
                            console.log("** AudioService: stopIncomingCallAudio");
                            try {
                                o(), (o = void 0);
                            } catch (e) {
                            } finally {
                                try {
                                    a.incomingCallAudio.stop();
                                } catch (e) {}
                            }
                        }),
                        (r.canPlay = function () {
                            return t.canPlay && a.incomingCallAudio.canPlay;
                        }),
                        r
                    );
                },
            ]),
            e.factory("authentication", [
                function () {
                    return { isAuthenticated: !1, user: null };
                },
            ]),
            e.factory("Calls", [
                "$filter",
                "$interval",
                function (a, e) {
                    var t,
                        i = {
                            incomingCallsArray: [],
                            activeCallsArray: [],
                            incomingAndAnsweredCalls: [],
                            addIncomingCall: function (e, t, a, n, o) {
                                console.debug("addIncomingCall");
                                var r = { name: e, number: t, isContact: a, phoneType: n, imageURL: o, inbound: !0 };
                                return i.incomingCallsArray.unshift(r), s("addIncomingCall"), r;
                            },
                            answerIncomingCall: function (e, t) {
                                console.debug("answerIncomingCall", angular.toJson(e), t), n(t);
                                var a = c(e.callID);
                                if (a) return console.log("answerCall: callID=" + a.callID + " is in activecalls already and will not be added"), a;
                                return (a = e), angular.extend(a, { callID: e.callID, established: !0, callConnected: !0, onHold: !1, inbound: !0, name: e.name, number: e.number, duration: 0 }), u(a), a;
                            },
                            getIncomingCallByID: function (e) {
                                for (var t = 0; t < i.incomingCallsArray.length; t++) {
                                    var a = i.incomingCallsArray[t];
                                    if (a.callID === e) return a;
                                }
                                return null;
                            },
                            ignoreIncomingCall: function (e, t) {
                                console.debug("ignoreIncomingCall"), n(e), u(e);
                            },
                            incomingCalls: function () {
                                return i.incomingCallsArray;
                            },
                            removeIncomingCall: function (e) {
                                n(i.incomingCallsArray.indexOf(e));
                            },
                            addActiveCall: function (e) {
                                i.activeCallsArray.push(e), o(), s("addActiveCall");
                            },
                        };
                    return (
                        (i.addActiveCallToFront = u),
                        (i.getActiveCallByCallID = c),
                        (i.getActiveCalls = l),
                        (i.removeActiveCall = function (e) {
                            var t,
                                a = -1,
                                n = e.callID;
                            for (t = 0; t < i.activeCallsArray.length; t++)
                                if (i.activeCallsArray[t] === e) {
                                    a = t;
                                    break;
                                }
                            0 <= a && d(a);
                            for (t = 0; t < i.activeCallsArray.length; t++) {
                                var o = i.activeCallsArray[t];
                                angular.isArray(o.children) && 0 <= (a = o.children.indexOf(n)) && o.children.splice(a, 1);
                            }
                            i.activeCallsArray.length <= 0 && r();
                            s("removeActiveCall");
                        }),
                        (i.removeActiveCallByIndex = d),
                        (i.setVisibility = function (e, t) {
                            (e.visible = t), s("setVisibility");
                        }),
                        i
                    );
                    function s(e) {
                        var t = [];
                        angular.forEach(i.incomingCallsArray, function (e) {
                            t.push(e);
                        }),
                            angular.forEach(i.activeCallsArray, function (e) {
                                t.push(e);
                            }),
                            (i.incomingAndAnsweredCalls = a("filterVisible")(t)),
                            console.debug("filteredCallsArr len=", t.length, "array=", angular.toJson(t)),
                            console.debug("incomingAndAnsweredCalls callerName=", e, "len=", i.incomingAndAnsweredCalls.length, "array=", angular.toJson(i.incomingAndAnsweredCalls));
                    }
                    function n(e) {
                        e < 0 || (i.incomingCallsArray.splice(e, 1), s("removeIncomingCallByIndex"));
                    }
                    function o() {
                        t ||
                            (t = e(
                                function () {
                                    for (var e = l(), t = 0; t < e.length; t++) {
                                        var a = e[t];
                                        ("Connected" !== a.state && "OnHold" !== a.state && "OnHoldPendTransfer" !== a.state && "Conferenced" !== a.state) || (a.duration += 1);
                                    }
                                },
                                1e3,
                                0,
                                !1
                            ));
                    }
                    function r() {
                        t && (e.cancel(t), (t = null));
                    }
                    function l() {
                        return i.activeCallsArray;
                    }
                    function c(e) {
                        for (var t = 0; t < i.activeCallsArray.length; t++) {
                            var a = i.activeCallsArray[t];
                            if (a.callID == e) return a;
                        }
                        return null;
                    }
                    function d(e) {
                        0 <= e && (i.activeCallsArray.splice(e, 1), i.activeCallsArray.length <= 0 && r(), s("removeActiveCallByIndex"));
                    }
                    function u(e) {
                        i.activeCallsArray.unshift(e), o(), s("addActiveCallToFront");
                    }
                },
            ]),
            e.config([
                "$stateProvider",
                "$urlRouterProvider",
                "$compileProvider",
                "$httpProvider",
                "uiSelectConfig",
                "ROOT_URL",
                function (e, t, a, n, o, r) {
                    console.info("debugInfoEnabled= ", DebugInfoEnabled), a.debugInfoEnabled(DebugInfoEnabled), (n.defaults.useXDomain = !0), (n.defaults.withCredentials = !0), (o.theme = "bootstrap");
                },
            ]),
            e.config([
                "$compileProvider",
                function (e) {
                    e.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|chrome-extension):/);
                },
            ]);
        var u = null;
        (preventPageChange = function (e) {
            u = e;
        }),
            e.run([
                "$AppMain",
                "$http",
                "$templateCache",
                "$templateRequest",
                "editableOptions",
                "editableThemes",
                "$log",
                "$rootScope",
                "$location",
                "$window",
                "$transitions",
                function (t, e, a, n, o, r, i, s, l, c, d) {
                    (r.bs3.inputClass = "input-sm"),
                        (r.bs3.buttonsClass = "btn-sm"),
                        (o.theme = "bs3"),
                        d.onSuccess({}, function (e) {
                            if (
                                (console.log("Successful Transition from " + e.from().name + " to " + e.to().name),
                                (s.back = function () {
                                    c.history.back();
                                }),
                                (s.allowEditContacts = "app.contactsNew" === e.to().name),
                                (s.allowDeleteContacts = "app.contactsNew" === e.to().name),
                                (s.showHomePageContactsSearch = "app.home" === e.to().name && s.globalVars.Settings.EnableSearchBarForContacts && t.filterText && 2 <= t.filterText.length),
                                u)
                            )
                                return u(), !1;
                        }),
                        d.onStart({}, function (e) {
                            if (u) return u(), !1;
                        }),
                        s.$on("$locationChangeSuccess", function () {
                            (s.lastLocation = s.actualLocation),
                                (s.actualLocation = l.path()),
                                (s.onHomePage = null !== l.$$path.match(/\/home$/)),
                                console.debug("Setting onHomePage", s.onHomePage),
                                (s.onDirectoryPage = "/directory" === l.$$path),
                                (s.onContactsNewPage = "/app/contactsNew" === l.$$path),
                                (s.canSearchPage = s.onHomePage || s.onContactsNewPage),
                                "/app/callHistory" === l.$$path && (s.globalVars.MissedCalls = 0);
                        }),
                        n("views/videoCalls.html").then(function (e) {
                            a.put("videoCalls.tmpl.html", e);
                        });
                },
            ]),
            Array.prototype.find ||
                (Array.prototype.find = function (e) {
                    if (null === this) throw new TypeError("Array.prototype.find called on null or undefined");
                    if ("function" != typeof e) throw new TypeError("predicate must be a function");
                    for (var t, a = Object(this), n = a.length >>> 0, o = arguments[1], r = 0; r < n; r++) if (((t = a[r]), e.call(o, t, r, a))) return t;
                }),
            Math.trunc ||
                (Math.trunc = function (e) {
                    return (e = +e) - (e % 1) || (isFinite(e) && 0 !== e ? (e < 0 ? -0 : 0) : e);
                });
    })(),
    (function () {
        "use strict";
        function e(D, e, o, r, I, w, P, T, A, n, M, N, i, O, V, L) {
            var s,
                t,
                a,
                l,
                c = {
                    buildActiveCallsFromCurrentState: function () {
                        e.post("/ucapi/device/GetCalls", {}).then(
                            function (e) {
                                console.log("GetCalls", e.data),
                                    e.data.Data.length &&
                                        angular.forEach(e.data.Data, function (e) {
                                            var t = {};
                                            if (
                                                (e.IsInbound ? ((t.name = e.CallerName), (t.number = e.CallerID)) : ((t.name = e.CalledName), (t.number = e.CalledID)),
                                                E(t, e),
                                                (t.inbound = e.IsInbound),
                                                (t.onHold = "OnHold" === e.State),
                                                "Connected" === e.State ? (T.setVisibility(t, !0), (t.callConnected = !0)) : ("Ringback" !== e.State && "Offering" !== e.State) || T.setVisibility(t, !0),
                                                e.IsConsult && e.Parent)
                                            ) {
                                                var a = T.getActiveCallByCallID(e.Parent);
                                                a && a.isConference && (a.conferenceOriginator = !0);
                                            }
                                            var n = r.getUsersHash(),
                                                o = n[e.Number];
                                            o && ((t.isContact = !0), (t.imageURL = o.photo), (t.userObj = o)), T.addActiveCall(t);
                                        });
                            },
                            function (e) {
                                console.error("GetCalls", e);
                            }
                        );
                    },
                    onCallRemovedHandler: function (e) {
                        (D.globalVars.CLICK_TO_TRANSFER = !1), D.globalVars.TestDriverRunning && (R("CallRemoved", e), g());
                        var t = e[0];
                        if ((console.log("ServerEventsCP: CallRemoved callID=" + t), D.globalVars.Settings.Is4xxDevice)) return console.warn("Eating event since this is 4xxDevice"), void (0 === T.getActiveCalls().length && u());
                        var a = T.getActiveCallByCallID(t);
                        if (a)
                            return (
                                console.log("ServerEventsCP: CallRemoved active call callID=" + t + " state=" + a.state),
                                a.abandonedCallback && P.sendCallEvent("CallRemoved"),
                                "Offering" === a.state && (A.stopIncomingCallAudio(), d(a)),
                                void o(function () {
                                    T.removeActiveCall(a), D.$broadcast("CLOSE_DIAL_MODAL", {}), 0 === T.getActiveCalls().length && u();
                                }, 0)
                            );
                        var n = T.getIncomingCallByID(t);
                        n &&
                            (console.log("ServerEventsCP: CallRemoved incoming call removed=" + t + " state=" + n.state),
                            "Offering" === n.state && (A.stopIncomingCallAudio(), d(n)),
                            T.removeIncomingCall(n),
                            0 === T.incomingCallsArray.length && M.hide());
                        0 === T.getActiveCalls().length && u();
                    },
                    onCallChangedHandler: function (e, t) {
                        var a = t[0];
                        console.log(e + " state=" + a.State + " handle=" + a.Handle), D.globalVars.TestDriverRunning && "CallChanged" === e && (R(e, a), "Offering" === a.State && (0 < T.getActiveCalls().length && V.hangup(), V.answer()));
                        if (D.globalVars.Settings.Is4xxDevice) return void console.warn("Eating event since this is 4xxDevice");
                        if ("Proceeding" === a.State) return;
                        if ("Offering" === a.State) {
                            var n = U(a),
                                o = n.imageURL,
                                r = n.isContact,
                                i = n.callType,
                                s = n.name,
                                l = n.number;
                            if (D.globalVars.Settings.EnableSwitchOnDID && a.IsInbound && 0 < a.Trunk && D.onHomePage) {
                                var c = O.toDigits(a.CalledID);
                                if (c) {
                                    console.log("Looking for buddy list with DID list that includes" + c);
                                    for (var d = L.getBuddyLists(), u = new RegExp(c + "$"), g = 0; g < d.length; g++) {
                                        var f = d[g];
                                        if (angular.isArray(f.didList)) {
                                            var p = f.didList.find(function (e) {
                                                return u.test(O.toDigits(e));
                                            });
                                            if (p) {
                                                console.info("Found DID ", c, " in ", f.name, f.ID), f !== L.getCurrentBuddyList() && (I.goToBuddyListName(f.ID), D.$applyAsync());
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            var m = T.getIncomingCallByID(a.Handle);
                            if (m) console.log("Call with handle " + a.Handle + " is already on the incoming calls list.  Removing old one."), T.removeIncomingCall(m);
                            else {
                                var b = T.getActiveCallByCallID(a.Handle);
                                b && (console.log("Call with handle " + a.Handle + " is already on the active calls list.  Removing old one."), T.removeActiveCall(b)),
                                    1 <= a.Trunk && A.playIncomingCallAudio(),
                                    M.show(),
                                    D.globalVars.WindowIsActive ||
                                        D.globalVars.WindowIsInFocus ||
                                        !D.globalVars.NotificationsAvailable ||
                                        w.showNotification("UC Suite - Incoming Call", "Incoming call from " + s + " (" + l + ")", "resources/images/fa-phone.png", 15e3);
                            }
                            var m = T.addIncomingCall(s, l, r, i, o);
                            E(m, a);
                        } else {
                            var b = T.getActiveCallByCallID(a.Handle);
                            if (b) {
                                console.log("existing call, handle=" + a.Handle + " old state=" + b.state);
                                var n = U(a);
                                if ("CallInfo" === e) {
                                    var h = b.state;
                                    return E(b, a), (b.state = h), (b.number = n.number), void (b.name = n.name);
                                }
                                if (b.state === a.State) return void console.log("** DUPLICATE EVENT " + a.State);
                                if ("Ringback" === a.State || "Dialing" === a.State) "Ringback" === a.State && x(), (b.number = n.number), (b.name = n.name), a.IsChild || a.Parent || T.setVisibility(b, !0);
                                else if ("Connected" === a.State) {
                                    if (($(), D.globalVars.TestDriverRunning && a.IsInbound && j(), (b.callConnected = !0), "Offering" === b.state))
                                        A.stopIncomingCallAudio(), (b.duration = 0), "CLICK_TO_TRANSFER" === D.globalVars.DefaultTransfer.data && (D.globalVars.CLICK_TO_TRANSFER = !0);
                                    else if ("OnHold" === b.state || "OnHoldPendTransfer" === b.state) (b.duration = b.saveConnectionDuration), (b.onHold = !1);
                                    else if ("Ringback" === b.state || "Dialing" === b.state || "Dialtone" === b.state) {
                                        if ((D.$broadcast("CLOSE_DIAL_MODAL", { setToActiveCallsTab: !0 }), "Connected" === a.State && !a.IsInbound && "Ringback" === b.state && b.inbound)) {
                                            console.log("Likely a Camped-on call so hide incoming modal");
                                            var m = T.getIncomingCallByID(b.Handle);
                                            m && (console.log("ServerEventsCP: CallRemoved incoming call removed=" + b.Handle + " state=" + m.state), T.removeIncomingCall(m), 0 === T.incomingCallsArray.length && M.hide());
                                        }
                                        (b.number = n.number), (b.name = n.name);
                                    }
                                    (b.joinCall = null),
                                        T.setVisibility(b, !a.Parent),
                                        (b.imageURL = n.imageURL),
                                        (b.userObj = n.userObj),
                                        a.Children &&
                                            (angular.forEach(a.Children, function (e) {
                                                var t = T.getActiveCallByCallID(e);
                                                t && T.setVisibility(t, !1);
                                            }),
                                            (b.number = n.number),
                                            (b.name = n.name));
                                } else
                                    "OnHold" === a.State || "OnHoldPendTransfer" === a.State
                                        ? ("OnHold" === a.State && D.$broadcast("CLOSE_DIAL_MODAL", {}), (b.saveConnectionDuration = b.duration), (b.onHold = !0), (b.durationConnected = b.duration), (b.duration = 0), (b.state = a.State))
                                        : "Conferenced" === a.State && T.setVisibility(b, !1);
                                E(b, a), b.abandonedCallback && P.sendCallEvent(a.State, angular.copy(a));
                            } else {
                                if ((console.log("new call, handle=" + a.Handle + " state=" + a.State), "Connected" === a.State))
                                    if (($(), D.globalVars.TestDriverRunning && a.IsInbound && j(), 0 < T.incomingCalls().length)) {
                                        var C;
                                        for (C = 0; C < T.incomingCalls().length; C++) {
                                            var v = T.incomingCalls()[C];
                                            if (v.callID === a.Handle) {
                                                m = v;
                                                break;
                                            }
                                        }
                                        if (m) {
                                            A.stopIncomingCallAudio(), T.answerIncomingCall(m, C);
                                            var S = T.getActiveCallByCallID(a.Handle);
                                            S && (E(S, a), T.setVisibility(S, !0)), 0 === T.incomingCallsArray.length && M.hide(), "CLICK_TO_TRANSFER" === D.globalVars.DefaultTransfer.data && (D.globalVars.CLICK_TO_TRANSFER = !0);
                                        }
                                    } else
                                        a.IsInbound && A.stopIncomingCallAudio(),
                                            E((b = { callConnected: !0 }), a),
                                            T.setVisibility(b, !0),
                                            (b.number = a.CallerID),
                                            (b.name = a.CallerName),
                                            T.addActiveCall(b),
                                            a.Children &&
                                                angular.forEach(a.Children, function (e) {
                                                    var t = T.getActiveCallByCallID(e);
                                                    t && (console.log("debug-hide handle=" + e), T.setVisibility(t, !1));
                                                });
                                else if ("OnHoldPendConf" === a.State && a.IsConference) {
                                    D.$broadcast("CLOSE_DIAL_MODAL", {});
                                    var y = {};
                                    E(y, a), T.setVisibility(y, !0), (y.joinCall = null), T.addActiveCall(y);
                                } else if ("Conferenced" === a.State) E((b = {}), a), T.setVisibility(b, !1), T.addActiveCall(b);
                                else if ("Dialtone" === a.State || "Dialing" === a.State || "Ringback" === a.State) {
                                    console.log("Add Dialing call to active calls."), "Ringback" === a.State && x(), E((b = {}), a);
                                    var n = U(a);
                                    if (((b.number = n.number), (b.name = n.name), (b.imageURL = n.imageURL), (b.isContact = n.isContact), (b.abandonedCallback = N.abandonedCallback()), "Ringback" === a.State)) {
                                        T.setVisibility(b, !0), console.log("Likely a Camped-on call so hide incoming modal 2");
                                        var m = T.getIncomingCallByID(a.Handle);
                                        m && (console.log("ServerEventsCP: CallRemoved incoming call removed=" + a.Handle + " state=" + m.state), T.removeIncomingCall(m), 0 === T.incomingCallsArray.length && M.hide());
                                    }
                                    T.addActiveCall(b);
                                }
                                b && b.abandonedCallback && P.sendCallEvent(a.State, angular.copy(a));
                            }
                            if (a.IsConsult && a.Parent) {
                                console.log("attempt to add join option");
                                var y = T.getActiveCallByCallID(a.Parent);
                                y && y.isConference && ((y.joinCall = b), (y.conferenceOriginator = !0), console.log("join option added, " + y.callID + " set to join " + b.callID), T.setVisibility(y, !0));
                            }
                        }
                        I.doDigest();
                    },
                    startTestDriver: function () {
                        (D.globalVars.TestDriverRunning = !0),
                            (c.testDriverNumbersIndex = -1),
                            (c.testDriverNumbers = D.globalVars.Settings.TestDriveNumberList.split(",")),
                            (c.testDriverNumbers = c.testDriverNumbers.map(function (e) {
                                return e.replace(/^\s+|\s+$/g, "");
                            })),
                            f();
                    },
                    stopTestDriver: function () {
                        (l = null), (D.globalVars.TestDriverRunning = !1), R("DONE");
                    },
                };
            return c;
            function d(e) {
                if ("OFF" !== D.globalVars.Settings.MissedCallNotifications) {
                    !(function () {
                        try {
                            s && s();
                        } catch (e) {
                        } finally {
                            s = null;
                        }
                    })(),
                        D.globalVars.MissedCalls++;
                    var t = D.getLocalPhrase("Notification.MissedCalls.Title"),
                        a = D.getLocalPhrase("Notification.MissedCalls", [D.globalVars.MissedCalls]);
                    D.globalVars.NotificationsAvailable
                        ? (s = w.showNotification(t, a, "resources/images/fa-phone-red.png", "AUTO_CLOSE" === D.globalVars.Settings.MissedCallNotifications ? 5e3 : 0, function () {
                              window.focus(), (D.globalVars.MissedCalls = 0), i.go("app.callHistory");
                          }))
                        : n.pop("error", t, a, null, "trustedHtml");
                }
            }
            function E(e, t) {
                return (
                    e || (e = {}),
                    (e.state = t.State),
                    (e.inbound = t.IsInbound),
                    (e.callID = t.Handle),
                    (e.callerID = t.CallerID),
                    (e.callerName = t.CallerName),
                    (e.calledID = t.CalledID),
                    (e.displayCallerID = t.IsInbound ? t.CallerID : t.CalledID),
                    (e.displayName = t.IsInbound ? t.CallerName : t.CalledName),
                    (e.calledName = t.CalledName),
                    (e.canAnswer = t.CanAnswer),
                    (e.CanRtc = t.CanRtc),
                    e.CanRtc && (e.number = "Internet Caller"),
                    (e.canConference = t.CanConference),
                    (e.canHangup = t.CanHangup),
                    (e.canHold = t.CanHold),
                    (e.canRetrieve = t.CanRetrieve),
                    (e.canTransfer = t.CanTransfer),
                    (e.canComplete = t.CanComplete),
                    (e.canRedirect = t.CanRedirect),
                    (e.isConference = t.IsConference),
                    (e.isConsult = t.IsConsult),
                    (e.isChild = t.IsChild),
                    (e.parent = t.Parent),
                    (e.children = t.Children),
                    (e.Trunk = t.Trunk),
                    t.Trunk < 0 && e.userObj && (e.canVideo = e.userObj.cache.canVideo),
                    (e.duration = I.parseDuration(t.Duration)),
                    e
                );
            }
            function U(e) {
                var t,
                    a = { number: e.IsInbound ? e.CallerID : e.CalledID, name: e.IsInbound ? e.CallerName : e.CalledName, callType: null, imageURL: null, isContact: !1, userObj: null };
                if (0 < e.Trunk && D.globalVars.IsGoogleIntegration && D.globalVars.GoogleSignedIn) {
                    var n = a.number;
                    (n = O.toDigits(n)), (t = D.globalVars.GooglePhoneNumbersHash[n]) && ((a.imageURL = t.googleUser.photo), (a.isContact = !0), (a.callType = t.type), (a.name = t.googleUser.name.displayName));
                }
                if (!t) {
                    var o = r.getUsersHash()[a.number];
                    o && ((a.imageURL = o.photo), (a.isContact = !0), (a.userObj = o));
                }
                return console.debug("getCallerInformation", t ? "google" : "regular", a), a;
            }
            function u() {
                D.globalVars.TestDriverRunning && f();
            }
            function $() {
                t && (o.cancel(t), (t = null));
            }
            function x() {
                D.globalVars.TestDriverRunning &&
                    ($(),
                    (t = o(function () {
                        V.hangup();
                    }, 1e4)));
            }
            function g() {
                a && (o.cancel(a), (a = null));
            }
            function j() {
                if (D.globalVars.TestDriverRunning) {
                    g();
                    var e = O.randomIntBetween(D.globalVars.Settings.TestDriver.minTalkTime, D.globalVars.Settings.TestDriver.maxTalkTime);
                    R("ConnectedCallWatchdog", { hangupTime: e }),
                        (a = o(function () {
                            V.hangup();
                        }, 1e3 * e));
                }
            }
            function R(e, t) {
                D.globalVars.TestDriverRunning && D.$broadcast("TEST_DRIVER_EVENT", { action: e, args: t });
            }
            function f() {
                c.testDriverNumbersIndex++, c.testDriverNumbersIndex >= c.testDriverNumbers.length && (c.testDriverNumbersIndex = 0);
                var e = O.randomIntBetween(D.globalVars.Settings.TestDriver.minIdleTime, D.globalVars.Settings.TestDriver.maxIdleTime);
                (l = c.testDriverNumbers[c.testDriverNumbersIndex]),
                    console.debug("dial number", l, e),
                    R("SLEEPING", { idleTime: e, number: l }),
                    o(function () {
                        D.globalVars.TestDriverRunning && V.dial(l);
                    }, 1e3 * e);
            }
        }
        angular.module("ServerEventsCPModule", []).factory("$ServerEventsCP", e),
            (e.$inject = [
                "$rootScope",
                "$http",
                "$timeout",
                "GetUsersService",
                "$AppMain",
                "$notification",
                "$Agent",
                "Calls",
                "AudioService",
                "toaster",
                "$incomingCallModalService",
                "$dialModalService",
                "$state",
                "$Utilities",
                "HttpService",
                "CurrentUser",
            ]);
    })(),
    (function () {
        "use strict";
        function e(e, g, f, p, m, b, h, C, v, u, t, S, y, D, I, w) {
            var a,
                P,
                o,
                T = {
                    openEventMonitor: function () {
                        (a = new Worker("web-workers/events-worker.js")).addEventListener("message", n, !1);
                        var e = y.address + "/events/monitor/" + t.sessionID;
                        a.postMessage(angular.toJson(["start", { url: e }]));
                    },
                    stop: function () {
                        a.postMessage(angular.toJson(["close"]));
                    },
                    eventMonitorOpen: !1,
                };
            return T;
            function A(e) {
                var t, a, n;
                g.globalVars.NotificationsAvailable &&
                    "OFF" !== g.globalVars.Settings.AbandonedCallNotifications &&
                    (!(function () {
                        try {
                            o && o();
                        } catch (e) {
                        } finally {
                            o = null;
                        }
                    })(),
                    "CallbackRequested" === e.FinalStatus
                        ? ((t = "New callback request: " + e.QueueName), (a = "Caller at " + e.CallerID + " requests a callback from queue " + e.QueueName), (n = "resources/images/fa-undo.png"))
                        : ((t = g.getLocalPhrase("Notification.AbandonedCalls.Title", [e.QueueName])), (a = g.getLocalPhrase("Notification.AbandonedCalls", [e.QueueName, e.CallerID])), (n = "resources/images/fa-headphones.png")),
                    C.showNotification(t, a, n, "AUTO_CLOSE" === g.globalVars.Settings.AbandonedCallNotifications ? 5e3 : 0, function () {
                        u.startAbandonedCalls();
                    }));
            }
            function n(e) {
                var t = JSON.parse(e.data),
                    a = t.method;
                if ("HistoryDelete" !== a && "PING" != a) {
                    console.log("event data=" + e.data);
                    var n,
                        o,
                        r,
                        i = angular.isDefined(t.params) ? t.params : {};
                    if ("Shutdown" === a) {
                        var s = "Shutdown";
                        m.showToast("error", h.getPhrase(s)), m.doLogout(s);
                    } else if ("BlfChange" === a)
                        !(function (e) {
                            var t = e[0],
                                a = parseInt(t.Number),
                                n = p.getUsersHash()[a];
                            if (n) {
                                I.extension == a &&
                                    ("Inactive" === t.UcState && "InTheOffice" !== t.PresenceStatus && g.globalVars.Settings.ShowInactivity
                                        ? (P && P(),
                                          (P = null),
                                          f(
                                              function () {
                                                  w.open();
                                                  var e = g.getLocalPhrase("Inactive.Title"),
                                                      t = g.getLocalPhrase("Inactive.Body");
                                                  webNotification.showNotification(
                                                      e,
                                                      {
                                                          body: t,
                                                          icon: "resources/images/fa-bed.png",
                                                          onClick: function () {
                                                              P && P(), (P = null), window.focus();
                                                          },
                                                          autoClose: void 0,
                                                          requireInteraction: !0,
                                                      },
                                                      function (e, t) {
                                                          e || (P = t);
                                                      }
                                                  );
                                              },
                                              0,
                                              !1
                                          ))
                                        : "Active" === t.UcState && "InTheOffice" === t.PresenceStatus && (w.close(), P && P(), (P = null))),
                                    g.globalVars.CanSeeBlfDetails && angular.isDefined(t.CurrentCall)
                                        ? ((n.CurrentCall = t.CurrentCall),
                                          (n.CurrentCall.displayCallerID = t.CurrentCall.IsInbound ? t.CurrentCall.CallerID : t.CurrentCall.CalledID),
                                          (n.CurrentCall.displayName = t.CurrentCall.IsInbound ? t.CurrentCall.CallerName : t.CurrentCall.CalledName),
                                          (n.CurrentCall.duration = m.parseDuration(t.CurrentCall.Duration)),
                                          (n.CurrentCall.startTime = new Date().getTime()))
                                        : (n.CurrentCall = void 0);
                                var o = g.globalVars.Settings.HideOfflineUsers && n.CanChat !== t.CanChat;
                                if (g.globalVars.Settings.EnableAvailabilityNotifications && !m.isLoggedInUser(n)) {
                                    if (n.CanChat && !t.CanChat) {
                                        var r = h.getPhrase("Notifications.LoggedOutShort", [n.name]),
                                            i = "<img src='" + n.thumbnail + "'/><p>" + r + "</p>";
                                        v.pop("warning", h.getPhrase("Notifications.Title"), i, 3e3, "trustedHtml"),
                                            g.globalVars.NotificationsAvailable && C.showNotification(h.getPhrase("Notifications.Title"), r, "resources/images/fa-sign-out.png", 5e3),
                                            g.$broadcast("AVAILABILITY_CHANGE", e);
                                    } else
                                        !n.CanChat &&
                                            t.CanChat &&
                                            ((r = h.getPhrase("Notifications.LoggedInShort", [n.name])),
                                            (i = "<img src='" + n.thumbnail + "'/><p>" + r + "</p>"),
                                            v.pop("info", h.getPhrase("Notifications.Title"), i, 3e3, "trustedHtml"),
                                            g.globalVars.NotificationsAvailable && C.showNotification(h.getPhrase("Notifications.Title"), r, "resources/images/fa-sign-in.png", 5e3),
                                            g.$broadcast("AVAILABILITY_CHANGE", e));
                                    if (n.PresenceStatus !== t.PresenceStatus) {
                                        var s = b.getPresenceColor(t.PresenceStatus),
                                            l = b.getPresenceIcon(t.PresenceStatus),
                                            c = l.replace(/\sfa\-fw$/, "");
                                        c = c.replace(/^fa\s/, "");
                                        var d = b.getPresenceLabel(t.PresenceStatus),
                                            u = ((r = h.getPhrase("Notifications.StatusChangeShort", [d, n.name])), (i = h.getPhrase("Notifications.StatusChange", [n.thumbnail, n.name, s, l, d])), "resources/images/" + c + ".png");
                                        v.pop("none", h.getPhrase("Notifications.Title"), i, 3e3, "trustedHtml"), g.globalVars.NotificationsAvailable && C.showNotification(h.getPhrase("Notifications.Title"), r, u, 5e3);
                                    }
                                }
                                angular.extend(n, t), p.massageInternalContact(n), o && m.filterTextChanged(), m.data.buddyListMembersHash[a] && m.doDigest();
                            }
                        })(i);
                    else if ("CallRemoved" === a) S.onCallRemovedHandler(i);
                    else if ("CallChanged" === a) S.onCallChangedHandler(a, i);
                    else if ("CallInfo" === a) S.onCallChangedHandler(a, i);
                    else if ("PresenceChange" === a)
                        !(function (e) {
                            var t = e[0],
                                a = parseInt(t.Number),
                                n = p.getUsersHash()[a];
                            if (n) {
                                var o = t.CurrentSetting;
                                (n.PresenceStatus = o.Status),
                                    n.cache.hasPresenceDetails &&
                                        ((n.PresenceDetails.Location = o.Location),
                                        (n.PresenceDetails.Note = o.Note),
                                        (n.PresenceDetails.Title = o.Title),
                                        (n.cache.blfNote = n.PresenceDetails.Note || n.PresenceDetails.Title),
                                        (n.PresenceDetails.ReturnTime = o.ReturnTime)),
                                    p.massageInternalContact(n);
                            }
                        })(i);
                    else if ("ContactChanged" === a)
                        !(function (e) {
                            var t = e[1],
                                a = parseInt(t.Number),
                                n = p.getUsersHash()[a];
                            if (n) {
                                var o = t.AlternateNumbers;
                                (angular.isDefined(o) && null !== o) || (o = []),
                                    angular.copy(o, n.AlternateNumbers),
                                    "/uc/Images/NoPhoto.png" === t.Photo &&
                                        t.Photo !== n.Photo &&
                                        g.$apply(function () {
                                            (n.Photo = t.Photo), (n.Thumbnail = t.Thumbnail);
                                            var e = "?v=" + t.PhotoVersion;
                                            n.Photo && (n.photo = n.Photo + e), n.Thumbnail && (n.thumbnail = n.Thumbnail + e), g.$broadcast("PhotoUpdated", { extension: a, Photo: n.photo, Thumbnail: n.thumbnail });
                                        }),
                                    p.massageInternalContact(n);
                            }
                        })(i);
                    else if ("PhotoChanged" === a)
                        (n = i),
                            (o = parseInt(n[0])),
                            (r = p.getUsersHash()[o]) &&
                                f(function () {
                                    g.$apply(function () {
                                        (r.Photo = n[1]), (r.Thumbnail = n[2]);
                                        var e = "?v=" + n[3];
                                        r.Photo && (r.photo = y.address + r.Photo + e), r.Thumbnail && (r.thumbnail = y.address + r.Thumbnail + e);
                                        var t = { extension: o, Photo: r.photo, Thumbnail: r.thumbnail };
                                        g.$broadcast("PhotoUpdated", t);
                                    });
                                }, 0);
                    else if (a.match(/^Rtc.+/)) g.$broadcast("RtcMessage", { eventName: a, params: i });
                    else if ("ParkChange" === a)
                        !(function (e) {
                            try {
                                m.updateParkMonitor(e[0]);
                            } catch (e) {}
                        })(i);
                    else if ("ImGroupRemove" === a) {
                        (l = i[0]) && (D.deleteGroupChat({ group: l }), g.$broadcast(a, { group: l }));
                    } else if ("ImGroupChange" === a) {
                        var l;
                        (l = i[0]) && (D.updateGroupChat({ group: l }), g.$broadcast(a, { group: l }));
                    } else if (a.match(/^Im.+/)) g.$broadcast(a, i);
                    else if ("HistoryAdd" === a) g.$broadcast(a, i);
                    else if ("SMS_STATUS" === a) g.$broadcast(a, i);
                    else if ("SmsReceived" === a) g.$broadcast(a, i);
                    else if ("SmsChanged" === a) {
                        g.$broadcast(a, i);
                        var c = g.globalVars.SmsNumbers.filter(function (t) {
                                return !i[0].find(function (e) {
                                    return t.number === e.Number;
                                });
                            }),
                            d = D.getChats();
                        angular.forEach(c, function (t) {
                            var e = d.filter(function (e) {
                                return e.isSMS && t.number === e.myNumber;
                            });
                            angular.forEach(e, function (e) {
                                D.deleteGroupChat(e);
                            });
                        });
                    } else
                        "eventMonitorOpened" === a
                            ? (T.eventMonitorOpen = !0)
                            : "eventMonitorClosed" === a
                            ? (T.eventMonitorOpen = !1)
                            : g.globalVars.IsAgent
                            ? "AgentMonitor" === a
                                ? u.onAgentMonitor(a, i)
                                : "QueueMonitor" === a
                                ? u.onQueueMonitor(a, i)
                                : a.match(/^Agent.+/)
                                ? ("AgentChange" === a && g.$broadcast(a, i), u.onAgentChange(a, i))
                                : "AcdCallAnswer" === a
                                ? g.$broadcast(a, i)
                                : "AcdCallEnd" === a
                                ? g.$broadcast(a, i)
                                : a.match(/^Alert.+/)
                                ? (u.onAbandonedCallsChange(a, i), "AlertAdd" === a && A(i[0]))
                                : "BacklogStart" === a || "BacklogEnd" === a || console.warn("event method", a, "not handled")
                            : console.warn("event method", a, "not handled");
                }
            }
        }
        angular.module("ServerEventsModule", []).factory("$ServerEvents", e),
            (e.$inject = [
                "$interval",
                "$rootScope",
                "$timeout",
                "GetUsersService",
                "$AppMain",
                "$Presence",
                "UCLocaleService",
                "$notification",
                "toaster",
                "$Agent",
                "$Authentication",
                "$ServerEventsCP",
                "UCServices",
                "ChatService",
                "CurrentUser",
                "$InactiveToActiveModal",
            ]);
    })(),
    (function () {
        "use strict";
        angular.module("LoginModule", ["AuthenticationModule"]);
    })(),
    (function () {
        "use strict";
        function e(e, c, d, r, i, s, u, g, o, l, f, t, n, a, p, m, b, h, C, v, S, y, D, I, w, P, T, A, M, N, O, V, L, E, U) {
            var $ = this;
            function x(n) {
                var o = l.defer();
                return (
                    v.setDefaultRemoteUserSettings({
                        AgentsToMonitor: [],
                        QueuesToMonitor: [],
                        QueueMonitor: {
                            TooManyCalls: {
                                enabled: !1,
                                thresholds: [
                                    { value: 5, color: A.colors[0].data },
                                    { value: 10, color: A.colors[1].data, display: !1 },
                                ],
                            },
                            TooFewAgents: {
                                enabled: !1,
                                thresholds: [
                                    { value: 10, color: A.colors[0].data },
                                    { value: 5, color: A.colors[1].data, display: !1 },
                                ],
                            },
                            TooLongWait: {
                                enabled: !1,
                                thresholds: [
                                    { value: 60, color: A.colors[0].data },
                                    { value: 120, color: A.colors[1].data, display: !1 },
                                ],
                            },
                        },
                    }),
                    c.getRemoteUserSettings().then(
                        function (e) {
                            if (n)
                                try {
                                    var t = JSON.parse(n);
                                    if (D.compareVersions(t.version, "4.1.39") < 0) console.log("Old settings file encountered, resetting"), N.showToast("warning", C.getPhrase("UserSettingsReset")), c.resetApplicationSettings();
                                    else {
                                        D.compareVersions(t.version, "6.5.17") < 0 && !0 === t.MissedCallNotifications && (t.MissedCallNotifications = "AUTO_CLOSE"),
                                            angular.extend(d.globalVars.Settings, t),
                                            angular.forEach(v.remoteUserSettings, function (e, t) {
                                                d.globalVars.Settings[t] = e;
                                            }),
                                            "undefined" != typeof Storage && angular.isDefined(localStorage.defaultTransferMode) && (d.globalVars.Settings.DefaultTransferMode = localStorage.defaultTransferMode);
                                        var a = v.readLocalStorage("lastLogoutStatus");
                                        a && (d.globalVars.Settings.LastLogoutStatus = a),
                                            d.globalVars.ExtendedProperties.CanEditUserSettings &&
                                                p.saveUserSettings().then(
                                                    function (e) {},
                                                    function (e) {
                                                        console.error("saveUserSettings", e);
                                                    }
                                                ),
                                            v.deleteLocalStorageKey("UserSettings"),
                                            v.deleteLocalStorageKey("defaultTransferMode"),
                                            v.deleteLocalStorageKey("lastLogoutStatus"),
                                            p.putSettings(null);
                                    }
                                } catch (e) {
                                    console.log("Error parsing userSettings e=" + JSON.stringify(e) + " string=" + n), c.resetApplicationSettings();
                                }
                            o.resolve(!0);
                        },
                        function (e) {
                            console.error("getRemoteUserSettings", e), o.reject(e);
                        }
                    ),
                    o.promise
                );
            }
            function j(t) {
                d.globalVars.ExtendedProperties.ucProfile
                    ? N.applyProfileSettings().then(function (e) {
                          e
                              ? d.globalVars.ExtendedProperties.CanEditUserSettings
                                  ? p.saveUserSettings().then(
                                        function (e) {
                                            t.resolve(e);
                                        },
                                        function (e) {
                                            console.error("saveUserSettings", e), t.reject(e);
                                        }
                                    )
                                  : t.resolve(!0)
                              : t.resolve(!1);
                      })
                    : (console.info("No user settings profile assigned"),
                      x(null).then(
                          function (e) {
                              t.resolve(e);
                          },
                          function (e) {
                              t.reject(e);
                          }
                      ));
            }
            function R() {
                if ((console.debug("initGoogleClient"), d.globalVars.GoogleVars))
                    if (d.globalVars.GoogleVars.contacts.clientId)
                        if (d.globalVars.GoogleVars.contacts.apiKey)
                            try {
                                gapi.client
                                    .init({
                                        apiKey: d.globalVars.GoogleVars.contacts.apiKey,
                                        clientId: d.globalVars.GoogleVars.contacts.clientId,
                                        discoveryDocs: d.globalVars.GoogleVars.contacts.discoveryDocs,
                                        scope: d.globalVars.GoogleVars.contacts.scope,
                                    })
                                    .then(function () {
                                        gapi.auth2.getAuthInstance().isSignedIn.listen(H), H(gapi.auth2.getAuthInstance().isSignedIn.get());
                                    });
                            } catch (e) {
                                console.error("initializing gapi.client.init", e);
                            }
                        else console.error("Google vars: API key is not initialized");
                    else console.error("Google vars: client id is not initialized");
                else console.error("Google vars are not initialized");
            }
            function H(e) {
                console.debug("updateGoogleSigninStatus", e),
                    (d.globalVars.GoogleSignedIn = e) ? d.globalVars.loggingOut || (E.readGoogleContacts(), d.globalVars.GoogleVars.directory.enabled && E.readGoogleDirectory()) : gapi.auth2.getAuthInstance().signIn();
            }
            (d.globalVars = {}),
                (d.globalVars.Settings = {}),
                ($.login = function () {
                    var t = $.username,
                        e = $.password,
                        a = $.loginRememberMe;
                    (d.globalVars.loginInProgress = !0), i.setLoginError(""), (t = t.toLowerCase());
                    r.createSessionID();
                    r.login(t, e).then(
                        function (e) {
                            c.loginUsing(t, e.data.Data, a, e.data.Code);
                        },
                        function (e) {
                            var t;
                            (d.globalVars.loginInProgress = !1), console.error("login", e);
                            var a = e.status,
                                n = e.data ? e.data : {};
                            if (401 === a || 403 === a || 409 === a) {
                                var o = n.Message;
                                403 !== a || (1 != n.Code && 2 != n.Code) ? (409 === a && 5 == n.Code ? ((a = 403), (o = "LoggedInElsewhere")) : 409 === a && 7 == n.Code && (o = "SameBrowserDifferentUser")) : (o = "LoggedInElsewhere");
                            } else -1 === a && (a = "Unknown");
                            (t = "Login.error." + a), o && (t += "." + o), i.setLoginError(t);
                        }
                    );
                }),
                (d.getLocalPhrase = function (e, t) {
                    return C.getPhrase(e, t);
                }),
                console.log("** UC Suite Start **, version " + i.productVersion),
                console.log("language=" + window.navigator.language + " userLanguage=" + window.navigator.userLanguage),
                (c.supportedBrowser = null),
                ($.unsupportedFeatures = []),
                (c.browserSupports = {}),
                (c.setDefaultApplicationSettings = function () {
                    (d.globalVars.Settings = {}),
                        (d.globalVars.Settings.version = i.productVersion),
                        (d.globalVars.Settings.AddExtension = !0),
                        (d.globalVars.Settings.EnableIncomingTextTone = !0),
                        (d.globalVars.Settings.EnableIncomingCallTone = !0),
                        (d.globalVars.Settings.MissedCallNotifications = "AUTO_CLOSE"),
                        (d.globalVars.Settings.AbandonedCallNotifications = "AUTO_CLOSE"),
                        (d.globalVars.Settings.ShowInactivity = !0),
                        (d.globalVars.Settings.SendMessageOnEnter = !0),
                        (d.globalVars.Settings.EnableAvailabilityNotifications = !0),
                        (d.globalVars.Settings.HomePageDisplaySetting = "DEFAULT"),
                        (d.globalVars.Settings.NameDisplayPreference = "EXT_NAME"),
                        (d.globalVars.Settings.HideOfflineUsers = !1),
                        (d.globalVars.Settings.CP_Mode = "USE_APP_CP"),
                        (d.globalVars.Settings.CallHistoryGridState = void 0),
                        (d.globalVars.Settings.GridInternalContactGridState = void 0),
                        (d.globalVars.Settings.AdvancedHomePage = !1),
                        (d.globalVars.Settings.ShowFirstTimerVideo = !0),
                        (d.globalVars.Settings.HideEmptyBuddyListWarning = !1),
                        (d.globalVars.Settings.DialerCollapsed = d.globalVars.IsUT880),
                        (d.globalVars.Settings.EnableSearchBar = !0),
                        (d.globalVars.Settings.EnableSearchBarForContacts = !0),
                        (d.globalVars.Settings.EnableEmailSend = !d.globalVars.IsUT880),
                        (d.globalVars.Settings.ParksToMonitor = [1, 2, 3, 4]),
                        (d.globalVars.Settings.PromptOnSignout = !0),
                        (d.globalVars.Settings.PromptOnOutgoing = !0),
                        (d.globalVars.Settings.PromptOnIncoming = !0),
                        (d.globalVars.Settings.HistoryCallParks = []),
                        (d.globalVars.Settings.Paging = {}),
                        (d.globalVars.Settings.Paging.LastPage = { number: -1, label: "-- No page --" }),
                        (d.globalVars.Settings.Paging.History = []),
                        (d.globalVars.Settings.StartAbandonedCalls = !1),
                        (d.globalVars.Settings.AbandonedCallsWindowSizePos = void 0),
                        (d.globalVars.Settings.AbandonedCallsWindowState = void 0),
                        (d.globalVars.Settings.StartAgentMonitor = !1),
                        (d.globalVars.Settings.AgentMonitorWindowSizePos = void 0),
                        (d.globalVars.Settings.AgentMonitorWindowState = void 0),
                        (d.globalVars.Settings.StartQueueMonitor = !1),
                        (d.globalVars.Settings.QueueMonitorWindowSizePos = void 0),
                        (d.globalVars.Settings.QueueMonitorWindowState = void 0),
                        (d.globalVars.Settings.AgentsToMonitor = []),
                        (d.globalVars.Settings.QueuesToMonitor = []),
                        (d.globalVars.Settings.QueueMonitor = {
                            TooManyCalls: {
                                enabled: !1,
                                thresholds: [
                                    { value: 5, color: A.colors[0].data },
                                    { value: 10, color: A.colors[1].data, display: !1 },
                                ],
                            },
                            TooFewAgents: {
                                enabled: !1,
                                thresholds: [
                                    { value: 10, color: A.colors[0].data },
                                    { value: 5, color: A.colors[1].data, display: !1 },
                                ],
                            },
                            TooLongWait: {
                                enabled: !1,
                                thresholds: [
                                    { value: 60, color: A.colors[0].data },
                                    { value: 120, color: A.colors[1].data, display: !1 },
                                ],
                            },
                        }),
                        (d.globalVars.Settings.VideoCallProfile = null),
                        (d.globalVars.Settings.ShowSelfView = !0),
                        (d.globalVars.Settings.SuppressWebConferenceWarning = !1),
                        (d.globalVars.Settings.EnablePaging = d.globalVars.IsAttendant && !d.globalVars.IsUT880),
                        (d.globalVars.Settings.ShowHidden = !1),
                        (d.globalVars.Settings.EnableDialer = (d.globalVars.IsAttendant || d.globalVars.IsAgent) && !d.globalVars.IsMobile && !d.globalVars.IsUT880),
                        (d.globalVars.Settings.EnableAgent = !d.globalVars.IsUT880),
                        (d.globalVars.Settings.EnableCallPark = !d.globalVars.IsUT880),
                        (d.globalVars.Settings.EnableParkMonitor = d.globalVars.IsAttendant || (d.globalVars.IsAdvancedUser && !d.globalVars.IsUT880)),
                        (d.globalVars.Settings.EnableValet = d.globalVars.IsAttendant || (d.globalVars.IsAdvancedUser && !d.globalVars.IsUT880)),
                        (d.globalVars.Settings.EnableVideo = d.globalVars.IsAttendant || (d.globalVars.IsAdvancedUser && !d.globalVars.IsUT880)),
                        (d.globalVars.Settings.EnableSwitchOnDID = !1),
                        (d.globalVars.Settings.EnableIgnoreIncomingThatDoNotAlert = !1),
                        (d.globalVars.Settings.TestDriver = { enabled: !1, minIdleTime: 1, maxIdleTime: 5, minTalkTime: 5, maxTalkTime: 20 }),
                        (d.globalVars.Settings.ContactFilter = ["Internal", "External", "Personal", "GoogleUser", "GoogleContact", "Outlook"]),
                        (d.globalVars.Settings.ConsoleLogging = !0),
                        (d.globalVars.MostRecentlyUsedCallForwards = []),
                        (d.globalVars.PhoneProURL = void 0),
                        (d.globalVars.VideoCallType = "Chat");
                }),
                (d.resetApplicationSettings = function () {
                    try {
                        c.setDefaultApplicationSettings(),
                            N.applyLicensing(),
                            (d.globalVars.telScheme = d.globalVars.Settings.Is4xxDevice && d.globalVars.IsIOS ? "st450://" : "tel:"),
                            N.setParksToMonitor(),
                            A.setQueueMonitorConfig({ queues: d.globalVars.Settings.QueuesToMonitor, thresholds: d.globalVars.Settings.QueueMonitor }),
                            A.setAgentsToMonitor(d.globalVars.Settings.AgentsToMonitor);
                    } catch (e) {}
                }),
                (d.getSelectedNightModeLabel = function (e) {
                    return e < 1 ? { data: -1, label: "-- " + C.getPhrase("Unknown") + " --" } : d.globalVars.NightModeLabels[e - 1];
                }),
                (d.presenceStatusArray = function () {
                    return h.presenceStatusArray();
                }),
                (d.noProfileImage = function () {
                    return "/uc/Images/NoPhoto.png";
                }),
                (c.goToLoginPage = function () {
                    t.replace(), t.path(""), g.location.reload();
                }),
                (c.goToPage = function (e, t) {
                    o.go(e, t);
                }),
                (c.readUserSettings = function () {
                    var o = l.defer();
                    return (
                        d.globalVars.ExtendedProperties.CanEditUserSettings
                            ? s.post("/ucapi/cti/GetSettings", { qualifier: "uc_settings" }).then(
                                  function (e) {
                                      var t = e.data.Data;
                                      if (t)
                                          try {
                                              var a = JSON.parse(t);
                                              angular.extend(d.globalVars.Settings, a), o.resolve(!0);
                                          } catch (e) {
                                              console.log("Error parsing remote userSettings e=" + JSON.stringify(e) + " string=" + t), c.resetApplicationSettings(), o.resolve("error");
                                          }
                                      else {
                                          console.info("remote settings not found, will upgrade if possible.");
                                          var n = v.readLocalStorage("UserSettings");
                                          n
                                              ? x(n).then(
                                                    function (e) {
                                                        o.resolve(e);
                                                    },
                                                    function (e) {
                                                        o.reject(e);
                                                    }
                                                )
                                              : j(o);
                                      }
                                  },
                                  function (e) {
                                      console.error("readUserSettings", e), o.reject(e);
                                  }
                              )
                            : j(o),
                        o.promise
                    );
                }),
                (c.successfulLogin = function (a, n) {
                    c.readUserSettings().then(
                        function (e) {
                            N.applyLicensing(),
                                (d.globalVars.telScheme = d.globalVars.Settings.Is4xxDevice && d.globalVars.IsIOS ? "st450://" : "tel:"),
                                d.globalVars.IsAdvancedUser
                                    ? s.get("/api/siteSettings/google").then(
                                          function (e) {
                                              if (e.data)
                                                  try {
                                                      if (((d.globalVars.GoogleVars = JSON.parse(e.data)), !d.globalVars.GoogleVars.contacts))
                                                          return console.error("missing contacts section in google site settings"), void (d.globalVars.IsGoogleIntegration = !1);
                                                      (d.globalVars.GoogleVars.contacts.discoveryDocs = ["https://people.googleapis.com/$discovery/rest?version=v1"]),
                                                          (d.globalVars.GoogleVars.contacts.scope = "https://www.googleapis.com/auth/contacts.readonly");
                                                      var t = d.globalVars.GoogleVars.directory && d.globalVars.GoogleVars.directory.enabled,
                                                          a = d.globalVars.GoogleVars.contacts && d.globalVars.GoogleVars.contacts.enabled;
                                                      if (((d.globalVars.IsGoogleIntegration = t || a), d.globalVars.IsGoogleIntegration && gapi.load("client:auth2", R), !d.globalVars.GoogleVars.directory))
                                                          return void console.error("missing directory section in google site settings");
                                                  } catch (e) {
                                                      console.error("Error parsing google site settings"), (d.globalVars.IsGoogleIntegration = !1);
                                                  }
                                              else d.globalVars.IsGoogleIntegration = !1;
                                          },
                                          function (e) {
                                              console.error("reading google site settings"), (d.globalVars.IsGoogleIntegration = !1);
                                          }
                                      )
                                    : (console.info("User is not licensed for Google app integration"), (d.globalVars.IsGoogleIntegration = !1)),
                                (d.globalVars.loginInProgress = !1),
                                (r.isLoggedIn = !0),
                                o.go("app.home"),
                                N.setCallProcessingAvailable(),
                                (d.globalVars.DefaultTransfer = null);
                            var t = d.globalVars.Settings.DefaultTransferMode;
                            t &&
                                ("CLICK_TO_TRANSFER" === t && (d.globalVars.IsAttendant || (t = "IMMEDIATE")),
                                (d.globalVars.DefaultTransfer = d.globalVars.TransferOptions.find(function (e) {
                                    return e.data === t;
                                }))),
                                null === d.globalVars.DefaultTransfer && (d.globalVars.DefaultTransfer = d.globalVars.TransferOptions[0]),
                                (d.globalVars.Settings.DefaultTransferMode = d.globalVars.DefaultTransfer.data),
                                (d.globalVars.CLICK_TO_TRANSFER = !1),
                                d.globalVars.Settings.EnableVideo && !d.globalVars.IsAdvancedUser && N.showToast("warning", C.getPhrase("NeedAdvancedLicenseForVideo")),
                                N.setupVideo(d.globalVars.Settings.EnableVideo),
                                N.initializeChoices(),
                                D.init(),
                                I.init(),
                                n ? v.writeLocalStorage("loginRememberMe", a) : v.deleteLocalStorageKey("loginRememberMe"),
                                h.init().then(
                                    function (e) {
                                        c.finishLogin();
                                    },
                                    function (e) {
                                        c.finishLogin();
                                    }
                                ),
                                s.post("/ucapi/device/ShowAllInbound", { show: !d.globalVars.Settings.EnableIgnoreIncomingThatDoNotAlert }).then(
                                    function (e) {
                                        console.log("ShowAllInbound success");
                                    },
                                    function (e) {
                                        console.error("ShowAllInbound error", e);
                                    }
                                ),
                                N.setParksToMonitor(),
                                p.PhoneProUrl().then(
                                    function (e) {
                                        console.log("PhoneProURL", e), (d.globalVars.PhoneProURL = e);
                                    },
                                    function (e) {
                                        console.error("PhoneProURL", e);
                                    }
                                ),
                                s.post("/ucapi/cti/GetPbxUrl").then(
                                    function (e) {
                                        d.globalVars.SwitchURL = e.data.Data;
                                    },
                                    function (e) {
                                        console.error("GetPbxUrl", e);
                                    }
                                );
                        },
                        function (e) {
                            N.doLogout("InitError.readAllSettings", e.status);
                        }
                    );
                }),
                (c.loginUsing = function (t, e, a, n) {
                    ($.extension = parseInt(e.DesksetExtension)),
                        (d.globalVars.GoogleContacts = []),
                        (d.globalVars.GooglePhoneNumbersHash = {}),
                        (d.globalVars.GoogleType = "Directory"),
                        (d.globalVars.GoogleVars = { contacts: {}, directory: {} }),
                        (N.username = t),
                        (N.password = e.Password),
                        (N.ClientID = f.get("ClientID")),
                        console.info("Set ClientID", N.ClientID),
                        (s.defaults.headers.common.ClientID = N.ClientID),
                        (d.globalVars.IsSLTPhone = e.IsSingleLine),
                        console.log("IsSLTPhone", d.globalVars.IsSLTPhone),
                        (d.globalVars.CanChat = e.CanChat),
                        (d.globalVars.IsAdvancedUser = e.AdvancedFeatures),
                        (d.globalVars.CanEditContacts = e.CanEditContacts),
                        (d.globalVars.CanEditPresence = e.CanEditPresence),
                        (d.globalVars.CanSeeBlfDetails = e.CanSeeBlfDetails),
                        (d.globalVars.CanBarge = e.CanBarge && !d.globalVars.IsSLTPhone),
                        (d.globalVars.CanSetNight = e.CanSetNight && !d.globalVars.IsSLTPhone),
                        (d.globalVars.CanPickup = e.CanPickup && !d.globalVars.IsSLTPhone),
                        (d.globalVars.HasHeadset = e.HasHeadset && !d.globalVars.IsSLTPhone),
                        (d.globalVars.UsingHeadset = e.AutoHeadset && !d.globalVars.IsSLTPhone),
                        (d.globalVars.IsAgent = e.IsAgent),
                        (d.globalVars.AgentIDRequired = e.AgentIDRequired),
                        (d.globalVars.AICRequired = e.AICRequired),
                        (d.globalVars.IsAttendant = e.IsAttendant),
                        (d.globalVars.AbandonedCallback = e.AbandonedCallback),
                        (d.globalVars.IsGlobalRelease = "US" !== e.Region),
                        (d.globalVars.XOP_Url = e.XopUrl),
                        (d.globalVars.HasMultiDevice = e.HasMultiDevice),
                        (d.globalVars.canHaveSearch = !1),
                        (d.globalVars.AllowCrm = e.AllowCrm),
                        (d.globalVars.HasBreakCodes = e.HasBreakCodes),
                        (d.globalVars.HasTallyCodes = e.HasTallyCodes),
                        (d.globalVars.HasCallbacks = e.HasCallbacks),
                        (d.globalVars.OutlookContacts = e.OutlookContacts),
                        (d.globalVars.HasOffice365 = e.HasOffice365 && d.globalVars.AllowCrm && d.globalVars.IsGlobalRelease);
                    moment().local().toDate();
                    (d.globalVars.SmsNumbers = (e.SmsNumbers ? e.SmsNumbers : []).map(function (e) {
                        var t = moment(e.Expires).toDate();
                        return { number: e.Number, rawNumber: D.toDigits(e.Number), country: e.Country, isSMS: !0, autoReply: e.AutoReply, label: e.Label, expires: t };
                    })),
                        e.LastLogout && (d.globalVars.LastLogout = D.toDate(e.LastLogout));
                    var o = { ucProfile: null, CanEditUserSettings: !0 };
                    e.ExtendedProperties ? (d.globalVars.ExtendedProperties = angular.extend(o, e.ExtendedProperties)) : (d.globalVars.ExtendedProperties = o),
                        c.setDefaultApplicationSettings(),
                        (d.globalVars.TransferOptions = [
                            { label: C.getPhrase("Dial.ImmediateTransfer"), data: "IMMEDIATE", icon: "fas fa-arrow-to-right" },
                            { label: C.getPhrase("Dial.AttendedTransfer"), data: "ATTENDED", icon: "fas fa-handshake" },
                        ]),
                        d.globalVars.IsAttendant && d.globalVars.TransferOptions.push({ label: C.getPhrase("CLICK_TO_TRANSFER"), data: "CLICK_TO_TRANSFER", icon: "fas fa-bullseye text-warning" }),
                        N.setWindowTitle($.extension),
                        0 != n && console.log("** Code is not 0!"),
                        1 == n || 2 == n
                            ? (c.setCallControlLicenseAvailable(!0),
                              c.handleExtensionInUse($.extension).then(
                                  function (e) {
                                      c.successfulLogin(t, a);
                                  },
                                  function (e) {
                                      c.successfulLogin(t, a);
                                  }
                              ))
                            : (3 == n
                                  ? (N.showToast("warning", "There are no licenses available"), c.setCallControlLicenseAvailable(!1))
                                  : 4 == n
                                  ? N.showStickyToast("error", "License Error", "No Attendant licenses are available")
                                  : 5 == n
                                  ? N.showStickyToast("error", "License Error", "No ACD licenses are available")
                                  : 6 == n
                                  ? (N.showStickyToast("error", "License Error", "A CTI license is not available at this time which means that call processing features will be limited or unavailable."), c.setCallControlLicenseAvailable(!1))
                                  : c.setCallControlLicenseAvailable(!0),
                              c.setDeviceOpen(!0),
                              c.successfulLogin(t, a));
                });
            var k = D.toDate("1980-01-01T00:00:00");
            function F() {
                (d.globalVars.IsMobile = /Mobi/.test(navigator.userAgent) || !0 === d.globalVars.IsUT880),
                    (d.globalVars.IsIOS = 0 < /ios/i.test(navigator.userAgent) || 0 < /iphone/i.test(navigator.userAgent)),
                    console.log("IsMobile", d.globalVars.IsMobile, "IsIOS", d.globalVars.IsIOS),
                    N.resetVariables();
                var e = sessionStorage.getItem("loginError");
                if ((e && ($.loginError = c.getLocalPhrase(e)), v.readLocalStorage("loggedOut_uc"))) v.deleteLocalStorageKey("loggedOut_uc");
                else {
                    var a = f.get("AutoLogin");
                    if ((console.debug("AutoLogin", a), a)) {
                        try {
                            f.remove("AutoLogin");
                        } catch (e) {}
                        console.log("Found ClientID: " + t),
                            (n = sessionStorage.getItem("sessionID")) ? console.log("Possible session restart.  Attempt a restart using sessionID " + n) : (n = r.createSessionID()),
                            (r.sessionID = n),
                            p.AutoLogin(a, n).then(
                                function (e) {
                                    console.log("Detected AutoLogin cookie=" + a), (d.globalVars.loginInProgress = !0), i.setLoginError("");
                                    var t = v.readLocalStorage("loginRememberMe");
                                    c.loginUsing(e.Data.UserID, e.Data, t && 0 < t.length, 0);
                                },
                                function (e) {
                                    (d.globalVars.autoLoginFailure = !0), i.setLoginError("Login.error.AutoLoginFailed");
                                }
                            );
                    } else {
                        var n,
                            t = f.get("ClientID"),
                            o = sessionStorage.getItem("LoggingOutLock");
                        if (
                            (console.debug("clientID", t, "loggingOutLock", o),
                            (o || (t && ("Login.error.401.Stolen" === e || "Logout.error.Inactivity" === e))) && (f.remove("ClientID"), (t = void 0)),
                            sessionStorage.removeItem("LoggingOutLock"),
                            t)
                        )
                            console.log("Found ClientID: " + t),
                                (n = sessionStorage.getItem("sessionID")) ? console.log("Possible session restart.  Attempt a restart using sessionID " + n) : (n = r.createSessionID()),
                                (r.sessionID = n),
                                p.validateSession(n).then(
                                    function (t) {
                                        try {
                                            console.log("session successfully validated"),
                                                sessionStorage.setItem("sessionID", n),
                                                (d.globalVars.loginInProgress = !0),
                                                i.setLoginError(""),
                                                p.stopMonitoring().then(
                                                    function (e) {
                                                        c.loginUsing(t.Data.UserID, t.Data, $.loginRememberMe, t.Code);
                                                    },
                                                    function (e) {
                                                        c.loginUsing(t.Data.UserID, t.Data, $.loginRememberMe, t.Code);
                                                    }
                                                );
                                        } catch (e) {}
                                    },
                                    function (e) {
                                        var t = e.status;
                                        console.warn("session unsuccessfully validated", t),
                                            401 != t &&
                                                (409 == t ? i.setLoginError("Login.error.420") : 420 == t ? i.setLoginError("Login.error.420") : 503 == t ? i.setLoginError("Login.error.503") : i.setLoginError("Login.error.Unknown"));
                                    }
                                );
                    }
                }
            }
            (c.buildChatSessions = function () {
                s.post("/ucapi/im/GetLastConversations").then(
                    function (e) {
                        angular.forEach(e.data.Data, function (e) {
                            var t = m.addConversation(e);
                            if (t) {
                                var a,
                                    n,
                                    o = e.LastConversation && e.LastConversation.SessionEnd;
                                o && (a = D.toDate(o)) ? (n = m.getDisplayTime(a)) : (a = k), (t.lastMessageTimestamp = a), (t.dateTime = n);
                            }
                        }),
                            angular.isArray(d.globalVars.SmsNumbers) && 0 < d.globalVars.SmsNumbers.length
                                ? s.get("/ucapi/smsHistory/GetLastConversations").then(
                                      function (e) {
                                          angular.forEach(e.data.Data, function (e) {
                                              var t,
                                                  a,
                                                  n = m.addConversation(e, !0),
                                                  o = e.LastConversation && e.LastConversation.SessionEnd;
                                              o && (t = D.toDate(o)) ? (a = m.getDisplayTime(t)) : (t = k),
                                                  (n.lastMessageTimestamp = t),
                                                  (n.dateTime = a),
                                                  (n.missedChatAlert = t >= d.globalVars.LastLogout),
                                                  m.getSmsChatObject(e.MyNumber, e.Party);
                                          }),
                                              m.reorderChatList(),
                                              m.calcNumUnreadChats();
                                      },
                                      function (e) {
                                          console.error("building last sms conversations", e);
                                      }
                                  )
                                : m.reorderChatList();
                    },
                    function (e) {
                        console.error("building last conversations", e);
                    }
                );
            }),
                (c.handleExtensionInUse = function (e) {
                    var t = l.defer();
                    if (v.readLocalStorage("assumeControl"))
                        try {
                            var a = JSON.parse(v.readLocalStorage("assumeControl"));
                            a.rememberChoice, "TAKE_CONTROL" === a.action;
                        } catch (e) {
                            console.log("Exception parsing assumeControl structure.");
                        }
                    return (
                        console.log("*** Force the dialog to happen by ignoring 'rememberChoice'"),
                        w.open(e).result.then(function (e) {
                            e.rememberChoice ? v.writeLocalStorage("assumeControl", JSON.stringify(e)) : v.deleteLocalStorageKey("assumeControl"),
                                "TAKE_CONTROL" === e.action
                                    ? c.overrideOpenDevice().then(
                                          function (e) {
                                              t.resolve(e);
                                          },
                                          function (e) {
                                              N.doLogout("Login.error.403.LoggedInElsewhere");
                                          }
                                      )
                                    : (console.log("user chose to not override the device"), t.reject("user chose to not override device"));
                        }),
                        t.promise
                    );
                }),
                (c.overrideOpenDevice = function () {
                    console.log("force device open");
                    var t = l.defer();
                    return (
                        p.openDevice(!0).then(
                            function (e) {
                                c.setDeviceOpen(!0), t.resolve(e);
                            },
                            function (e) {
                                c.setDeviceOpen(!1), t.reject("openDevice failure");
                            }
                        ),
                        t.promise
                    );
                }),
                (c.setCP_Mode = function (e) {
                    (d.globalVars.Settings.CP_Mode = e), N.setCallProcessingAvailable();
                }),
                (c.setCallControlLicenseAvailable = function (e) {
                    (d.globalVars.CallControlLicenseAvailable = e), N.setCallProcessingAvailable();
                }),
                (c.setMonitoringCalls = function (e) {
                    (d.globalVars.MonitoringCalls = e), N.setCallProcessingAvailable();
                }),
                (c.setDeviceOpen = function (e) {
                    (d.globalVars.DeviceOpen = e), N.setCallProcessingAvailable();
                }),
                (c.init2 = function () {
                    d.globalVars.IsUT880
                        ? (c.setCP_Mode("USE_APP_CP"), c.continueInitWithMonitorCalls())
                        : (console.log("CP_Mode = " + d.globalVars.Settings.CP_Mode),
                          d.globalVars.IsMobile
                              ? (console.log("Mobile Device"),
                                d.globalVars.Settings.UserPickedCPMode
                                    ? "USE_APP_CP" === d.globalVars.Settings.CP_Mode
                                        ? c.continueInitWithMonitorCalls()
                                        : c.init3()
                                    : P.open($.extension, d.globalVars.Settings.CP_Mode).result.then(function (e) {
                                          c.setCP_Mode(e.cpMode),
                                              (d.globalVars.Settings.UserPickedCPMode = !0),
                                              v.flushAllLocalApplicationSettings(),
                                              "USE_APP_CP" === d.globalVars.Settings.CP_Mode ? c.continueInitWithMonitorCalls() : c.init3();
                                      }))
                              : (console.log("Desktop Device"), "USE_APP_CP" === d.globalVars.Settings.CP_Mode ? c.continueInitWithMonitorCalls() : c.init3()));
                }),
                (c.continueInitWithMonitorCalls = function () {
                    p.monitorCalls().then(
                        function (e) {
                            console.log("Monitor Calls successful"), c.setMonitoringCalls(!0), c.init3();
                        },
                        function (e) {
                            console.log("Monitor Calls failed, reason=" + JSON.stringify(e)), c.init3();
                        }
                    );
                }),
                (c.attendantInitialization = function () {
                    d.globalVars.IsAttendant &&
                        ((d.globalVars.NightModeLabels = []),
                        s.post("/ucapi/device/GetNightLabels", {}).then(
                            function (e) {
                                console.log("GetNightLabels", e.data);
                                for (var t = 0; t < e.data.Data.length; t++)
                                    0 == t ? d.globalVars.NightModeLabels.push({ data: t + 1, label: C.getPhrase("EnableDayMode") }) : d.globalVars.NightModeLabels.push({ data: t + 1, label: e.data.Data[t] });
                                s.post("/ucapi/device/GetNightMode", {}).then(
                                    function (e) {
                                        console.log("GetNightMode data=", e.data), (d.globalVars.NightMode = e.data.Data);
                                    },
                                    function (e) {
                                        console.error("GetNightMode", e);
                                    }
                                );
                            },
                            function (e) {
                                console.error("GetNightLabels", e);
                            }
                        ));
                }),
                (c.agentInitialization = function () {
                    d.globalVars.IsAgent &&
                        A.init($.extension, d.globalVars.AgentIDRequired, d.globalVars.AICRequired).then(
                            function (e) {
                                var a = A.queues;
                                (d.globalVars.Settings.QueuesToMonitor = d.globalVars.Settings.QueuesToMonitor.map(function (e) {
                                    for (var t = 0; t < a.length; t++) a[t].ID === e.ID && (e.Name = a[t].Name);
                                    return e;
                                })),
                                    A.setQueueMonitorConfig({ queues: d.globalVars.Settings.QueuesToMonitor, thresholds: d.globalVars.Settings.QueueMonitor }),
                                    A.setAgentsToMonitor(d.globalVars.Settings.AgentsToMonitor),
                                    n(
                                        function () {
                                            A.features.canMonitor &&
                                                (d.globalVars.Settings.StartQueueMonitor && c.startQueueMonitor(),
                                                d.globalVars.Settings.StartAgentMonitor && c.startAgentMonitor(),
                                                d.globalVars.Settings.StartAbandonedCalls && c.startAbandonedCalls());
                                        },
                                        5e3,
                                        !1
                                    );
                            },
                            function (e) {}
                        );
                }),
                (c.init4 = function () {
                    c.attendantInitialization(),
                        c.agentInitialization(),
                        V.buildActiveCallsFromCurrentState(),
                        n(
                            function () {
                                N.showDefaultBuddyList(), O.openEventMonitor();
                            },
                            500,
                            !1
                        ),
                        U.init("ucsuite").then(function (e) {
                            c.checkPresenceForAvailability();
                        }),
                        n(function () {
                            N.windowUpdated();
                        }, 250);
                }),
                (c.init3 = function () {
                    (d.globalVars.UsingUCServicesCP = "USE_APP_CP" === d.globalVars.Settings.CP_Mode), N.setCallProcessingAvailable();
                    var e = v.readLocalStorage("lastDirectoryType");
                    if (e)
                        for (var t = 0; t < d.globalVars.directoryOptions.length; t++)
                            if (e === d.globalVars.directoryOptions[t].type) {
                                d.globalVars.currentDirectoryObj = d.globalVars.directoryOptions[t];
                                break;
                            }
                    null == d.globalVars.currentDirectoryObj && (d.globalVars.currentDirectoryObj = c.globalVars.directoryOptions[0]),
                        "USE_APP_CP" === d.globalVars.Settings.CP_Mode
                            ? n(
                                  function () {
                                      console.log("check to see if call features are available"),
                                          d.globalVars.IsCallProcessingAvailable || d.globalVars.loggingOut || N.showToast("error", "Error Setting up Call Features.  Incoming and outgoing calls with this application are not available.");
                                  },
                                  3e4,
                                  !1
                              )
                            : N.showToast("info", "This application has been configured to not use call features."),
                        c.init4(),
                        p.startMonitoring("Internal").then(
                            function (e) {},
                            function (e) {
                                console.log("startMonitoring failed.  Unable to get updates to internal contacts.");
                            }
                        ),
                        N.startTimers();
                }),
                (c.checkPresenceForAvailability2 = function () {
                    if (!h.getPresenceAvailability(S.getUser().presence.status)) {
                        var e = !0;
                        if (v.readLocalStorage("DoNotShowPresenceUpdateUntil"))
                            try {
                                var t = D.toDate(v.readLocalStorage("DoNotShowPresenceUpdateUntil"));
                                if (t) {
                                    t.setHours(0, 0, 0);
                                    var a = new Date();
                                    a.setHours(0, 0, 0), t < a ? v.deleteLocalStorageKey("DoNotShowPresenceUpdateUntil") : (e = !1);
                                } else v.deleteLocalStorageKey("DoNotShowPresenceUpdateUntil");
                            } catch (e) {
                                v.deleteLocalStorageKey("DoNotShowPresenceUpdateUntil");
                            }
                        e && c.launchPresenceNotCurrentModal();
                    }
                }),
                (c.checkPresenceForAvailability = function () {
                    M.init().then(
                        function (e) {
                            c.checkPresenceForAvailability2();
                        },
                        function (e) {
                            c.checkPresenceForAvailability2();
                        }
                    );
                }),
                (c.getRemoteUserSettings = function () {
                    var t = l.defer();
                    return (
                        v.readRemoteUserSettings().then(
                            function (e) {
                                (d.globalVars.Settings.AgentInfo = e.agentInfo),
                                    (d.globalVars.Settings.LastForwardDestination = e.lastForwardDestination),
                                    (d.globalVars.Settings.MostRecentlyUsedCallForwards = e.mruCallForwards2),
                                    (d.globalVars.MostRecentlyUsedCallForwards = D.get_mru_callForwards()),
                                    (d.globalVars.Settings.AgentInfo = D.getAgentInfo()),
                                    angular.forEach(d.globalVars.Settings.Paging.History, function (e) {
                                        e.label = C.getPhrase(e.mode) + " " + e.number;
                                    }),
                                    t.resolve(!0);
                            },
                            function (e) {
                                t.reject(!1);
                            }
                        ),
                        t.promise
                    );
                }),
                (c.finishLogin = function () {
                    S.setExtension($.extension),
                        b.readUsers().then(
                            function (e) {
                                console.log("Successfully read all users"), d.globalVars.GoogleSignedIn && d.globalVars.GoogleVars.directory.enabled && E.readGoogleDirectory();
                                var t = b.getUsersHash()[$.extension];
                                t || console.error("No user id for extension " + $.extension + " was found."),
                                    p.getBuddyLists().then(
                                        function (e) {
                                            var t = v.readLocalStorage("defaultBuddyListID");
                                            t || (t = "PERSONAL");
                                            var a = S.getBuddyList(t);
                                            a && ((a.current = !0), (a.default = !0)),
                                                c.init2(),
                                                angular.forEach(S.getBuddyLists(), function (e) {
                                                    e.canEdit = ("PERSONAL" === e.ID || d.globalVars.IsAttendant) && "All" !== e.ID;
                                                }),
                                                s.get("/api/imgroups/justmine").then(
                                                    function (e) {
                                                        var n = {},
                                                            o = S.getExtension();
                                                        angular.forEach(e.data, function (e) {
                                                            var t = !0;
                                                            e.IsBuddyList &&
                                                                (t =
                                                                    0 <
                                                                    e.Members.filter(function (e) {
                                                                        return e.Name == o;
                                                                    }).length);
                                                            if (t) {
                                                                e.IsBuddyList && (n[e.ID] = !0);
                                                                var a = m.addChat(null, e);
                                                                a.missedChatAlert = a.lastMessageTimestamp > d.globalVars.LastLogout;
                                                            }
                                                        }),
                                                            m.reorderChatList(),
                                                            m.calcNumUnreadChats(),
                                                            angular.forEach(S.getBuddyLists(), function (e) {
                                                                e.canChat = (d.globalVars.IsAdvancedUser || d.globalVars.IsAttendant) && "PERSONAL" !== e.ID && n[e.ID];
                                                            });
                                                    },
                                                    function (e) {
                                                        console.error("GET chat groups", err);
                                                    }
                                                ),
                                                (d.globalVars.gettingStatusInformation = !1);
                                        },
                                        function (e) {
                                            console.log("getBuddyLists error=" + JSON.stringify(e));
                                        }
                                    ),
                                    E.readContacts().then(
                                        function (e) {
                                            console.log("all contacts read successfully"), S.setUser(t), (N.userInitialized = !0), c.buildChatSessions();
                                        },
                                        function (e) {
                                            console.error("error reading all contacts", e), S.setUser(t), (N.userInitialized = !0), c.buildChatSessions();
                                        }
                                    ),
                                    d.globalVars.supportsWebRTC && (console.info("Initialize video for WebRTC capable browser"), L.init(S.getExtension())),
                                    c.browserSupports.NOTIFICATIONS &&
                                        a.requestPermission().then(
                                            function (e) {
                                                console.log("requestPermission success, state=" + e),
                                                    (d.globalVars.NotificationsAvailable = !1),
                                                    "granted" === e
                                                        ? (d.globalVars.NotificationsAvailable = !0)
                                                        : N.showToast("warning", "Notifications are not permitted for this website.  Recommend adjust browser preferences to allow Notifications from this site.");
                                            },
                                            function () {
                                                console.log("requestPermission failed"), N.showToast("warning", "Notifications for incoming chats and phone calls will be limited.");
                                            }
                                        );
                            },
                            function (e) {
                                console.log("readUsers failure: " + e);
                            }
                        );
                }),
                (d.globalVars.BrowserWebRTCCapable = !1),
                (d.globalVars.BrowserWebRTCCapableWithPlugin = !1),
                AdapterJS.webRTCReady(function (e) {
                    console.log("WebRTC Ready using plugin:", e), (d.globalVars.BrowserWebRTCCapable = !0), (d.globalVars.BrowserWebRTCCapableWithPlugin = e);
                }),
                (c.getBLFStatusImage = function (e) {
                    return "Idle" === e || "DoNotForward" === e
                        ? "fas fa-phone fa-idle-phone fa-fw"
                        : "Busy" === e || "Active" === e
                        ? "fas fa-phone-volume fa-fw"
                        : "Ringing" === e
                        ? "fas fa-phone-volume fa-fw"
                        : "DoNotDisturb" === e || "Dnd" === e
                        ? "fas fa-phone-slash fa-fw"
                        : "Forward" === e || "ForwardImmediate" === e || "ForwardBothRinging" === e || "DualRinging" === e
                        ? "fas fa-arrow-alt-right fa-fw"
                        : "Offline" === e || null == e
                        ? "fas fa-phone fa-idle-phone fa-fw"
                        : (console.log("unknown blf status: " + e), "fa fa-fw");
                }),
                (d.getBlfStatusImageWithColor = function (e) {
                    var t = "",
                        a = c.getBLFStatusImage(e);
                    a ? (t += a) : (t = "");
                    var n = c.getBLFStatusColor(e);
                    return n && (t += n), t;
                }),
                (d.getBLFStatusClass = function (e) {
                    var t = c.getBLFStatusImage(e);
                    return t ? t + c.getBLFStatusColor(e) : null;
                }),
                (d.getBLFStatusColor = function (e) {
                    return "Idle" === e || "DoNotForward" === e
                        ? ""
                        : "DoNotDisturb" === e || "Dnd" === e
                        ? " text-danger"
                        : "Forward" === e || "ForwardImmediate" === e || "ForwardBothRinging" === e || "DualRinging" === e
                        ? ""
                        : "Busy" === e || "Active" === e
                        ? " call-connected"
                        : "Ringing" === e
                        ? " call-connected animated flash dialing"
                        : "Offline" === e || null == e
                        ? " text-muted"
                        : "";
                }),
                (d.presenceStatusColor = function (e) {
                    return h.getPresenceColor(e);
                }),
                (d.presenceStatusIcon = function (e) {
                    return h.getPresenceIcon(e);
                }),
                (d.presenceStatusLabel = function (e) {
                    return h.getPresenceLabel(e);
                }),
                (d.showAltNumType = function (e) {
                    return D.getPrettyAltNumberType(e);
                }),
                (c.launchPresenceNotCurrentModal = function () {
                    T.open(S.getUser()).result.then(function (e) {
                        e.doNotShowAgainToday && v.writeLocalStorage("DoNotShowPresenceUpdateUntil", JSON.stringify(new Date())),
                            "DO_NOTHING" !== e.option &&
                                ("PRESENCE_PROFILE" === e.option
                                    ? h.setPresenceUsingProfile(e.profileObj)
                                    : (M.setCurrentProfile(null), "SET_IN_THE_OFFICE" === e.option ? h.setPresenceToStatus("InTheOffice") : "PRESENCE_DETAILS" === e.option && N.goToEmployeeDetail(S.getExtension())));
                    });
                }),
                c.$watch(
                    function () {
                        return i.loginError;
                    },
                    function (e, t) {
                        $.loginError = e;
                    }
                ),
                c.$watch(
                    function () {
                        return i.productVersion;
                    },
                    function (e, t) {
                        $.productVersion = e;
                    }
                );
            var B = v.readLocalStorage("loginRememberMe");
            B && (($.username = B.toLocaleLowerCase()), ($.loginRememberMe = 0 < $.username.length)),
                (function () {
                    function t(e) {
                        console.oldLog(e), 1e3 <= d.bufferedConsoleLog.length && d.bufferedConsoleLog.shift();
                        var t = u("date")(new Date(), "MM/dd HH:mm:ss");
                        d.bufferedConsoleLog.push(t + " " + e);
                    }
                    (console.oldLog = console.log),
                        (console.oldError = console.error),
                        (console.oldWarn = console.warn),
                        (console.oldDebug = console.debug),
                        (console.oldInfo = console.info),
                        (d.setConsoleLoggingMode = function (e) {
                            e
                                ? (v.deleteLocalStorageKey("zconsolelogging"),
                                  (console.log = console.oldLog),
                                  (console.warn = console.oldWarn),
                                  (console.debug = console.oldDebug),
                                  (console.info = console.oldInfo),
                                  console.log("turn on console logging"))
                                : ((localStorage.zconsolelogging = JSON.stringify(!1)),
                                  console.log("turn off console logging"),
                                  (console.log = function (e) {}),
                                  (console.warn = function (e) {}),
                                  (console.debug = function (e) {}),
                                  (console.info = function (e) {}));
                        }),
                        (d.setDebugMode = function (e) {
                            e
                                ? ((localStorage.zdebug = JSON.stringify(!0)),
                                  (d.globalVars.DebugWindow = !0),
                                  (d.bufferedConsoleLog = []),
                                  (console.log = function (e) {
                                      t(e);
                                  }),
                                  (console.error = function (e) {
                                      t("Error: " + e);
                                  }),
                                  (console.warn = function (e) {
                                      t("Warn: " + e);
                                  }),
                                  (console.debug = function (e) {
                                      t("Debug: " + e);
                                  }))
                                : (v.deleteLocalStorageKey("zdebug"),
                                  (d.globalVars.DebugWindow = !1),
                                  (d.bufferedConsoleLog = []),
                                  (console.log = console.oldLog),
                                  (console.error = console.oldError),
                                  (console.warn = console.oldWarn),
                                  (console.debug = console.oldDebug));
                        }),
                        v.readLocalStorage("zconsolelogging") && d.setConsoleLoggingMode(JSON.parse(v.readLocalStorage("zconsolelogging"))),
                        v.readLocalStorage("zdebug") && d.setDebugMode(JSON.parse(v.readLocalStorage("zdebug"))),
                        (c.supportedBrowser = !0),
                        (d.globalVars.ShowHTTPChromeWarning = !1),
                        (d.globalVars.isFireFox = !1),
                        (d.globalVars.isSafari = !1),
                        (d.globalVars.isChrome = !1),
                        (d.globalVars.isIE = !1),
                        (d.globalVars.isAndroid = !1),
                        console.log("User agent: " + navigator.userAgent);
                    var e,
                        a = navigator.userAgent.toLowerCase(),
                        n = navigator.appName,
                        o = navigator.appVersion;
                    if (
                        (console.log("browser appName = " + n + " appVersion=" + o),
                        (r = a.match(/.+windows nt\s(\d+\.\d).+/) || a.match(/.+windows nt\s(\d+).+/)) &&
                            2 == r.length &&
                            (console.log("Windows", r[1]), Number(r[1]) < 10 && (console.debug("Windows version too old"), (d.globalVars.WindowsTooOld = !0))),
                        0 <= a.indexOf("edge/")
                            ? (console.log("Browser: MS Edge"), (d.globalVars.isEdge = !0), (d.globalVars.isIE = !0))
                            : 0 <= a.indexOf("msie") || 0 <= navigator.appVersion.toLowerCase().indexOf("trident/")
                            ? ((d.globalVars.isIE = !0), console.log("Browser: IE"))
                            : -1 < a.indexOf("mozilla/5.0") && -1 < a.indexOf("android") && -1 < a.indexOf("applewebkit") && -1 == a.indexOf("chrome")
                            ? ((d.globalVars.isAndroid = !0), console.log("Browser: Android"), 0 <= a.indexOf("ut880") && ((d.globalVars.IsUT880 = !0), console.log("Device is UT880")))
                            : 0 <= a.indexOf("firefox")
                            ? ((d.globalVars.isFireFox = !0), console.log("Browser: Firefox"))
                            : 0 <= a.indexOf("safari")
                            ? 0 <= a.indexOf("chrome")
                                ? ((d.globalVars.isChrome = !0), (d.globalVars.ShowHTTPChromeWarning = "https:" !== g.location.protocol), console.log("Browser: Chrome, ShowHTTPChromeWarning", d.globalVars.ShowHTTPChromeWarning))
                                : ((d.globalVars.isSafari = !0), console.log("Browser: Safari"))
                            : -1 !== a.indexOf("opera")
                            ? ((d.globalVars.isOpera = !0), console.log("Browser: Opera"))
                            : (console.log("Browser: * Unknown *"), (c.supportedBrowser = !1), $.unsupportedFeatures.push("Warning: your experience with this application may not be ideal since this is an unsupported browser.")),
                        c.supportedBrowser)
                    ) {
                        if (d.globalVars.isIE) {
                            var r;
                            (r = (a = navigator.userAgent).match(/.+MSIE\s(\d+\.\d).+/)) && 2 == r.length
                                ? (e = parseFloat(r[1]))
                                : (r = a.match(/.+Trident\/(\d+\.\d).+/)) && 2 == r.length
                                ? (e = 7 == (e = Math.floor(parseFloat(r[1]))) ? 11 : 6 == e ? 10 : 9)
                                : (r = a.match(/.+Edge\/(\d+\.\d)/)) && 2 == r.length
                                ? ((e = parseFloat(r[1])), (d.globalVars.isIE = !1))
                                : (e = 5.5);
                        } else {
                            var i,
                                s = navigator.appName,
                                l = (a = navigator.userAgent).match(/(opera|chrome|safari|firefox|msie|trident)\/?\s*(\.?\d+(\.\d+)*)/i);
                            l && null != (i = a.match(/version\/([\.\d]+)/i)) && (l[2] = i[1]),
                                (l = l ? [l[1], l[2]] : [s, navigator.appVersion, "-?"]),
                                console.log(JSON.stringify(l)),
                                (e = 1 == (e = l[1].split(".")).length ? parseInt(e[0]) : parseFloat(e[0] + "." + e[1]));
                        }
                        console.log("Browser version: " + e),
                            (d.globalVars.browserVersion = e),
                            (c.supportedBrowserVersion = !1),
                            d.globalVars.isEdge
                                ? (c.supportedBrowserVersion = !0)
                                : d.globalVars.isIE && 11 <= e
                                ? (c.supportedBrowserVersion = !0)
                                : d.globalVars.isFireFox && 31 <= e
                                ? (c.supportedBrowserVersion = !0)
                                : d.globalVars.isSafari && 7 <= e
                                ? (c.supportedBrowserVersion = !0)
                                : d.globalVars.isChrome && 31 <= e
                                ? (c.supportedBrowserVersion = !0)
                                : d.globalVars.isAndroid && 4.4 <= e
                                ? (c.supportedBrowserVersion = !0)
                                : $.unsupportedFeatures.push("Warning: it is recommended that you upgrade to a more recent version of your browser.");
                    }
                    if (((c.browserSupports.LOCAL_STORAGE = "undefined" != typeof Storage), c.browserSupports.LOCAL_STORAGE))
                        try {
                            localStorage.setItem("localTest", "123"), localStorage.removeItem("localTest"), (c.browserSupports.LOCAL_STORAGE_RW = !0);
                        } catch (e) {
                            (c.browserSupports.LOCAL_STORAGE_RW = !1), $.unsupportedFeatures.push("Storage is supported by this browser; however, it is currently full or writes are disabled (i.e., use Private or Incognito session)");
                        }
                    else $.unsupportedFeatures.push("Storage is not supported in this browser.  Your preferences cannot be saved for future use.");
                    (c.browserSupports.AUDIO = null !== window.Audio),
                        c.browserSupports.AUDIO || $.unsupportedFeatures.push("Audio is not supported in this browser."),
                        (c.browserSupports.VIDEO = null !== window.Video),
                        c.browserSupports.VIDEO || $.unsupportedFeatures.push("Video is not supported in this browser."),
                        (c.browserSupports.FILE_READER = "undefined" != typeof FileReader),
                        c.browserSupports.FILE_READER || $.unsupportedFeatures.push("File API is not supported by this browser which means that some features will not work like changing your profile photo."),
                        (c.browserSupports.NOTIFICATIONS = angular.isDefined(g.Notification)),
                        c.browserSupports.NOTIFICATIONS || d.globalVars.IsUT880 || $.unsupportedFeatures.push("Notifications API is not supported by this browser.  Alerts for incoming calls or chats will be limited."),
                        console.log("supportedBrowser=" + c.supportedBrowser),
                        console.log("supportedBrowserVersion=" + c.supportedBrowserVersion),
                        console.log("browserSupports=" + JSON.stringify(c.browserSupports)),
                        console.log("unsupportedFeatures=" + JSON.stringify($.unsupportedFeatures));
                })(),
                i.initialize_I18N().then(
                    function (e) {
                        F();
                    },
                    function (e) {
                        F();
                    }
                );
        }
        angular.module("LoginModule", ["UserBulletin"]).controller("LoginCtrl", e),
            (e.$inject = [
                "$AgentUtils",
                "$scope",
                "$rootScope",
                "$Authentication",
                "$Global",
                "$http",
                "$filter",
                "$window",
                "$state",
                "$q",
                "$cookies",
                "$location",
                "$timeout",
                "$notification",
                "HttpService",
                "ChatService",
                "GetUsersService",
                "$Presence",
                "UCLocaleService",
                "UCStorageService",
                "CurrentUser",
                "Contacts",
                "$Utilities",
                "AudioService",
                "$confirmControlExtensionModalService",
                "$mobileDeviceDetectedModalService",
                "$presenceLoginWarningModalService",
                "$Agent",
                "ProfileService",
                "$AppMain",
                "$ServerEvents",
                "$ServerEventsCP",
                "$UCVideo",
                "$ContactsNew",
                "$UserBulletin",
            ]);
    })(),
    (function () {
        "use strict";
        function e(e) {
            e.state("app", { url: "/app", views: { appView: { templateUrl: "app-components/appMain.html", controller: "AppMainCtrl as appMainCtrl" } } });
        }
        function t(s, a, l, e, n, o, r, i, c, d, u, g, f, p, t, m, b, h, C, v, S, y, D, I) {
            var w,
                P,
                T = {
                    applyLicensing: function () {
                        (s.globalVars.Settings.ShowHidden = s.globalVars.Settings.ShowHidden && s.globalVars.IsAttendant),
                            (s.globalVars.Settings.EnableAgent = s.globalVars.Settings.EnableAgent && s.globalVars.IsAgent && !s.globalVars.IsSLTPhone && !s.globalVars.IsMobile && !s.globalVars.Settings.Is4xxDevice),
                            (s.globalVars.Settings.EnableCallPark = s.globalVars.Settings.EnableCallPark && !s.globalVars.IsSLTPhone && !s.globalVars.IsMobile && !s.globalVars.Settings.Is4xxDevice),
                            (s.globalVars.Settings.EnableSwitchOnDID = s.globalVars.Settings.EnableSwitchOnDID && s.globalVars.IsAttendant && !s.globalVars.IsMobile && !s.globalVars.Settings.Is4xxDevice),
                            (s.globalVars.Settings.EnablePaging = s.globalVars.Settings.EnablePaging && !s.globalVars.IsMobile && !s.globalVars.IsSLTPhone && !s.globalVars.Settings.Is4xxDevice),
                            (s.globalVars.Settings.EnableParkMonitor =
                                s.globalVars.Settings.EnableParkMonitor && (s.globalVars.IsAdvancedUser || s.globalVars.IsAttendant) && !s.globalVars.IsSLTPhone && !s.globalVars.IsMobile && !s.globalVars.Settings.Is4xxDevice),
                            (s.globalVars.Settings.EnableValet =
                                s.globalVars.Settings.EnableValet && (s.globalVars.IsAdvancedUser || s.globalVars.IsAttendant) && !s.globalVars.IsSLTPhone && !s.globalVars.IsMobile && !s.globalVars.Settings.Is4xxDevice),
                            (s.globalVars.Settings.EnableDialer = s.globalVars.Settings.EnableDialer && !s.globalVars.Settings.Is4xxDevice),
                            (s.globalVars.OutlookContacts = s.globalVars.OutlookContacts && (s.globalVars.IsAdvancedUser || s.globalVars.IsAttendant));
                    },
                    applyProfileSettings: function () {
                        var o = d.defer(),
                            r = s.globalVars.ExtendedProperties.ucProfile;
                        if (!r) return o.resolve(!1), o.promise;
                        return (
                            c.get("/api/siteSettings/ucProfiles").then(
                                function (e) {
                                    try {
                                        var t = e.data;
                                        if (!t) {
                                            console.warn("No profiles created in Admin, yet user assigned profile", s.globalVars.ExtendedProperties.ucProfile);
                                            var a = "#DEFAULT" === s.globalVars.ExtendedProperties.ucProfile ? h.getPhrase("Default") : s.globalVars.ExtendedProperties.ucProfile;
                                            return T.showToast("warning", h.getPhrase("UCProfileNotFound", a)), void o.resolve(!1);
                                        }
                                        var n = JSON.parse(t).find(function (e) {
                                            return "#DEFAULT" === r ? e.isDefault : r === e.name;
                                        });
                                        n
                                            ? (console.info("Apply User Settings from profile", r), angular.extend(s.globalVars.Settings, n.settings), o.resolve(!0))
                                            : (console.error("Could not find UC profile", s.globalVars.ExtendedProperties.ucProfile),
                                              T.showToast("warning", h.getPhrase("UCProfileNotFound", s.globalVars.ExtendedProperties.ucProfile)),
                                              o.resolve(!1));
                                    } catch (e) {
                                        console.error("handling profiles", e), T.showToast("error", h.getPhrase("UCProfileReadError", e.status)), o.resolve(!1);
                                    }
                                },
                                function (e) {
                                    console.error("GET ucProfiles", e), T.showToast("error", h.getPhrase("UCProfileReadError", e.status)), o.resolve(!1);
                                }
                            ),
                            o.promise
                        );
                    },
                    clearToasts: function () {
                        S.clear();
                    },
                    doDigest: function () {
                        w ||
                            ((w = !0),
                            r(
                                function () {
                                    s.$applyAsync(), (w = !1);
                                },
                                s.globalVars.WindowIsActive && s.onHomePage ? 250 : 5e3,
                                !1
                            ));
                    },
                    doLogout: function (e, t) {
                        if (((s.globalVars.loggingOut = !0), preventPageChange(null), sessionStorage.setItem("LoggingOutLock", !0), s.globalVars.IsGoogleIntegration))
                            try {
                                gapi.auth2.getAuthInstance().signOut();
                            } catch (e) {
                                console.error("google signout");
                            }
                        p.setLoginError(e || ""),
                            (function () {
                                try {
                                    o.cancel(P);
                                } catch (e) {
                                    console.log("exception closing timers");
                                } finally {
                                    P = void 0;
                                }
                            })(),
                            m.reset(),
                            sessionStorage.removeItem("sessionID"),
                            g.logout().then(
                                function (e) {
                                    b.close(), T.resetVariables(), f.writeLocalStorage("loggedOut_uc", !0), A();
                                },
                                function (e) {
                                    b.close(), T.resetVariables(), A(), console.log("User: unsuccessful logout"), console.log("User failed logout, HTTP status " + status), f.writeLocalStorage("loggedOut_uc", !0);
                                }
                            ),
                            b.open(h.getPhrase("Logout.SigningOut", t));
                    },
                    goToBuddyListName: function (e, t) {
                        if (e) {
                            var a = u.getBuddyList(e);
                            if (a) T.setBuddyList(a);
                            else {
                                var n = u.getCurrentBuddyList();
                                T.setBuddyList(n);
                            }
                        }
                        s.onHomePage || T.goToHomePage();
                    },
                    filterTextChanged: function () {
                        s.showHomePageContactsSearch = s.onHomePage && s.globalVars.Settings.EnableSearchBarForContacts && T.filterText && 2 <= T.filterText.length;
                        var e = i("filterByNameAndExtension")(T.data.buddyListMembers, T.filterText);
                        e = i("orderBy")(e, ["name", "extension"]);
                        var t = u.getUser(),
                            a = e.indexOf(t);
                        0 <= a && (e.splice(a, 1), e.unshift(t));
                        T.data.blfUsersArray = e;
                    },
                    goToHomePage: function () {
                        if (!g.isLoggedIn) return !1;
                        n.go("app.home");
                    },
                    resetVariables: function () {
                        (s.globalVars.autoLoginFailure = !1),
                            (s.globalVars.deviceWidth = l.screen.width),
                            console.log("Device width=" + l.screen.width + " height=" + l.screen.height),
                            console.log("Window width=" + l.innerWidth + " height=" + l.innerHeight),
                            (s.globalVars.loggingOut = !1),
                            (s.globalVars.Settings.DialerCollapsed = s.globalVars.IsUT880),
                            (s.globalVars.Settings.EnableEmailSend = !s.globalVars.IsUT880),
                            (T.selectedTab = "home"),
                            T.setWindowTitle(),
                            (g.isLoggedIn = !1),
                            u.initBuddyLists(),
                            (s.globalVars.MissedCalls = 0),
                            (s.globalVars.WindowIsActive = !0),
                            (s.globalVars.WindowIsInFocus = !0),
                            (s.globalVars.loginInProgress = !1),
                            (s.globalVars.gettingStatusInformation = !1),
                            (s.globalVars.IsCallProcessingAvailable = !1),
                            (s.globalVars.EventMonitorOpen = !1),
                            (s.globalVars.DeviceOpen = !1),
                            (s.globalVars.MonitoringCalls = !1),
                            (s.globalVars.CallControlLicenseAvailable = !1),
                            (s.globalVars.searchText = ""),
                            (s.globalVars.NotificationsAvailable = !1),
                            (s.globalVars.refreshContacts = !1),
                            (s.globalVars.MultiDevRinging = null),
                            (s.globalVars.NightMode = 1),
                            (T.data = {}),
                            (T.data.parksToMonitorStatus = void 0),
                            (T.data.open = {}),
                            (T.data.numUnreadChats = 0),
                            (T.data.blfUsersArray = []),
                            (T.data.buddyListMembers = []),
                            (T.data.buddyListName = ""),
                            (s.globalVars.CanChat = !1),
                            (s.globalVars.CanEditContacts = !1),
                            (s.globalVars.CanEditPresence = !1),
                            (s.globalVars.CanSeeBlfDetails = !1),
                            (s.globalVars.CanBarge = !1),
                            (s.globalVars.CanSetNight = !1),
                            (s.globalVars.CanPickup = !1),
                            (s.globalVars.HasHeadset = !1),
                            (s.globalVars.newChatAlert = !1),
                            (s.globalVars.currentDirectoryObj = null),
                            (s.globalVars.ParkedCallStatus = {}),
                            M();
                    },
                    setBuddyList: function (e) {
                        (T.data.buddyListMembers = []), (T.data.buddyListName = e.name), (T.data.buddyListMembersHash = {}), u.setBuddyList(e);
                        var n = v.getUsersHash();
                        angular.forEach(e.list, function (e, t) {
                            var a = n[e];
                            angular.isDefined(a) && (T.data.buddyListMembers.push(a), (T.data.buddyListMembersHash[e] = !0));
                        }),
                            T.filterTextChanged();
                    },
                    setFilterText: function (e) {
                        T.filterText = e;
                    },
                    setNightMode: function t(a) {
                        if (1 <= a)
                            c.post("/ucapi/device/SetNightMode", { number: a }).then(
                                function (e) {
                                    console.log("SetNightMode data=", e.data), (s.globalVars.NightMode = a);
                                },
                                function (e) {
                                    console.error("SetNightMode", e), T.showToast("error", $scope.getLocalPhrase("NightMode.update.error"));
                                }
                            );
                        else if (-1 == a) {
                            var e = D.open();
                            e.result.then(function (e) {
                                t(e.data.nightMode);
                            });
                        }
                    },
                    setParksToMonitor: function () {
                        var t = [];
                        angular.forEach(s.globalVars.Settings.ParksToMonitor, function (e) {
                            t.push({ IsOccupied: !1, Orbit: e, Parker: null, CallerID: null, CallerName: null, startTime: 0 });
                        }),
                            (s.globalVars.parksToMonitorStatus = t),
                            (s.globalVars.ParkedCallStatus = {}),
                            M(),
                            c.post("/ucapi/device/GetUsedOrbits", {}).then(
                                function (e) {
                                    console.log("GetUsedOrbits data=" + JSON.stringify(e.data)),
                                        angular.forEach(e.data.Data, function (e) {
                                            $AppMain.updateParkMonitor(e);
                                        });
                                },
                                function (e) {
                                    console.error("GetUsedOrbits", e);
                                }
                            );
                    },
                    setWindowTitle: function (e) {
                        var t = "Kopetro Softphone";
                        e && (t += " (" + e + ")");
                        a.prop("title", t);
                    },
                    showDefaultBuddyList: function () {
                        var e;
                        0 == u.getBuddyLists().length ? (e = V()) : null === (e = u.getCurrentBuddyList()) && (e = u.getBuddyLists()[0]);
                        if ((T.setBuddyList(e), 0 == e.list.length && !s.globalVars.Settings.HideEmptyBuddyListWarning)) {
                            var t = I.show();
                            t.result.then(function (e) {
                                e.goToEditPersonalBuddyList && n.go("app.buddyList", { name: "PERSONAL" }), e.doNotShowAgain && ((s.globalVars.Settings.HideEmptyBuddyListWarning = !0), f.flushAllLocalApplicationSettings());
                            });
                        }
                        T.goToHomePage();
                    },
                };
            return (
                (T.showToast = O),
                (T.startTimers = function () {
                    U();
                }),
                (T.toggleAnswerMode = function () {
                    (s.globalVars.UsingHeadset = !s.globalVars.UsingHeadset), T.useHeadsetChanged();
                }),
                (T.useHeadsetChanged = function () {
                    var t = s.globalVars.UsingHeadset;
                    c.post("/ucapi/device/AutoHeadset", { headset: t }).then(
                        function (e) {
                            console.log("setHeadset: " + t + " success");
                        },
                        function (e) {}
                    );
                }),
                (T.windowUpdated = function (e, t) {
                    if (!g.isLoggedIn) return;
                    var a = 50,
                        n = angular.element(".rp-fixed-top");
                    n && n.length
                        ? (s.globalVars.IsUT880 ? (T.rpMarginTop = { top: n[0].offsetHeight + 50 + "px" }) : (T.rpMarginTop = { "margin-top": n[0].offsetHeight + 50 + "px", "margin-bottom": "200px" }), (a += n[0].offsetHeight))
                        : s.globalVars.IsUT880
                        ? (T.rpMarginTop = { height: 0, top: "55px" })
                        : (T.rpMarginTop = { height: 0, "margin-top": a + "px", "margin-bottom": "200px" });
                    var o = angular.element("#idUCSuiteMain")[0].offsetTop,
                        r = angular.element("#idUCSuiteFooter"),
                        i = r[0] ? r[0].offsetHeight : 0;
                    (s.ChatWindowHeight = l.innerHeight - o - i - 10),
                        (s.CallHistoryHeight = l.innerHeight - i - 200),
                        (s.DirectoryCompanyHeight = l.innerHeight - a - i - 160),
                        (s.ContactsSearchHeight = Math.trunc(0.5 * (l.innerHeight - a - 80)) + 20 + "px");
                }),
                (T.resetChatAlert = function () {
                    s.globalVars.newChatAlert = !1;
                }),
                (T.goToEmployeeDetail = function (e) {
                    n.go("app.employee", { id: e });
                }),
                (T.isLoggedInUser = function (e) {
                    var t = u.getUser();
                    return e === t;
                }),
                (T.updateParkMonitor = function (e) {
                    var t = T.findParkedCall(e.Orbit);
                    if (t) {
                        (t.IsOccupied = e.IsOccupied),
                            (t.Parker = e.Parker),
                            (t.IsInbound = e.CallDetails.IsInbound),
                            (t.CallerID = e.CallDetails.CallerID),
                            (t.CallerName = e.CallDetails.CallerName),
                            (t.startTime = new Date().getTime()),
                            (t.startTime = Math.floor(t.startTime / 1e3));
                        var a = N(e.CallDetails.Duration);
                        t.startTime -= a;
                    }
                    e.IsOccupied ? (s.globalVars.ParkedCallStatus[e.Orbit] = e) : delete s.globalVars.ParkedCallStatus[e.Orbit];
                    M();
                }),
                (T.findParkedCall = function (e) {
                    for (var t = 0; t < s.globalVars.parksToMonitorStatus.length; t++) {
                        var a = s.globalVars.parksToMonitorStatus[t];
                        if (a.Orbit == e) return a;
                    }
                    return null;
                }),
                (T.parseDuration = N),
                (T.initializeChoices = function () {
                    (s.globalVars.directoryOptions = [
                        { label: h.getPhrase("Company"), url: "directory", type: "Internal" },
                        { label: h.getPhrase("Business"), url: "directory/contacts", type: "External" },
                        { label: h.getPhrase("Personal"), url: "directory/personal", type: "Personal" },
                    ]),
                        s.globalVars.HasOffice365 && s.globalVars.directoryOptions.push({ label: h.getPhrase("O365"), url: "directory/o365", type: "O365" });
                    (s.globalVars.PageZonesInternal = []),
                        (s.globalVars.PageZonesExternal = []),
                        (s.globalVars.PageZonesCombined = []),
                        c.post("/ucapi/device/GetPageZones", {}).then(
                            function (e) {
                                console.log("GetPageZones success");
                                var t = i("orderBy")(e.data.Data, "Zone");
                                angular.forEach(t, function (e, t) {
                                    var a;
                                    (a = 0 === t ? h.getPhrase("PageAll") : h.getPhrase("Internal") + " " + e.Zone), s.globalVars.PageZonesInternal.push({ mode: "Internal", number: e.Zone, label: a });
                                });
                                for (var a = 1; a <= 8; a++)
                                    s.globalVars.PageZonesExternal.push({ mode: "External", number: a, label: h.getPhrase("External") + " " + a }),
                                        s.globalVars.PageZonesCombined.push({ mode: "Combined", number: a, label: h.getPhrase("Combined") + " " + a });
                            },
                            function (e) {}
                        );
                }),
                (T.setCallProcessingAvailable = function () {
                    if (
                        ((s.globalVars.IsCallProcessingAvailable =
                            "USE_APP_CP" === s.globalVars.Settings.CP_Mode && s.globalVars.CallControlLicenseAvailable && s.globalVars.MonitoringCalls && s.globalVars.EventMonitorOpen && s.globalVars.DeviceOpen),
                        !s.globalVars.IsCallProcessingAvailable)
                    )
                        return (
                            console.log("* Call processing is unavailable"),
                            "USE_APP_CP" !== s.globalVars.Settings.CP_Mode && console.log("Needs CP_Mode"),
                            s.globalVars.CallControlLicenseAvailable || console.log("Needs CallControlLicenseAvailable"),
                            s.globalVars.MonitoringCalls || console.log("Needs MonitoringCalls"),
                            s.globalVars.EventMonitorOpen || console.log("Needs EventMonitorOpen"),
                            void (s.globalVars.DeviceOpen || console.log("Needs DeviceOpen"))
                        );
                    return console.log("** Call processing is available"), !0;
                }),
                (T.setNumberParkedCalls = M),
                (T.setupVideo = function (e) {
                    var t = d.defer();
                    (s.globalVars.supportsWebRTC = !1),
                        e &&
                            s.globalVars.IsAdvancedUser &&
                            ((s.globalVars.supportsWebRTC = s.globalVars.BrowserWebRTCCapable),
                            "https:" !== l.location.protocol && s.globalVars.isChrome && 46 < s.globalVars.browserVersion
                                ? (console.warn("Chrome 46 and later cannot use WebRTC unless using SSL"),
                                  S.pop("warning", "Video not supported", "This version of Chrome requires a HTTPS connection for WebRTC video to be functional.", 5e3, "trustedHtml"),
                                  (s.globalVars.supportsWebRTC = !1))
                                : s.globalVars.supportsWebRTC
                                ? console.info("Browser is WebRTC capable.")
                                : (S.pop(
                                      "warning",
                                      "Video not supported",
                                      "Video chat is not available with this browser.  The following browsers support video chat:<br/>Firefox version 43 or later<br/> and Chrome versions 45 or later.",
                                      8e3,
                                      "trustedHtml"
                                  ),
                                  (s.globalVars.supportsWebRTC = !1)));
                    var a = s.globalVars.supportsWebRTC;
                    return (
                        c.post("/ucapi/rtc/Allowed", { allowed: a }).then(
                            function (e) {
                                console.info("Set WebRTC allowed:", a), t.resolve(e);
                            },
                            function (e) {
                                t.reject(e), console.error("Allowed", e);
                            }
                        ),
                        t.promise
                    );
                }),
                (T.createPersonalBuddyList = V),
                (T.showStickyToast = function (e, t, a, n, o) {
                    return O(e, t, a, 0, n, o);
                }),
                (T.data = {}),
                (T.selectedTab = void 0),
                (T.rpMarginTop = void 0),
                (T.filterText = void 0),
                (T.userInitialized = void 0),
                T
            );
            function A() {
                (g.isLoggedIn = !1), n.go("login"), e.replace(), e.path(""), l.location.reload();
            }
            function M() {
                s.globalVars.NumberParkedCalls = Object.keys(s.globalVars.ParkedCallStatus).length;
            }
            function N(e) {
                if (angular.isDefined(e)) {
                    var t = e.split(":");
                    if (t) return 3 == t.length ? 60 * parseInt(t[0]) * 60 + 60 * parseInt(t[1]) + parseInt(t[2]) : 2 == t.length ? 60 * parseInt(t[0]) + parseInt(t[1]) : parseInt(t[0]);
                }
                return 0;
            }
            function O(e, t, a, n, o, r) {
                e = e || "success";
                t && !a && ((a = t), (t = "")), S.pop(e, t, a, n, o, r);
            }
            function V() {
                var e = { ID: "PERSONAL" };
                return (e.name = h.getPhrase("Personal")), (e.list = []), u.addBuddyList(e), e;
            }
            function L(e) {
                T.showToast("error", h.getPhrase(e)),
                    r(function () {
                        T.doLogout(e);
                    }, 1500);
            }
            function E(e) {
                if ((console.log("token validation", e), 401 === e.status)) {
                    var t = e.headers();
                    if ((8 === e.Code && "Stolen" === e.Message) || (t && "Stolen" === t.errorcode)) return void L("Login.error.401.Stolen");
                    L("Logout.error.Inactivity");
                }
            }
            function U() {
                P = o(
                    function () {
                        c.post("/ucapi/cti/ValidateToken", { mode: "uc", session: g.sessionID }, { timeout: 2e3 }).then(
                            function (e) {},
                            function (e) {
                                console.log("keepAliveTimer failed, status", e.status),
                                    e.status <= 0
                                        ? (o.cancel(P),
                                          (function t(a, e) {
                                              angular.isDefined(e) || (e = 500),
                                                  r(
                                                      function () {
                                                          c.post("/ucapi/cti/ValidateToken", { mode: "uc", session: g.sessionID }, { timeout: 2e3 }).then(
                                                              function (e) {
                                                                  console.log("keepAliveTimer retry %d succeeded", a), U();
                                                              },
                                                              function (e) {
                                                                  a++,
                                                                      console.log("keepAliveTimer retry %d failed, reason=%s", a, e.code),
                                                                      e.status <= 0 ? (5 < a ? (console.log("keepAliveTimer retries failed, auto logging out"), L("Logout.error.LostConnectivity")) : t(a, 500 * a)) : E(e);
                                                              }
                                                          );
                                                      },
                                                      e,
                                                      !1
                                                  );
                                          })(0))
                                        : E(e);
                            }
                        );
                    },
                    6e4,
                    0,
                    !1
                );
            }
        }
        angular
            .module("AppMainModule", ["ServerEventsModule", "ServerEventsCPModule", "GlobalModule", "UtilitiesModule"])
            .constant("tabActiveClass", "active")
            .factory("$AppMain", t)
            .config(e)
            .run(["formlyConfig", function (e) {}]),
            (e.$inject = ["$stateProvider"]),
            (t.$inject = [
                "$rootScope",
                "$document",
                "$window",
                "$location",
                "$state",
                "$interval",
                "$timeout",
                "$filter",
                "$http",
                "$q",
                "CurrentUser",
                "$Authentication",
                "UCStorageService",
                "$Global",
                "Calls",
                "AudioService",
                "$busyInfoModalService",
                "UCLocaleService",
                "$Utilities",
                "GetUsersService",
                "toaster",
                "UCServices",
                "$SetNightModeModal",
                "$emptyBuddyListModalService",
            ]);
    })(),
    (function () {
        "use strict";
        function e(e, u, o, g, t, a, n, f, r, i, p, s, l, m, b, c, d, h, C, v, S, y, D, I, w, P, T, A, M, N, O, V, L, E, U, $, x) {
            var j = this;
            function R(a) {
                S.globalVars.Settings.PromptOnSignout && "InTheOffice" === j.user.presence.status
                    ? I.open().result.then(function (e) {
                          if (((S.globalVars.Settings.LastLogoutStatus = e.data), b.saveUserSettings(), "NO_UPDATE" === e.data.option))
                              e.data.doNotShowAgain && ((S.globalVars.Settings.PromptOnSignout = !1), b.saveUserSettings()), g.doLogout(a);
                          else if (e.data.profile) {
                              var t = v.findProfile(e.data.profile);
                              t &&
                                  C.setPresenceUsingProfile(t).then(function (e) {
                                      g.doLogout(a);
                                  });
                          } else
                              e.data.status &&
                                  C.setPresenceToStatus(e.data.status).then(
                                      function (e) {
                                          g.doLogout(a);
                                      },
                                      function (e) {}
                                  );
                      })
                    : g.doLogout(a);
            }
            (j.user = void 0),
                (j.extension = void 0),
                (j.filterText = void 0),
                (j.logout = function (t) {
                    try {
                        if (o.numIncompleteOptionalTallyCode || o.numIncompleteRequiredTallyCode) {
                            var e,
                                a = "";
                            0 < o.numIncompleteOptionalTallyCode && ((e = "OK_CANCEL"), (a += O.getPhrase("IncompleteOptionalTallyCodes.body", [o.numIncompleteOptionalTallyCode]))),
                                0 < o.numIncompleteRequiredTallyCode
                                    ? ((e = "OK"), a && (a += "<br/><br/>"), (a += O.getPhrase("IncompleteRequiredTallyCodes.body", [o.numIncompleteRequiredTallyCode])))
                                    : ((a += "<br/><br/>"), (a += O.getPhrase("ClickOkToContinueLogout"))),
                                n.open(O.getPhrase("IncompleteTallyCodes.title"), a, e, "lg").result.then(function (e) {
                                    e && (o.numIncompleteRequiredTallyCode || R(t));
                                });
                        } else R(t);
                    } catch (e) {
                        g.doLogout(t);
                    }
                }),
                (j.showAbout = function () {
                    e.open(s.version()).result.then(function () {});
                }),
                (j.showHelp = function () {
                    l.open(s.locale).result.then(function () {});
                }),
                (j.getBuddyLists = function () {
                    return r.getBuddyLists();
                }),
                (j.getBuddyListMenuLabel = function () {
                    return S.globalVars.IsAttendant ? O.getPhrase("Menu.BuddyLists") : O.getPhrase("Menu.BuddyList");
                }),
                (j.editBuddyListClicked = function () {
                    S.globalVars.IsAttendant || S.globalVars.IsAdvancedUser ? T.go("app.buddyLists") : (r.getBuddyList("PERSONAL") || g.createPersonalBuddyList(), T.go("app.buddyList", { name: "PERSONAL" }));
                }),
                (j.goToBuddyListName = function (e, t) {
                    g.goToBuddyListName(e), t && y.setTabClass("home");
                }),
                (j.filterTextChanged = function () {
                    g.setFilterText(j.filterText);
                }),
                (j.updateContactFilter = function () {
                    E.open().result.then(
                        function (e) {
                            f.setContactFilter(e);
                        },
                        function (e) {}
                    );
                }),
                (j.showModalDial = function () {
                    if (!S.globalVars.IsCallProcessingAvailable) return console.log("dialing is unavailable since call processing is unavailable"), !1;
                    i.open();
                }),
                (j.showTestDriver = function () {
                    M.open();
                }),
                (j.startVideoConf = function () {
                    L.numConnections
                        ? n.open("Video Call Error", "Feature is not available while there is a video chat in progress.", "OK")
                        : $.open().result.then(function (e) {
                              console.log("Invite", e);
                          });
                }),
                (j.page = function (a) {
                    (console.log("page " + angular.toJson(a)), -1 != a)
                        ? m.post("/ucapi/device/Page", { mode: a.mode, number: a.number }).then(
                              function (e) {
                                  for (var t = 0; t < S.globalVars.Settings.Paging.History.length; t++)
                                      if (a.mode == S.globalVars.Settings.Paging.History[t].mode && a.number == S.globalVars.Settings.Paging.History[t].number) {
                                          S.globalVars.Settings.Paging.History.splice(t, 1);
                                          break;
                                      }
                                  (S.globalVars.Settings.Paging.LastPage = a),
                                      (S.globalVars.Settings.Paging[a.mode] = a),
                                      S.globalVars.Settings.Paging.History.unshift(a),
                                      4 < S.globalVars.Settings.Paging.History.length && S.globalVars.Settings.Paging.History.pop(),
                                      V.flushAllLocalApplicationSettings();
                              },
                              function (e) {
                                  g.showToast("error", y.getLocalPhrase("Page.update.error"));
                              }
                          )
                        : d.open().result.then(function (e) {
                              j.page(e.pageObj);
                          });
                }),
                (j.launchPhonePro = function () {
                    x.open(S.globalVars.PhoneProURL, "_blank");
                }),
                (y.turnOffParkMonitoring = function () {
                    (S.globalVars.Settings.EnableParkMonitor = !1),
                        N(
                            function () {
                                g.windowUpdated();
                            },
                            250,
                            !1
                        );
                }),
                (j.unparkCall = function (e) {
                    m.post("/ucapi/device/Unpark", { orbit: e }).then(
                        function (e) {},
                        function (e) {}
                    );
                }),
                (j.parkCall = function (a) {
                    var e = j.callsToPark();
                    0 != e.length &&
                        (a < 0
                            ? h.open(e[0], S.globalVars.ParkedCallStatus).result.then(function (e) {
                                  j.parkCall(e.orbit);
                              })
                            : m.post("/ucapi/device/Park", { orbit: a }).then(
                                  function (e) {
                                      var t = S.globalVars.Settings.HistoryCallParks.indexOf(a);
                                      0 <= t && S.globalVars.Settings.HistoryCallParks.splice(t, 1),
                                          S.globalVars.Settings.HistoryCallParks.unshift(a),
                                          4 < S.globalVars.Settings.HistoryCallParks.length && S.globalVars.Settings.HistoryCallParks.pop(),
                                          V.flushAllLocalApplicationSettings();
                                  },
                                  function (e) {}
                              ));
                }),
                (j.togglePark = function (e) {
                    e.IsOccupied ? j.unparkCall(e.Orbit) : j.parkCall(e.Orbit);
                }),
                (j.callsToPark = function () {
                    var e = t.getActiveCalls();
                    return e.length
                        ? e.filter(function (e) {
                              return "Connected" === e.state;
                          })
                        : [];
                }),
                (j.doValet = function () {
                    t.getActiveCalls().length &&
                        m.post("/ucapi/device/Park", { orbit: "" }).then(
                            function (e) {},
                            function (e) {}
                        );
                }),
                (j.toggleAnswerMode = function () {
                    return g.toggleAnswerMode();
                }),
                (j.launchSettings = function () {
                    w.open(r.getUser(), S.globalVars.Settings, !1).result.then(function (e) {
                        S.globalVars.Settings.ConsoleLogging && !e.data.settings.ConsoleLogging
                            ? (S.setConsoleLoggingMode(!1), (S.globalVars.Settings.DebugLogging = !1))
                            : !S.globalVars.Settings.ConsoleLogging && e.data.settings.ConsoleLogging && S.setConsoleLoggingMode(!0),
                            S.globalVars.Settings.DebugLogging && !e.data.settings.DebugLogging ? S.setDebugMode(!1) : !S.globalVars.Settings.DebugLogging && e.data.settings.DebugLogging && S.setDebugMode(!0);
                        var t =
                                S.globalVars.Settings.EnableEmailSend !== e.data.settings.EnableEmailSend ||
                                S.globalVars.Settings.NameDisplayPreference !== e.data.settings.NameDisplayPreference ||
                                S.globalVars.Settings.HomePageDisplaySetting !== e.data.settings.HomePageDisplaySetting ||
                                S.globalVars.Settings.AdvancedHomePage !== e.data.settings.AdvancedHomePage ||
                                S.globalVars.Settings.AddExtension !== e.data.settings.AddExtension,
                            a =
                                S.globalVars.Settings.HideOfflineUsers !== e.data.settings.HideOfflineUsers ||
                                S.globalVars.Settings.NameDisplayPreference !== e.data.settings.NameDisplayPreference ||
                                S.globalVars.Settings.EnableSearchBarForContacts !== e.data.settings.EnableSearchBarForContacts,
                            n = !1;
                        S.globalVars.Settings.NameDisplayPreference !== e.data.settings.NameDisplayPreference &&
                            ((S.globalVars.Settings.NameDisplayPreference = e.data.settings.NameDisplayPreference),
                            angular.forEach(p.getUsers(), function (e, t) {
                                (e.name = null), p.massageInternalContact(e);
                            }),
                            (n = !0));
                        var o,
                            r = e.data.settings.CP_Mode !== S.globalVars.Settings.CP_Mode,
                            i = e.data.settings.Is4xxDevice !== S.globalVars.Settings.Is4xxDevice,
                            s = e.data.settings.EnableIgnoreIncomingThatDoNotAlert !== S.globalVars.Settings.EnableIgnoreIncomingThatDoNotAlert,
                            l = e.data.settings.EnableVideo !== S.globalVars.Settings.EnableVideo;
                        (angular.extend(S.globalVars.Settings, e.data.settings),
                        b.saveUserSettings(),
                        u.setQueueMonitorConfig({ queues: S.globalVars.Settings.QueuesToMonitor, thresholds: S.globalVars.Settings.QueueMonitor }),
                        u.setAgentsToMonitor(S.globalVars.Settings.AgentsToMonitor),
                        s &&
                            (console.log("Update EnableIgnoreIncomingThatDoNotAlert setting", !e.data.settings.EnableIgnoreIncomingThatDoNotAlert),
                            m.post("/ucapi/device/ShowAllInbound", { show: !e.data.settings.EnableIgnoreIncomingThatDoNotAlert }).then(
                                function (e) {
                                    console.log("ShowAllInbound success");
                                },
                                function (e) {
                                    console.error("ShowAllInbound error", e);
                                }
                            )),
                        g.setParksToMonitor(),
                        r
                            ? (g.showToast("info", "Call Handling Preference has been updated.  Logging out to activate the change."),
                              N(function () {
                                  g.doLogout();
                              }, 2e3))
                            : (a && g.filterTextChanged(),
                              t && y.$broadcast("refreshHomePage"),
                              N(function () {
                                  g.windowUpdated();
                              }, 250),
                              l &&
                                  g.setupVideo(S.globalVars.Settings.EnableVideo).then(function (e) {
                                      angular.forEach(g.data.blfUsersArray, function (e) {
                                          p.massageInternalContact(e);
                                      }),
                                          y.$applyAsync();
                                  })),
                        i) &&
                            ((o = S.globalVars.Settings.Is4xxDevice ? "4xxDeviceEnabled" : "4xxDeviceDisabled"),
                            g.showToast("info", O.getPhrase(o)),
                            N(function () {
                                g.doLogout();
                            }, 2e3));
                        n && (f.clearCache(), f.readContacts());
                        var c = e.data.smsNumbers.filter(function (t) {
                            var e = S.globalVars.SmsNumbers.find(function (e) {
                                return e.number === t.number;
                            });
                            return e && e.autoReply !== t.autoReply;
                        });
                        if (c.length) {
                            var d = c.map(function (e) {
                                return { Number: e.number, Country: e.country, AutoReply: e.autoReply };
                            });
                            m.post("/api/smsReply", d).then(
                                function (e) {
                                    angular.forEach(e.data, function (t) {
                                        var e = S.globalVars.SmsNumbers.find(function (e) {
                                            return e.number === t.Number;
                                        });
                                        e ? (e.autoReply = t.AutoReply) : console.error("did not find sms number", t.number);
                                    });
                                },
                                function (e) {
                                    console.error("updating auto response", e);
                                }
                            );
                        }
                        U.clearSetting();
                    });
                }),
                (j.goToMyEmployeeDetail = function () {
                    g.goToEmployeeDetail(r.getExtension());
                }),
                (j.setNightMode = function (e) {
                    return g.setNightMode(e);
                }),
                (j.agentCanEndBreak = void 0),
                (j.agentCanEndWrap = void 0),
                (j.agentCanBreak = void 0),
                (j.agentCanWrap = void 0),
                (j.agentCanLogout = void 0),
                (j.agentCanLogin = void 0),
                (j.agentCanAddQ = void 0),
                (j.agentCanMonitor = void 0),
                (j.agentStateDisplay = void 0),
                (j.agentLogin = function () {
                    u.login();
                }),
                (j.agentLogout = function () {
                    u.logout();
                }),
                (j.agentBreakOn = function (e) {
                    return u.breakStart(e);
                }),
                (j.agentBreakOff = function () {
                    return u.breakEnd();
                }),
                (j.agentWrapOn = function () {
                    return u.wrapStart();
                }),
                (j.agentWrapOff = function () {
                    return u.wrapEnd();
                }),
                (j.startAgentMonitor = function () {
                    u.startAgentMonitor();
                }),
                (j.startQueueMonitor = function () {
                    u.startQueueMonitor();
                }),
                (j.startAbandonedCalls = function () {
                    u.startAbandonedCalls();
                }),
                (j.myLoggedInQueues = function () {
                    return u.myLoggedInQueues;
                }),
                (j.numLoggedInQueues = function () {
                    return u.numLoggedInQueues;
                });
            var H = "home";
            function k() {
                S.globalVars.hasVideo
                    ? 725 <= x.innerWidth
                        ? ((S.globalVars.mainClass = "main-video-right"), (S.globalVars.videoClass = "video-left"))
                        : ((S.globalVars.mainClass = "main-video-bottom"), (S.globalVars.videoClass = "video-top"))
                    : ((S.globalVars.mainClass = "main-no-video"), (S.globalVars.videoClass = "video-left"));
            }
            (j.getTabClass = function (e) {
                return H == e ? A : "";
            }),
                (j.setTabClass = function (e) {
                    H = e;
                }),
                (j.goToHomePage = function () {
                    g.goToHomePage();
                }),
                (j.goToContactsPage = function () {
                    T.go("app.contactsNew");
                }),
                (j.goToCallHistoryPage = function () {
                    T.go("app.callHistory");
                }),
                (j.goToChatsPage = function () {
                    T.go("app.newChat");
                }),
                (j.showRecentCalls = function () {
                    "Out" !== u.currentStatus
                        ? S.globalVars.HasTallyCodes
                            ? P.open().result.then(function (e) {})
                            : n.open(O.getPhrase("ShowRecentCalls"), O.getPhrase("TallyCodesRequired"), "OK")
                        : n.open(O.getPhrase("ShowRecentCalls"), O.getPhrase("AgentLoginRequired"), "OK");
                }),
                (y.computeDuration = function (e) {
                    var t = new Date().getTime();
                    return (t = Math.floor(t / 1e3)) - e.startTime;
                }),
                (x.onfocus = function () {
                    (S.globalVars.WindowIsInFocus = !0), console.debug("WindowIsInFocus", S.globalVars.WindowIsInFocus);
                }),
                (x.onblur = function () {
                    (S.globalVars.WindowIsInFocus = !1), console.debug("WindowIsInFocus", S.globalVars.WindowIsInFocus);
                }),
                document.addEventListener(
                    "visibilitychange",
                    function () {
                        document.hidden
                            ? (console.debug("hidden"), (S.globalVars.WindowIsActive = !1), (g.data.blfUsersArray = []), c.ignoreAll())
                            : (console.debug("visible"), (S.globalVars.WindowIsActive = !0), g.filterTextChanged(), !S.globalVars.isIE && S.onHomePage);
                    },
                    !1
                ),
                y.$watch(
                    function () {
                        return g.userInitialized;
                    },
                    function (e, t) {
                        angular.isDefined(e) && ((j.extension = r.getExtension()), (j.user = r.getUser()));
                    }
                ),
                (j.rpMarginTop = void 0),
                y.$watch(
                    function () {
                        return g.rpMarginTop;
                    },
                    function (e, t) {
                        (j.rpMarginTop = e), k();
                    }
                ),
                y.$watch(
                    function () {
                        return f.contactFilterEnabled;
                    },
                    function (e) {
                        j.contactFilterEnabled = e;
                    }
                ),
                y.$watch(
                    function () {
                        return S.globalVars.hasVideo;
                    },
                    function (e) {
                        k();
                    }
                ),
                y.$watch(
                    function () {
                        return D.eventMonitorOpen;
                    },
                    function (e, t) {
                        (S.globalVars.EventMonitorOpen = e), g.setCallProcessingAvailable();
                    }
                ),
                y.$watch(
                    function () {
                        return u.currentStatus;
                    },
                    function (t, e) {
                        if (angular.isDefined(t) && "Ringing" !== t) {
                            var a = !1;
                            if ("Out" !== t && "Ready" !== t && "Busy" !== t && "PendingBreak" !== t && "PendingWrapUp" !== t && "WrapUp" !== t && "NonAcd" !== t && ((a = !0), "OffDuty" !== t)) {
                                var n = S.globalVars.BreakCodes.find(function (e) {
                                    return t === e.Code;
                                });
                                if (angular.isUndefined(n)) return void console.warn("Unexpected agent state:", t);
                            }
                            (j.agentCanBreak = u.features.canRest && ("Ready" === t || "Busy" === t) && !S.globalVars.IsSLTPhone),
                                (j.agentCanWrap = u.features.canWrap && ("Ready" === t || "Busy" === t) && !S.globalVars.IsSLTPhone),
                                (j.agentCanEndBreak = (a || "PendingBreak" === t) && !S.globalVars.IsSLTPhone),
                                (j.agentCanEndWrap = ("WrapUp" === t || "PendingWrapUp" === t) && !S.globalVars.IsSLTPhone),
                                (j.agentCanLogout = (a || "Ready" === t || "WrapUp" === t || "Busy" === t) && !S.globalVars.IsSLTPhone),
                                (j.agentCanLogin = "Out" === t && !S.globalVars.IsSLTPhone),
                                (j.agentCanAddQ = "Ready" === t && u.aic_required && !S.globalVars.IsSLTPhone),
                                (j.agentCanMonitor = u.features.canMonitor),
                                (j.agentStateDisplay = o.statesDisplay[t]),
                                j.agentStateDisplay || (j.agentStateDisplay = { image: "fa fa-fw", color: null });
                        }
                    }
                ),
                y.$on("WINDOW_RESIZE", g.windowUpdated);
        }
        angular.module("AppMainModule").controller("AppMainCtrl", e),
            (e.$inject = [
                "$aboutModalService",
                "$Agent",
                "$AgentUtils",
                "$AppMain",
                "Calls",
                "ChatService",
                "$ConfirmationModal",
                "$ContactsNew",
                "CurrentUser",
                "$dialModalService",
                "GetUsersService",
                "$Global",
                "$helpModalService",
                "$http",
                "HttpService",
                "$incomingCallModalService",
                "$PageModal",
                "$ParkCallModal",
                "$Presence",
                "ProfileService",
                "$rootScope",
                "$scope",
                "$ServerEvents",
                "$SetLogoutStatusModal",
                "$UserSettings",
                "$ShowRecentCallsModal",
                "$state",
                "tabActiveClass",
                "$TestDriverModal",
                "$timeout",
                "UCLocaleService",
                "UCStorageService",
                "$UCVideo",
                "$UpdateContactFilterModal",
                "$UserBulletin",
                "$VideoConferenceModal",
                "$window",
            ]);
    })(),
    (function () {
        "use strict";
        function e(e) {
            e.state("app.home", { url: "/home", views: { main: { templateUrl: "app-components/homePage.html", controller: "HomeCtrl as homeCtrl" } } })
                .state("app.buddyLists", { url: "/buddyLists", views: { main: { templateUrl: "views/buddyLists.html", controller: "buddyListsCtrl" } } })
                .state("app.buddyList", { url: "/buddyList/:name?", views: { main: { templateUrl: "views/buddyList.html", controller: "buddyListCtrl" } } })
                .state("app.employee", { url: "/employee/:id", views: { main: { templateUrl: "views/employeeDetail.html", controller: "employeeDetailCtrl" } } });
        }
        function t() {
            return {};
        }
        function a(o, a, e, t, n, r, i, s, l, c, d, u, g, f) {
            var p = this;
            function m() {
                (p.enableBuddyListChat = (o.globalVars.IsAdvancedUser || o.globalVars.IsAttendant) && u.currentBuddyList && u.currentBuddyList.ID && "PERSONAL" !== u.currentBuddyList.ID && u.currentBuddyList.canChat),
                    o.globalVars.IsAdvancedUser && angular.isArray(u.buddyLists) && 0 < u.buddyLists.length ? (p.buddyListName = u.currentBuddyList ? u.currentBuddyList.name : "") : (p.buddyListName = "");
            }
            (p.getInactivityString = function (e) {
                return d.getInactivityString(e);
            }),
                (p.getInactivityColor = function (e) {
                    return e.cache.isLoggedIn ? (e.cache.isActive ? null : "text-warning") : "text-danger";
                }),
                (p.hideBuddyListName = function () {
                    p.buddyListName = "";
                }),
                (a.toggledDeviceStatus = function (e, t) {
                    e && o.globalVars.CanPickup && "Ringing" === t.DeviceStatus && ($("html").trigger("click"), r.post("/ucapi/device/Pickup", { number: t.extension }));
                }),
                (a.callVoicemail = function (e) {
                    if (!o.globalVars.IsCallProcessingAvailable) return console.log("Abandoned, call processing not available"), !1;
                    var t = {};
                    angular.isObject(e) && (t.userObj = e), (t.number = e.extension), (t.altType = null), (t.contactType = "Internal"), (t.voicemail = !0), 0 < n("filterVisible")(l.getActiveCalls()).length && (t.isTransfer = !0), s.open(t);
                }),
                (p.goToEmployeeDetail = function (e) {
                    i.goToEmployeeDetail(e);
                }),
                (a.goToSMSChat = function (e) {
                    if (o.globalVars.SmsNumbers.length) {
                        var t = o.globalVars.SmsNumbers[0],
                            a = g.getSmsChatObject(t.rawNumber, e);
                        f.go("app.newChat", { chatParm: a });
                    }
                }),
                (a.callNumber = function (e, t, a, n) {
                    if (!o.globalVars.IsCallProcessingAvailable) return console.log("Abandoned, call processing not available"), !1;
                    s.callNumber(e, t, a, n);
                }),
                (p.startBuddyListChat = function () {
                    if ("PERSONAL" !== u.currentBuddyList.ID) {
                        var e = g.getChats().find(function (e) {
                            return e.group && e.group.IsBuddyList && e.group.ID === u.currentBuddyList.ID;
                        });
                        e && f.go("app.newChat", { chatParm: e });
                    }
                }),
                (a.startChatSession = function (e) {
                    f.go("app.newChat", { chatParm: e });
                }),
                (a.startVideo = function (e) {
                    c.startVideo(e);
                }),
                (a.doVideo = function (e, t) {
                    o.globalVars.supportsWebRTC ? e && 0 === c.numConnections && ($("html").trigger("click"), a.startVideo(t)) : $("html").trigger("click");
                });
            var b = a.$watch(
                    function () {
                        return i.data.blfUsersArray;
                    },
                    function (e, t) {
                        p.blfUsersArray = e;
                    }
                ),
                h = a.$watch(
                    function () {
                        return u.currentBuddyList;
                    },
                    function (e) {
                        e && m();
                    }
                ),
                C = a.$watch(
                    function () {
                        return i.filterText;
                    },
                    function (e, t) {
                        t !== e && i.filterTextChanged();
                    }
                );
            a.$on("$destroy", function () {
                (p.blfUsersArray = []), (p.buddyListName = void 0), b(), h(), C();
            }),
                e(
                    function () {
                        i.windowUpdated();
                    },
                    350,
                    !1
                ),
                m();
        }
        angular.module("HomeModule", ["UCVideo"]).controller("HomeCtrl", a).factory("$HomePage", t).config(e),
            (e.$inject = ["$stateProvider"]),
            (t.$inject = []),
            (a.$inject = ["$rootScope", "$scope", "$timeout", "UCLocaleService", "$filter", "$http", "$AppMain", "$dialModalService", "Calls", "$UCVideo", "$Utilities", "CurrentUser", "ChatService", "$state"]);
    })(),
    (function () {
        "use strict";
        function e(e) {
            e.state("app.contactsNew", { url: "/contactsNew", views: { main: { templateUrl: "app-components/contactsNew.html", controller: "ContactsNewCtrl as contactsNewCtrl" } } });
        }
        function t(e, n, r, t, o, i, a, s, l, c, d, u, g) {
            var f = {
                contactCounts: void 0,
                contactFilter: void 0,
                contacts: null,
                contactSourcesStagedData: void 0,
                errors: void 0,
                filteredContacts: [],
                numContacts: 0,
                supportedContacts: void 0,
                addContact: function () {
                    var r = l.defer();
                    return (
                        e.open().result.then(function (o) {
                            t.open(o.contactType, null, o.extension).result.then(function (e) {
                                var a = e.contactObj;
                                if (a.Number) {
                                    var t = a.Id;
                                    s.getPresenceContact(t).then(
                                        function (e) {
                                            (a.PresenceStatus = "Unknown"),
                                                (a.DeviceStatus = "DoNotForward"),
                                                angular.isObject(e.dataEditContact) &&
                                                    angular.isObject(e.dataEditContact.CurrentSetting) &&
                                                    ((a.PresenceStatus = e.dataEditContact.CurrentSetting.Status),
                                                    (a.DeviceStatus = e.dataEditContact.CurrentSetting.ForwardSetting.Mode),
                                                    (a.ForwardDest = e.dataEditContact.CurrentSetting.ForwardSetting.Number)),
                                                (i.getUsersHash()[a.Number] = a),
                                                i.massageInternalContact(a);
                                            var t = f.addContactBasic(o.contactType, a);
                                            r.resolve(t);
                                        },
                                        function (e) {
                                            r.reject(!1);
                                        }
                                    );
                                } else {
                                    var n = f.addContactBasic(o.contactType, a);
                                    r.resolve(n);
                                }
                            });
                        }),
                        r.promise
                    );
                },
                addContactBasic: function (e, t) {
                    if ("Internal" === e || "External" === e || "Personal" === e) {
                        var a = { contactType: e };
                        h(a, t), f.contacts.unshift(a);
                    } else console.error("not implemented");
                    return p(n.filterText), a;
                },
            };
            return (
                (f.applyTextMatchFilter = p),
                (f.clearCache = m),
                (f.clearFilteredContacts = b),
                (f.deleteContact = function (a) {
                    var n = l.defer();
                    return (
                        s.deleteContact(a.contactType, null, a.Id).then(
                            function (e) {
                                "Internal" === a.contactType && delete i.getUsersHash()[a.extension];
                                var t = f.contacts.indexOf(a);
                                0 <= t && f.contacts.splice(t, 1), 0 <= (t = f.filteredContacts.indexOf(a)) && f.filteredContacts.splice(t, 1), n.resolve(a);
                            },
                            function (e) {
                                n.reject(a);
                            }
                        ),
                        n.promise
                    );
                }),
                (f.externalContacts = function () {
                    return f.contactSourcesStagedData.External;
                }),
                (f.fillContact = h),
                (f.getContactFilter = S),
                (f.getPossibleFilters = T),
                (f.getSupportedContacts = function () {
                    f.supportedContacts ||
                        (f.supportedContacts = {
                            Internal: { data: "Internal", offer: !0, imgSrc: "resources/images/ucservices.png", label: d.getPhrase("ContactType.Internal"), faClass: void 0 },
                            External: { data: "External", offer: !0, imgSrc: "resources/images/ucservices.png", label: d.getPhrase("ContactType.External"), faClass: void 0 },
                            Personal: { data: "Personal", offer: !0, imgSrc: "resources/images/ucservices.png", label: d.getPhrase("ContactType.Personal"), faClass: void 0 },
                            GoogleUser: { data: "GoogleUser", offer: D(), imgSrc: void 0, label: d.getPhrase("ContactType.GoogleUser"), faClass: "fab fa-google" },
                            GoogleContact: { data: "GoogleContact", offer: y(), imgSrc: void 0, label: d.getPhrase("ContactType.GoogleContact"), faClass: "fab fa-google" },
                            Outlook: { data: "Outlook", offer: w(), imgSrc: void 0, label: d.getPhrase("ContactType.Outlook"), faClass: "fab fa-microsoft" },
                            O365: { data: "O365", offer: I(), imgSrc: void 0, label: d.getPhrase("ContactType.O365"), faClass: "fab fa-microsoft" },
                        });
                    return f.supportedContacts;
                }),
                (f.googleUsers = function () {
                    return f.contactSourcesStagedData.GoogleUser;
                }),
                (f.isGoogleContactsAvailable = y),
                (f.isGoogleDirectoryAvailable = D),
                (f.isO365Available = I),
                (f.isOutlookContactsAvailable = w),
                (f.o365Contacts = function () {
                    return f.contactSourcesStagedData.O365;
                }),
                (f.outlookContacts = function () {
                    return f.contactSourcesStagedData.Outlook;
                }),
                (f.personalContacts = function () {
                    return f.contactSourcesStagedData.Personal;
                }),
                (f.readContacts = P),
                (f.readGoogleContacts = A),
                (f.readGoogleDirectory = M),
                (f.setContactFilter = function (e, t) {
                    (f.contactFilter = e), (c.globalVars.Settings.ContactFilter = e), u.flushAllLocalApplicationSettings(), N(), t || (m(), P());
                }),
                f
            );
            function p(e) {
                if (((f.filteredContacts = []), angular.isDefined(e) || (e = ""), e.length < 2)) f.filteredContacts = angular.isArray(f.contacts) ? f.contacts : [];
                else {
                    var t = [];
                    e = e.replace(/\./g, "\\.");
                    var a = new RegExp("^" + e, "i"),
                        n = new RegExp(e, "i");
                    angular.forEach(f.contacts, function (e) {
                        n.test(e.extName) ? t.push(e) : a.test(e.firstName) ? t.push(e) : a.test(e.lastName) ? t.push(e) : n.test(e.name) && t.push(e);
                    }),
                        (f.filteredContacts = t),
                        (t = null);
                }
            }
            function m() {
                (f.contacts = null), (f.contactCounts = void 0), (f.numContacts = 0), b();
            }
            function b() {
                f.filteredContacts = [];
            }
            function h(t, e) {
                return (
                    "Internal" === t.contactType || "External" === t.contactType || "Personal" === t.contactType || "Outlook" === t.contactType || "O365" === t.contactType
                        ? ((t.Id = e.Id),
                          (t.name = ""),
                          "O365" === t.contactType && (e.GivenName || e.Surname ? ((e.FirstName = e.GivenName), (e.LastName = e.Surname)) : (e.FirstName = e.UserPrincipalName), (e.Email = e.Mail)),
                          "LAST_FIRST" === c.globalVars.Settings.NameDisplayPreference
                              ? e.LastName
                                  ? ((t.name = e.LastName), e.FirstName && ((t.name += " "), (t.name += e.FirstName)))
                                  : (t.name = e.FirstName)
                              : (e.FirstName ? ((t.name = e.FirstName), e.LastName && ((t.name += " "), (t.name += e.LastName))) : (t.name = e.LastName),
                                t.name || (t.name = e.extension),
                                e.ExtName && t.name !== e.ExtName && (t.name += " (" + e.ExtName + ")")),
                          (t.firstName = e.FirstName),
                          (t.lastName = e.LastName),
                          ("External" !== t.contactType && "Personal" !== t.contactType && "Outlook" !== t.contactType && "O365" !== t.contactType) ||
                              ((t.initials = ""), t.firstName && (t.initials = t.firstName.slice(0, 1)), t.lastName && (t.initials += " " + t.lastName.slice(0, 1))),
                          (t.email = e.Email),
                          (t.phones = []),
                          (t.canDelete = c.globalVars.CanEditContacts),
                          "Internal" === t.contactType
                              ? ((t.extension = e.extension),
                                (t.photo = e.photo),
                                (t.cache = e.cache),
                                (t.CanChat = e.CanChat),
                                (t.extName = e.ExtName),
                                angular.isNumber(t.extension) && t.phones.push({ value: t.extension, type: "extension", rawNumber: t.extension }))
                              : "O365" === t.contactType
                              ? (e.MobilePhone && t.phones.push({ value: e.MobilePhone, type: "Mobile" }),
                                angular.isArray(e.BusinessPhones) &&
                                    angular.forEach(e.BusinessPhones, function (e) {
                                        t.phones.push({ value: e, type: "" });
                                    }))
                              : e.Number && t.phones.push({ value: e.Number, type: "" }),
                          angular.isArray(e.AlternateNumbers) &&
                              0 < e.AlternateNumbers.length &&
                              (t.phones = t.phones.concat(
                                  e.AlternateNumbers.map(function (e) {
                                      return { value: e.Number, type: e.AltType, rawNumber: e.rawNumber };
                                  })
                              )),
                          (t.source = e))
                        : "GoogleUser" === t.contactType
                        ? ((t.photo = e.photo), (t.email = e.primaryEmail), (t.phones = e.phones), (t.name = e.name.fullName), (t.source = e))
                        : "GoogleContact" === t.contactType
                        ? ((t.photo = e.photo), (t.email = angular.isArray(e.emails) && 0 < e.emails.length ? e.emails[0].value : ""), (t.phones = e.phoneNumbers), (t.name = e.name.displayName), (t.source = e))
                        : console.error("not implemented"),
                    angular.forEach(t.phones, function (e) {
                        (e.rawNumber = g.toDigits(e.value)), "cellular" === e.type.toLowerCase() && (e.type = "Mobile");
                    }),
                    t
                );
            }
            function C() {
                for (var e = Object.keys(f.contactSourcesStagedData), t = 0; t < e.length; t++) {
                    var a = e[t];
                    if (!f.contactSourcesStagedData[a]) return !1;
                }
                return !0;
            }
            function v(e) {
                var a = [];
                angular.forEach(f.contactSourcesStagedData, function (e, t) {
                    (a = a.concat(e)), (f.contactCounts[t] = e.length);
                }),
                    (f.contacts = o("orderBy")(a, "name")),
                    (f.numContacts = f.contacts.length),
                    p(n.filterText),
                    e.resolve(!0);
            }
            function S() {
                return (
                    f.contactFilter ||
                        (f.contactFilter = c.globalVars.Settings.ContactFilter.filter(function (e) {
                            return !("Outlook" === e && !w()) && !("GoogleContact" === e && !y()) && !("GoogleUser" === e && !D()) && !("O365" === e && !I());
                        })),
                    f.contactFilter
                );
            }
            function y() {
                return c.globalVars.GoogleVars.contacts && c.globalVars.GoogleVars.contacts.enabled;
            }
            function D() {
                return c.globalVars.GoogleVars.directory && c.globalVars.GoogleVars.directory.enabled;
            }
            function I() {
                return c.globalVars.HasOffice365;
            }
            function w() {
                return c.globalVars.OutlookContacts;
            }
            function P() {
                b();
                var e,
                    a,
                    t,
                    n,
                    o = l.defer();
                return (
                    null !== f.contacts
                        ? o.resolve(!0)
                        : ((f.errors = []),
                          S(),
                          N(),
                          (f.contactCounts = {}),
                          (f.numContacts = 0),
                          (f.contactSourcesStagedData = {}),
                          0 === f.contactFilter.length && C() && v(o),
                          angular.forEach(f.contactFilter, function (e) {
                              "GoogleUser" === e
                                  ? D()
                                      ? (f.contactSourcesStagedData[e] = void 0)
                                      : f.errors.push(d.getPhrase("GOOGLE_USERS_NOT_ENABLED"))
                                  : "GoogleContact" === e
                                  ? y()
                                      ? c.globalVars.GoogleSignedIn
                                          ? (f.contactSourcesStagedData[e] = void 0)
                                          : f.errors.push(d.getPhrase("GOOGLE_NOT_LOGGED_IN"))
                                      : f.errors.push(d.getPhrase("GOOGLE_CONTACTS_NOT_ENABLED"))
                                  : ("Outlook" !== e || w()) && ("O365" !== e || I()) && (f.contactSourcesStagedData[e] = void 0);
                          }),
                          0 <= Object.keys(f.contactSourcesStagedData).indexOf("Internal") &&
                              ((e = l.defer()),
                              (a = []),
                              (f.contacts = angular.forEach(i.getUsers(), function (e) {
                                  if (!e.IsHidden) {
                                      var t = { contactType: "Internal" };
                                      h(t, e), a.push(t);
                                  }
                              })),
                              e.resolve(a),
                              e.promise).then(
                                  function (e) {
                                      (f.contactSourcesStagedData.Internal = e), C() && v(o);
                                  },
                                  function (e) {
                                      (f.contactSourcesStagedData.Internal = []), C() && v(o);
                                  }
                              ),
                          0 <= Object.keys(f.contactSourcesStagedData).indexOf("External") &&
                              ((t = l.defer()),
                              r.getExternalContacts().then(
                                  function (e) {
                                      var a = [];
                                      (f.contacts = angular.forEach(e, function (e) {
                                          var t = { contactType: "External" };
                                          h(t, e), a.push(t);
                                      })),
                                          t.resolve(a);
                                  },
                                  function (e) {
                                      console.error("reading external contacts", e), t.reject(e);
                                  }
                              ),
                              t.promise).then(
                                  function (e) {
                                      (f.contactSourcesStagedData.External = e), C() && v(o);
                                  },
                                  function (e) {
                                      (f.contactSourcesStagedData.External = []), C() && v(o);
                                  }
                              ),
                          0 <= Object.keys(f.contactSourcesStagedData).indexOf("Personal") &&
                              ((n = l.defer()),
                              r.getPersonalContacts().then(
                                  function (e) {
                                      var a = [];
                                      (f.contacts = angular.forEach(e, function (e) {
                                          var t = { contactType: "Personal" };
                                          h(t, e), a.push(t);
                                      })),
                                          n.resolve(a);
                                  },
                                  function (e) {
                                      console.error("reading external contacts", e), n.reject(e);
                                  }
                              ),
                              n.promise).then(
                                  function (e) {
                                      (f.contactSourcesStagedData.Personal = e), C() && v(o);
                                  },
                                  function (e) {
                                      (f.contactSourcesStagedData.Personal = []), C() && v(o);
                                  }
                              ),
                          0 <= Object.keys(f.contactSourcesStagedData).indexOf("GoogleUser") &&
                              M().then(
                                  function (e) {
                                      (f.contactSourcesStagedData.GoogleUser = e.map(function (e) {
                                          var t = { contactType: "GoogleUser" };
                                          return h(t, e), t;
                                      })),
                                          C() && v(o);
                                  },
                                  function (e) {
                                      console.error("Google users not read.  Error accessing users", e), f.errors.push(d.getPhrase("GOOGLE_USERS_READ_ERROR", e.status)), (f.contactSourcesStagedData.GoogleUser = []), C() && v(o);
                                  }
                              ),
                          0 <= Object.keys(f.contactSourcesStagedData).indexOf("GoogleContact") &&
                              A().then(
                                  function (e) {
                                      (f.contactSourcesStagedData.GoogleContact = e.map(function (e) {
                                          var t = { contactType: "GoogleContact" };
                                          return h(t, e), t;
                                      })),
                                          C() && v(o);
                                  },
                                  function (e) {
                                      console.error("Google Contacts not read due to error", e), f.errors.push(d.getPhrase("GOOGLE_CONTACTS_READ_ERROR", e.status)), (f.contactSourcesStagedData.GoogleContact = []), C() && v(o);
                                  }
                              ),
                          0 <= Object.keys(f.contactSourcesStagedData).indexOf("Outlook") &&
                              r.getOutlookContacts().then(
                                  function (e) {
                                      (f.contactSourcesStagedData.Outlook = e.map(function (e) {
                                          var t = { contactType: "Outlook" };
                                          return h(t, e), t;
                                      })),
                                          C() && v(o);
                                  },
                                  function (e) {
                                      console.error("reading external contacts", e), (f.contactSourcesStagedData.Outlook = []), C() && v(o);
                                  }
                              ),
                          0 <= Object.keys(f.contactSourcesStagedData).indexOf("O365") &&
                              r.getO365Contacts().then(
                                  function (e) {
                                      (f.contactSourcesStagedData.O365 = e.map(function (e) {
                                          var t = { contactType: "O365" };
                                          return h(t, e), t;
                                      })),
                                          C() && v(o);
                                  },
                                  function (e) {
                                      console.error("reading o365 contacts", e), (f.contactSourcesStagedData.O365 = []), C() && v(o);
                                  }
                              )),
                    o.promise
                );
            }
            function T() {
                var e = ["Internal", "External", "Personal"];
                return D() && e.push("GoogleUser"), y() && e.push("GoogleContact"), w() && e.push("Outlook"), I() && e.push("O365"), e;
            }
            function A() {
                var t = l.defer();
                (c.globalVars.GoogleContacts = []), (c.globalVars.GooglePhoneNumbersHash = {});
                try {
                    if (!gapi.client.people) return console.error("Google client is not initialized for People"), t.reject({ status: 401 }), t.promise;
                } catch (e) {
                    return console.error("Google client is not initialized for People", e), t.reject({ status: 401 }), t.promise;
                }
                return (
                    gapi.client.people.people.connections.list({ resourceName: "people/me", pageSize: 500, sortOrder: "FIRST_NAME_ASCENDING", personFields: "names,emailAddresses,photos,addresses,phoneNumbers" }).then(
                        function (e) {
                            (c.globalVars.GoogleContacts = e.result.connections.map(function (e) {
                                var t = { name: {} };
                                if ((angular.isArray(e.names) && 0 < e.names.length && (t.name = e.names[0]), angular.isArray(e.photos) && 0 < e.photos.length)) {
                                    var a = e.photos.find(function (e) {
                                        return !(!e.metadata || !e.metadata.source) && "PROFILE" === e.metadata.source.type;
                                    });
                                    (t.photo = a ? a.url : e.photos[e.photos.length - 1].url), (t.photo = t.photo ? t.photo : UCServices.address + "/uc/Images/NoPhoto.png");
                                }
                                return (
                                    (t.emails = []),
                                    angular.isArray(e.emailAddresses) &&
                                        (t.emails = e.emailAddresses.filter(function (e) {
                                            return angular.isDefined(e.type);
                                        })),
                                    (t.phoneNumbers = []),
                                    angular.isArray(e.phoneNumbers) &&
                                        (t.phoneNumbers = e.phoneNumbers.map(function (e) {
                                            return (e.rawNumber = g.toDigits(e.value)), e.rawNumber && (c.globalVars.GooglePhoneNumbersHash[e.rawNumber] = { type: e.formattedType, googleUser: t, contactType: "GoogleContact" }), e;
                                        })),
                                    t
                                );
                            })),
                                t.resolve(c.globalVars.GoogleContacts);
                        },
                        function (e) {
                            console.error("getGoogleContacts", e), t.reject(e);
                        }
                    ),
                    t.promise
                );
            }
            function M() {
                var t = l.defer(),
                    n = [];
                return (
                    a.get("/api/googleUsers").then(
                        function (e) {
                            if (angular.isArray(e.data) && e.data.length) {
                                var a = i.getEmailToUserHash();
                                n = e.data.map(function (e) {
                                    (e.thumbnailPhotoUrl = e.thumbnailPhotoUrl ? e.thumbnailPhotoUrl : UCServices.address + "/uc/Images/NoPhoto.png"),
                                        (e.photo = e.thumbnailPhotoUrl),
                                        e.name ? (e.name.displayName = e.name.fullName) : (e.name = {}),
                                        angular.isArray(e.addresses) &&
                                            e.addresses.map(function (e) {
                                                return e.formatted && (e.urlAddress = e.formatted.replace(/\s/g, "+")), e;
                                            }),
                                        (e.phones = angular.isArray(e.phones) ? e.phones : []);
                                    var t = a[e.primaryEmail.toLowerCase()];
                                    return (
                                        t && t.extension && (e.phones.unshift({ value: t.extension, type: "extension" }), (t.cache.isGoogleUser = !0)),
                                        e.phones.map(function (e) {
                                            return (e.rawNumber = g.toDigits(e.value)), (e.formattedType = e.type), e;
                                        }),
                                        e
                                    );
                                });
                            }
                            t.resolve(n);
                        },
                        function (e) {
                            console.error("getGoogleDirectory", e), t.reject(e);
                        }
                    ),
                    t.promise
                );
            }
            function N() {
                f.contactFilterEnabled = f.contactFilter.length < T().length;
            }
        }
        function a(n, e, o, t, r, i, s, l, a, c, d, u, g, f, p) {
            var m = this;
            function b() {
                var e = [],
                    s = {
                        "first name": "firstName",
                        "last name": "lastName",
                        title: "Title",
                        location: "Location",
                        department: "Department",
                        supervisor: "SupervisorNameAndNumber",
                        assistant: "AssistantNameAndNumber",
                        notes: "Notes",
                        company: "Company",
                        street: "Street",
                        city: "City",
                        "postal code": "PostalCode",
                        state: "State",
                    },
                    l = { Location: 1, Street: 1, City: 1, State: 1, PostalCode: 1, Country: 1, Company: 1, Department: 1, SupervisorNameAndNumber: 1, AssistantNameAndNumber: 1, Notes: 1, Title: 1 };
                return (
                    angular.forEach(m.contacts, function (r) {
                        var i = {};
                        angular.forEach(m.getExportColumns(), function (e) {
                            var t,
                                a = s[e] ? s[e] : e;
                            if ("phones" === e) {
                                if (r.phones && r.phones.length) {
                                    var n = [];
                                    angular.forEach(r.phones, function (e) {
                                        "extension" === e.type ? n.push(e.value) : n.push(e.value + "  (" + p.getPrettyAltNumberType(e.type) + ")");
                                    }),
                                        (t = n.join("\r"));
                                }
                            } else if ("email" === e) {
                                if (r.email) {
                                    var o = r.email;
                                    t = '=HYPERLINK("' + ("mailto:" + o) + '", "' + o + '")';
                                }
                            } else
                                "GoogleUser" === r.contactType || "GoogleContact" === r.contactType
                                    ? "first name" === e && r.source.name
                                        ? (t = r.source.name.givenName)
                                        : "last name" === e && r.source.name && (t = r.source.name.familyName)
                                    : l[a]
                                    ? r.source &&
                                      (t =
                                          "SupervisorNameAndNumber" === a && r.source.SupervisorName
                                              ? r.source.SupervisorName + " " + r.source.SupervisorNumber
                                              : "AssistantNameAndNumber" === a && r.source.AssistantName
                                              ? r.source.AssistantName + " " + r.source.AssistantNumber
                                              : r.source[a])
                                    : (t = r[a]);
                            i[e] = t || null;
                        }),
                            e.push(i);
                    }),
                    e
                );
            }
            (m.contacts = []),
                (m.errors = void 0),
                (m.addContact = function () {
                    if (c.globalVars.IsAttendant || c.globalVars.IsAdvancedUser)
                        r.addContact().then(
                            function (e) {
                                n.showToast("success", "", "Contact was added successfully.");
                            },
                            function (e) {
                                n.showToast("error", "", "Contact could not be added.");
                            }
                        );
                    else {
                        var e = s.open("Personal");
                        e.result.then(
                            function (e) {
                                r.addContactBasic("Personal", e.contactObj), n.showToast("success", "", "Contact was added successfully.");
                            },
                            function (e) {
                                "cancel" !== e && n.showToast("error", "", "Contact could not be added.");
                            }
                        );
                    }
                }),
                (m.deleteContact = function (t) {
                    e.open(void 0, g.getPhrase("DeleteContact.Confirm", t.name), "YES_NO").result.then(function (e) {
                        e &&
                            r.deleteContact(t).then(
                                function (e) {
                                    n.showToast("success", "", "Contact was successfully deleted.");
                                },
                                function (e) {
                                    n.showToast("error", "", "Contact could not be deleted.");
                                }
                            );
                    });
                }),
                (m.dial = function (e, t) {
                    if ("Internal" === e.contactType && "extension" === t.type) i.callNumber(e.source, e.contactType, t.value);
                    else if ("Internal" === e.contactType || "External" === e.contactType || "Personal" === e.contactType) {
                        var a = e.phones.find(function (e) {
                            return t.value === e.value;
                        });
                        if (!a) return void console.warn("number not found", t.value);
                        i.callNumber(e.source, e.contactType, a.value, a.type);
                    } else if ("GoogleUser" === e.contactType) {
                        var n = { Number: t.rawNumber, name: e.name, photo: e.photo };
                        i.dialContact(n, void 0, "GoogleContact", t.type);
                    } else "Outlook" === e.contactType ? i.callNumber(e.source, e.contactType, t.value, t.type) : console.error("Not implemented yet!!");
                }),
                (m.errorTextClosed = function (e) {
                    m.errors.splice(e, 1);
                }),
                (m.getExportArray = function () {
                    return b;
                }),
                (m.getExportColumns = function () {
                    return ["first name", "last name", "email", "phones", "notes", "title", "department", "location", "supervisor", "assistant", "company", "street", "city", "state", "postal code"];
                }),
                (m.goToSMSChat = function (e, t) {
                    var a = o.getSmsChatObject(t, e.value);
                    d.go("app.newChat", { chatParm: a });
                }),
                (m.lazyLoadExportData = b),
                (m.makeVideoCall = function (e) {
                    f.startVideo(e);
                }),
                (m.showFullContact = function (a) {
                    if ("Internal" === a.contactType || "External" === a.contactType || "Personal" === a.contactType) {
                        var e = l.open(a);
                        e.result.then(
                            function (e) {
                                var t = s.open(a.contactType, a.source);
                                t.result.then(function (e) {
                                    r.fillContact(a, e.contactObj), n.showToast("success", "", "Contact was updated successfully.");
                                });
                            },
                            function () {}
                        );
                    } else l.open(a);
                }),
                c.$watch(
                    function () {
                        return n.filterText;
                    },
                    function (e) {
                        r.applyTextMatchFilter(e);
                    }
                ),
                c.$watch(
                    function () {
                        return r.filteredContacts;
                    },
                    function (e) {
                        m.contacts = e;
                    }
                ),
                c.$watch(
                    function () {
                        return r.errors;
                    },
                    function (e) {
                        m.errors = e;
                    }
                ),
                c.$watch(
                    function () {
                        return r.contactCounts;
                    },
                    function (e) {
                        m.contactCounts = e;
                    }
                ),
                c.$watch(
                    function () {
                        return r.numContacts;
                    },
                    function (e) {
                        m.numContacts = e;
                    }
                ),
                (m.canEditContacts = !0),
                u(function () {
                    n.windowUpdated();
                }, 250);
        }
        angular.module("ContactsNewModule", ["AddContactModal", "FullContactModal"]).factory("$ContactsNew", t).controller("ContactsNewCtrl", a).config(e),
            (e.$inject = ["$stateProvider"]),
            (t.$inject = ["$AddContactModal", "$AppMain", "Contacts", "$editContactsModalService", "$filter", "GetUsersService", "$http", "HttpService", "$q", "$rootScope", "UCLocaleService", "UCStorageService", "$Utilities"]),
            (a.$inject = [
                "$AppMain",
                "$ConfirmationModal",
                "ChatService",
                "Contacts",
                "$ContactsNew",
                "$dialModalService",
                "$editContactsModalService",
                "$FullContactModal",
                "GetUsersService",
                "$rootScope",
                "$state",
                "$timeout",
                "UCLocaleService",
                "$UCVideo",
                "$Utilities",
            ]);
    })(),
    (function () {
        "use strict";
        function e(e) {
            e.state({ name: "app.newChat", url: "/newChat", views: { main: { templateUrl: "views/chatComposite.html", controller: "ChatCtrl as chatCtrl" } }, params: { chatParm: null } });
        }
        function t(a) {
            var n = {
                chatParm: null,
                backAllowed: !1,
                goToChat: function (e) {
                    var t = e;
                    if (angular.isNumber(t) || angular.isString(t)) {
                        var t = a.getChat(e);
                        t || (t = a.addChat(e));
                    }
                    n.chatParm = t;
                },
            };
            return n;
        }
        function a(e, t, a, n, o, r) {
            var i = this,
                s = o.chatParm;
            s && (t.backAllowed = !0),
                t.goToChat(s),
                n.$watch(
                    function () {
                        return a.ChatWindowHeight;
                    },
                    function (e) {
                        console.debug("ChatCtrl ChatWindowHeight", e), (i.chatWindowHeight = e);
                    }
                ),
                r(
                    function () {
                        e.windowUpdated();
                    },
                    250,
                    !1
                );
        }
        function n(n, s, a, e, l, o, c, d, r, t, i, u, g) {
            var f = this;
            (f.deleteChat = function (t) {
                var e;
                e = t.isSMS ? "DeleteSMSChat" : t.group ? (t.group.IsBuddyList ? "ResetBlfChatGroup" : "DeleteChatGroup") : "DeleteConversation";
                a.open(void 0, i.getPhrase(e), "YES_NO").result.then(function (e) {
                    e &&
                        (t.isSMS
                            ? d.post("/ucapi/smsHistory/DeleteAllConversations", { otherParty: t.rawNumber, myNumber: t.myNumber }).then(
                                  function (e) {
                                      r.$applyAsync(function () {
                                          s.deleteGroupChat(t), (f.chats = s.getChats()), n.goToChat(null);
                                      });
                                  },
                                  function (e) {
                                      console.error("reset blf group chat", e);
                                  }
                              )
                            : t.group
                            ? t.group.IsBuddyList
                                ? d.post("/ucapi/groupchat/DeleteAllConversations", { id: t.group.ID }).then(
                                      function (e) {
                                          r.$applyAsync(function () {
                                              s.resetChat(t);
                                          });
                                      },
                                      function (e) {
                                          console.error("reset blf group chat", e);
                                      }
                                  )
                                : d.delete("/api/imgroups/" + t.group.ID).then(
                                      function (e) {
                                          r.$applyAsync(function () {
                                              s.deleteGroupChat(t), (f.chats = s.getChats()), n.goToChat(null);
                                          });
                                      },
                                      function (e) {
                                          console.error("deleting chat group", e),
                                              r.$applyAsync(function () {
                                                  s.deleteGroupChat(t), (f.chats = s.getChats()), n.goToChat(null);
                                              });
                                      }
                                  )
                            : d.post("/ucapi/im/DeleteAllConversations", { otherParty: t.extension }).then(
                                  function (e) {
                                      r.$applyAsync(function () {
                                          s.deleteGroupChat(t), (f.chats = s.getChats()), n.goToChat(null);
                                      });
                                  },
                                  function (e) {
                                      console.error("delete extension chat", e);
                                  }
                              ));
                });
            }),
                (f.extensionRemoved = function (e) {
                    for (var t = -1, a = 0; a < f.data.selectedExtensions.length; a++)
                        if (f.data.selectedExtensions[a].extension == e.extension) {
                            t = a;
                            break;
                        }
                    0 <= t && f.data.selectedExtensions.splice(t, 1);
                    f.data.recipientChoices.push(e), (f.data.recipientChoices = o("orderBy")(f.data.recipientChoices, ["name", "extension"]));
                }),
                (f.extensionSelected = function (e) {
                    if (r.globalVars.IsAdvancedUser) {
                        if ((0 === f.data.selectedExtensions.length && n.goToChat(null), f.data.selectedExtensions.push(e), f.data.myNumber.isSMS)) return (f.data.selectedUser = void 0), void f.startChat();
                        for (var t = -1, a = 0; a < f.data.recipientChoices.length; a++)
                            if (f.data.recipientChoices[a].extension == e.extension) {
                                t = a;
                                break;
                            }
                        0 <= t && f.data.recipientChoices.splice(t, 1), (f.data.selectedUser = void 0);
                    }
                }),
                (f.gotoChat = h),
                (f.setMyNumber = function (e) {
                    (f.data.myNumber = e), localStorage.setItem("MyNumber", e.rawNumber), b(), n.goToChat(null);
                }),
                (f.startChat = function () {
                    if ((b(), angular.isObject(f.data.selectedUser))) h(f.data.selectedUser.extension);
                    else if (f.data.selectedExtensions.length) {
                        if (1 === f.data.selectedExtensions.length) {
                            if (f.data.selectedExtensions[0].isSMS) {
                                var e = s.getSmsChatObject(f.data.myNumber.number, f.data.selectedExtensions[0].extension);
                                (e.lastMessageTimestamp = new Date()), s.reorderChatList(), (f.chats = s.getChats()), h(e);
                            } else h(f.data.selectedExtensions[0].extension);
                            return;
                        }
                        var i = {},
                            t = f.data.selectedExtensions.map(function (e) {
                                return (i[e.extension] = !0), e.extension;
                            }),
                            a = s.getChats().find(function (e) {
                                if (e.group && !e.group.IsBuddyList) {
                                    var t = e.group.Members.filter(function (e) {
                                            return e.Name != l.getExtension();
                                        }),
                                        a = {};
                                    angular.forEach(t, function (e) {
                                        a[e.Name] = !0;
                                    });
                                    var n = Object.keys(i);
                                    if (n.length === t.length) {
                                        for (var o = 0; o < n.length; o++) {
                                            var r = n[o];
                                            if (!a[r]) return !1;
                                        }
                                        return !0;
                                    }
                                    return !1;
                                }
                                return !1;
                            });
                        if (a) return (a.lastMessageTimestamp = new Date()), s.reorderChatList(), (f.chats = s.getChats()), void h(a);
                        var n = t.map(function (e) {
                            return { Name: e };
                        });
                        n.push({ Name: l.getExtension() });
                        var o = { Name: "generated_" + +new Date(), Members: n, AllowMemberEdit: !0 };
                        d.post("/api/imgroups", o).then(
                            function (e) {
                                var t = s.addChat(null, e.data);
                                (t.lastMessageTimestamp = new Date()), s.reorderChatList(), (f.chats = s.getChats()), h(t);
                            },
                            function (e) {
                                console.error("creating chat group", e);
                            }
                        );
                    } else {
                        var r = u.toDigits(f.data.selectedUser);
                        if (c.getUsersHash()[r]) h(r);
                        else if (f.data.myNumber.isSMS) {
                            var e = s.getSmsChatObject(f.data.myNumber.number, r);
                            (e.lastMessageTimestamp = new Date()), s.reorderChatList(), (f.chats = s.getChats()), h(e);
                        } else f.data.selectedUser = void 0;
                    }
                }),
                (f.data = {}),
                (f.data.selectedUser = null),
                (f.data.selectedExtensions = []),
                (f.data.recipientChoices = []),
                (f.data.activeChat = null);
            var p = angular.copy(r.globalVars.SmsNumbers);
            p.unshift({ number: l.getExtension(), rawNumber: l.getExtension() }), (f.data.myNumbers = p), (f.data.myNumber = f.data.myNumbers[0]);
            var m = l.getExtension();
            function b() {
                (f.data.recipientChoices = []),
                    f.data.myNumber.isSMS
                        ? angular.forEach(e.contacts, function (a) {
                              angular.forEach(a.phones, function (e) {
                                  if ("Mobile" === e.type) {
                                      var t = a.source && a.source.photo ? a.source.photo : null;
                                      f.data.recipientChoices.push({
                                          isSMS: !0,
                                          isContact: !0,
                                          contactType: a.contactType,
                                          extension: e.rawNumber,
                                          imageURL: t,
                                          initials: a.initials,
                                          label: a.firstName + " " + a.lastName + " " + e.value,
                                          company: a.source.Company,
                                      });
                                  }
                              });
                          })
                        : angular.forEach(c.getRealUsers(), function (e) {
                              e.chatCapable && e.extension != m && f.data.recipientChoices.push({ name: e.name, extension: e.extension, imageURL: e.photo, label: e.name == e.extension ? e.name : e.name + " (" + e.extension + ")" });
                          });
            }
            function h(e) {
                (f.data.selectedExtensions = []), (f.data.selectedUser = null), n.goToChat(e);
            }
            b(), s.reorderChatList(), (f.chats = s.getChats());
            var C = s.getChatsWithUnreadMessages();
            1 === C.length && ((n.backAllowed = !0), n.goToChat(C[0]));
            var v = t.$watch(
                function () {
                    return r.ChatWindowHeight;
                },
                function (e) {
                    console.debug("chatListCtrl ChatWindowHeight", e), (f.chatWindowHeight = e), (f.chatListHeight = e - 36 - (r.globalVars.SmsNumbers.length ? 34 : 0));
                }
            );
            t.$on("$destroy", function () {
                console.debug("ChatListCtrl destroyed"), f.data.activeChat && ((f.data.activeChat.isActive = !1), (f.data.activeChat = null)), v && v();
            }),
                t.$watch(
                    function () {
                        return n.chatParm;
                    },
                    function (e, t) {
                        f.data.activeChat && (f.data.activeChat.isActive = !1), (f.data.activeChat = e), f.data.activeChat && (f.data.activeChat.isActive = !0);
                    }
                );
        }
        function o(e, l, t, c, d, a, n, o, r, s, u, g, f, p, i, m, b, h, C, v, S) {
            var y = this;
            function D(r) {
                if (((r.open = !r.open), r.open))
                    if (y.data.chatObj.isSMS)
                        C.post("/ucapi/smsHistory/fetchConversation", { sessionID: r.ID }).then(
                            function (e) {
                                var n = [],
                                    o = y.data.chatObj.rawMyNumber;
                                if (
                                    (angular.forEach(e.data.Data, function (e) {
                                        var t = g.toDigits(e.Sender.Name),
                                            a = { text: u.urlify(e.Text), sent: t == o, isSMS: !0, MessageSid: e.MessageSid };
                                        a.sent && ((a.MessageSid = e.MessageSid), (a.MessageStatus = e.MessageStatus), (a.ErrorCode = e.ErrorCode), e.ErrorCode && j(a, e.MessageStatus, e.ErrorCode)), n.push(a);
                                    }),
                                    0 < n.length)
                                ) {
                                    var t = n[n.length - 1];
                                    t.ErrorCode || j(t, t.MessageStatus, t.ErrorCode);
                                }
                                r.conversation = n;
                            },
                            function (e) {
                                console.error("fetch sms chat conversation", e);
                            }
                        );
                    else {
                        var i = p.getExtension();
                        y.data.isGroup
                            ? C.post("/ucapi/groupchat/fetchConversation", { sessionID: r.ID }).then(
                                  function (e) {
                                      var n = f.getUsersHash(),
                                          o = [];
                                      if (
                                          (angular.forEach(e.data.Data, function (e) {
                                              var t = e.Sender.Name,
                                                  a = n[t];
                                              o.push({ text: u.urlify(e.Text), sent: t == i, isGroup: !0, user: { photo: a.photo, name: a.name, extension: a.extension } });
                                          }),
                                          1 < o.length)
                                      )
                                          for (var t = o[0].user.extension, a = 1; a < o.length; a++) t === o[a].user.extension ? delete o[a].user : (t = o[a].user.extension);
                                      r.conversation = o;
                                  },
                                  function (e) {
                                      console.error("fetch group chat conversation", e);
                                  }
                              )
                            : angular.isDefined(r.conversation) ||
                              s.ImFetchConversation(r.ID).then(function (e) {
                                  var a = [];
                                  angular.forEach(e, function (e) {
                                      var t = e.Sender.Name;
                                      a.push({ text: u.urlify(e.Text), sent: t == i });
                                  }),
                                      (r.conversation = a);
                              });
                    }
            }
            function I() {
                y.data.messageText &&
                    (y.data.chatObj.isSMS || y.data.chatObj.open || y.data.isGroup
                        ? d.sendMessage2()
                        : ((y.data.sessionStatus = "Opening Chat Session"),
                          u.inviteToChat(y.data.extension).then(
                              function (e) {
                                  (y.data.sessionOpen = !0), (y.data.sessionStatus = "Connected"), d.sendMessage2();
                              },
                              function (e) {
                                  y.data.sessionStatus = "Not Connected";
                              }
                          )));
            }
            function w(e) {
                var t, a;
                if (
                    ((y.data = {}),
                    (y.data.chatObj = null),
                    (y.data.sessionOpen = !1),
                    (y.data.sessionStatus = ""),
                    (y.data.messageText = ""),
                    (y.data.viewingHistory = !1),
                    (y.data.chatDeleted = !1),
                    (y.data.backAllowed = l.backAllowed),
                    (y.data.reachedMaxSmsLimit = !1),
                    (y.hideSession = !e),
                    e)
                ) {
                    if (((y.data.allowSend = !0), !angular.isObject(e) || e.group || e.isSMS || (e = e.extension), angular.isNumber(e) ? (t = e) : angular.isString(e) && (t = parseInt(e)), t))
                        (y.data.user = f.getUsersHash()[t]),
                            (y.data.userLabel = v.getPhrase("Chat.Title", [y.data.user.name, y.data.user.extension])),
                            (y.data.CanChat = y.data.user.CanChat),
                            (y.data.disableChat = !y.data.CanChat),
                            (y.data.chatObj = u.getChat(t)),
                            y.data.chatObj || (y.data.chatObj = u.addChat(t, null)),
                            (y.data.leaveAllowed = !0);
                    else if (e.isSMS) {
                        (t = e.extension), (y.data.isSMS = !0), (y.data.CanChat = !0), (y.data.disableChat = !1), (y.data.chatObj = e);
                        var n = c.globalVars.SmsNumbers.find(function (e) {
                            return e.rawNumber === y.data.chatObj.rawMyNumber;
                        });
                        if (n) {
                            var o = moment().local().toDate();
                            (y.data.isExpired = n.expires < o), (y.data.expires_date = S("date")(n.expires, "longDate")), y.data.isExpired && (y.data.allowSend = !1);
                        } else (y.data.allowSend = !1), console.warn("Unable to send because SMS number is not attached to user", y.data.chatObj.rawMyNumber);
                        if (y.data.chatObj.contact) {
                            var r = y.data.chatObj.contact;
                            (y.data.contactType = r.contactType),
                                (y.data.SMSnumber = r.phones[y.data.chatObj.contactPhoneIndex].value),
                                (y.data.firstName = r.firstName),
                                (y.data.lastName = r.lastName),
                                (y.data.email = r.email),
                                (y.data.photo = r.photo),
                                (y.data.company = r.source.Company),
                                (y.data.title = r.source.Title);
                        } else (y.data.contactType = void 0), (y.data.SMSnumber = t);
                    } else {
                        (a = e.group), (t = e.extension), (y.data.user = null), (y.data.CanChat = !0), (y.data.disableChat = !1), (y.data.chatObj = u.getChat(null, a)), (y.data.groupMembers = A(y.data.chatObj.group));
                        var i = p.getExtension();
                        (y.data.leaveAllowed = !a.IsBuddyList && i != a.Owner.Name && y.data.groupMembers[i]),
                            (y.data.isGroup = angular.isDefined(y.data.chatObj.group) && null !== y.data.chatObj.group),
                            y.data.chatObj.missedChatAlert && (y.data.viewingHistory = !0);
                    }
                    if (
                        ((y.data.extension = t),
                        y.data.chatObj.open ? ((y.data.sessionOpen = !0), (y.data.sessionStatus = "Connected")) : ((y.data.sessionOpen = !1), (y.data.sessionStatus = "Not Connected")),
                        angular.isArray(y.data.chatObj.pastSessions) ||
                            (y.data.chatObj.isSMS
                                ? C.post("/ucapi/smsHistory/fetchSessions", { otherParty: y.data.chatObj.extension, myNumber: y.data.chatObj.myNumber }).then(
                                      function (e) {
                                          e.data.Data.length &&
                                              (0 < y.data.chatObj.messages.length && e.data.Data.splice(e.data.Data.length - 1, 1), e.data.Data.length && (D(e.data.Data[e.data.Data.length - 1]), (y.data.viewingHistory = !0)));
                                          y.data.chatObj.pastSessions = e.data.Data.map(function (e) {
                                              return (e.sessionStart = u.getDisplayTime(e.SessionStart)), e;
                                          });
                                      },
                                      function (e) {
                                          console.error("get sms chat history", e);
                                      }
                                  )
                                : y.data.isGroup
                                ? y.data.chatObj.group.HasHistory &&
                                  C.post("/ucapi/groupchat/fetchSessions", { id: y.data.chatObj.group.ID }).then(
                                      function (e) {
                                          ((y.data.chatObj.pastSessions = e.data.Data.map(function (e) {
                                              return (e.sessionStart = u.getDisplayTime(e.SessionStart)), e;
                                          })),
                                          e.data.Data.length) && (D(e.data.Data[e.data.Data.length - 1]), (y.data.viewingHistory = !0));
                                      },
                                      function (e) {
                                          console.error("get chat history for group", e);
                                      }
                                  )
                                : d.getChatHistory(y.data.extension).then(
                                      function (e) {
                                          e.length && (0 < y.data.chatObj.messages.length && e.splice(e.length - 1, 1), e.length && (D(e[e.length - 1]), (y.data.viewingHistory = !0))),
                                              (y.data.chatObj.pastSessions = e.map(function (e) {
                                                  return (e.sessionStart = u.getDisplayTime(e.start)), e;
                                              }));
                                      },
                                      function (e) {}
                                  )),
                        d.clearChatIndicators(),
                        y.data.isGroup)
                    ) {
                        y.data.allowSend = c.globalVars.IsAdvancedUser || c.globalVars.IsAttendant;
                        var s = {};
                        (s[p.getExtension()] = !0),
                            angular.isArray(y.data.chatObj.group.Members) &&
                                angular.forEach(y.data.chatObj.group.Members, function (e) {
                                    s[e.Name] = !0;
                                }),
                            (y.data.recipientChoices = []),
                            angular.forEach(f.getUsers(), function (e) {
                                if (e.extension && !s[e.extension]) {
                                    var t = e.name == e.extension ? e.name : e.name + " (" + e.extension + ")",
                                        a = { obj: e, name: e.name, extension: e.extension, imageURL: e.photo, label: t };
                                    y.data.recipientChoices.push(a);
                                }
                            }),
                            (y.data.selectedUser = void 0);
                    }
                }
            }
            console.debug("ChatSessionCtrl starts"),
                (y.addToContact = function () {
                    e.open(y.data.SMSnumber).result.then(function (e) {
                        e && u.getSmsChatObject(y.data.chatObj.myNumber, y.data.chatObj.extension);
                    });
                }),
                (y.back = function () {
                    d.back();
                }),
                (y.callExternalNumber = function () {
                    var e,
                        t = y.data.chatObj.contact.contactType;
                    if ("Internal" === t) {
                        var a = f.getUsersHash();
                        e = a[y.data.chatObj.contact.extension];
                    } else e = y.data.chatObj.contact;
                    b.callNumber(e, t, y.data.SMSnumber, "Mobile");
                }),
                (y.callUser = function () {
                    b.callNumber(y.data.user, "Internal", y.data.user.extension);
                }),
                (y.deleteConversation = function (a) {
                    var e = y.data.chatObj.isSMS ? "/ucapi/smsHistory/DeleteConversation" : "/ucapi/im/DeleteConversation";
                    C.post(e, { conversations: [a.ID] }).then(function (e) {
                        var t = y.data.chatObj.pastSessions.indexOf(a);
                        0 <= t && y.data.chatObj.pastSessions.splice(t, 1);
                    });
                }),
                (y.endChat = function () {
                    if (y.data.isGroup) {
                        for (var e = y.data.chatObj.group, t = -1, a = p.getExtension(), n = 0; n < e.Members.length; n++)
                            if (e.Members[n].Name == a) {
                                t = n;
                                break;
                            }
                        0 <= t &&
                            (e.Members.splice(t, 1),
                            C.post("/api/imgroups", e).then(
                                function (e) {
                                    d.back();
                                },
                                function (e) {
                                    console.error("deleting from group", e);
                                }
                            ));
                    } else u.closeChat(y.data.extension, !0);
                    l.chatParm = null;
                }),
                (y.fetchConversation = D),
                (y.keyPressed = function (e) {
                    null === P ? y.data.isGroup || y.data.chatObj.isSMS || s.ImTyping(y.data.extension) : d.killKeydownTimer();
                    d.globalVars.Settings.SendMessageOnEnter && 13 === e.which && (d.enterPressed(), e.preventDefault());
                    y.data.isGroup ||
                        y.data.chatObj.isSMS ||
                        (P = n(function () {
                            s.ImIdle(y.data.extension), (P = null);
                        }, 2500));
                }),
                (y.sendMessage = I),
                (y.showChatUserDetails = function (e) {
                    t.open(e).result.then(function (e) {
                        console.debug("data", e);
                    });
                }),
                (y.startChat = w),
                (y.videoCallUser = function () {
                    h.startVideo(y.data.user.extension);
                }),
                (d.getChatHistory = function (e) {
                    var a = r.defer();
                    return (
                        s.ImFetchSessions(e).then(
                            function (e) {
                                var t = [];
                                angular.forEach(e, function (e) {
                                    t.push({ ID: e.ID, type: "SESSION", start: g.toDate(e.SessionStart), end: g.toDate(e.SessionEnd), open: !1 });
                                }),
                                    a.resolve(t);
                            },
                            function (e) {
                                a.reject(e);
                            }
                        ),
                        a.promise
                    );
                }),
                (d.getPictureURL = function (e) {
                    return e.sent ? p.getUser().photo : y.data.user.photo;
                }),
                (d.setFocusToInput = function () {
                    try {
                        angular.element(o[0].querySelector("#idMessageText"))[0].focus();
                    } catch (e) {}
                }),
                (d.sendMessage2 = function () {
                    (y.data.disableChat = !0),
                        u.sendMessage(y.data.chatObj, y.data.messageText).then(
                            function (e) {
                                console.debug("new chatMessage", e),
                                    (y.data.disableChat = !1),
                                    (y.data.messageText = ""),
                                    n(function () {
                                        d.setFocusToInput();
                                    }, 250);
                            },
                            function (e) {
                                (y.data.disableChat = !1),
                                    (y.data.messageText = ""),
                                    n(function () {
                                        d.setFocusToInput();
                                    }, 250),
                                    429 === e.status || 430 === e.status
                                        ? ((y.data.allowSend = !1), (y.data.reachedMaxSmsLimit = !0))
                                        : i.showToast("error", v.getPhrase("ChatSendError.title"), v.getPhrase("ChatSendError.body", [e.status]));
                            }
                        );
                }),
                (d.enterPressed = function () {
                    y.data.messageText.length && I();
                }),
                (d.clearChatIndicators = function () {
                    u.clearUnreadChats(y.data.chatObj);
                });
            var P = null;
            function T() {
                var e = angular.element("#idChatSendMessage"),
                    t = e[0] ? e[0].offsetHeight : 0;
                y.chatSessionHeight = c.ChatWindowHeight - 65 - t;
            }
            function A(e) {
                var n = {};
                if (e && !e.IsBuddyList) {
                    e.Owner && (n[parseInt(e.Owner.Name)] = !0),
                        angular.forEach(e.Members, function (e) {
                            n[parseInt(e.Name)] = !0;
                        });
                    var o = f.getUsersHash();
                    angular.forEach(n, function (e, t) {
                        var a = o[t];
                        n[t] = a.name == a.extension ? a.name : a.name + " (" + a.extension + ")";
                    });
                }
                return n;
            }
            (d.killKeydownTimer = function () {
                P && (n.cancel(P), (P = null));
            }),
                (d.insertEmoji = function (e) {
                    y.data.messageText += e;
                });
            var M = d.$on("IM_RECEIVED", function (e, t) {
                    t.chatObj && (y.data.isGroup || t.chatObj.extension == y.data.extension) && d.clearChatIndicators();
                }),
                N = d.$on("IM_END", function (e, t) {
                    t.chatObj && (y.data.isGroup || t.chatObj.extension == y.data.extension) && d.clearChatIndicators();
                }),
                O = d.$on("IM_TYPING", function (e, t) {
                    t.chatObj && t.chatObj.extension == y.data.extension && (y.data.typing = t.chatObj.typing);
                }),
                V = d.$on("SmsChanged", function (e, t) {
                    (console.log("SmsChanged", t), y.data.chatObj.isSMS) &&
                        (t[0].find(function (e) {
                            return e.Number === y.data.chatObj.myNumber;
                        }) ||
                            ((y.data.allowSend = !1), (y.data.leaveAllowed = !1), (y.data.chatDeleted = !0)));
                }),
                L =
                    ((V = d.$on("ImGroupRemove", function (e, t) {
                        console.log("ImGroupRemove", t), (y.data.allowSend = !1), (y.data.leaveAllowed = !1), (y.data.chatDeleted = !0);
                    })),
                    d.$on("ImGroupChange", function (e, t) {
                        console.debug("ImGroupChange", t);
                        var a = A(t.group),
                            n = [],
                            o = [];
                        angular.forEach(y.data.groupMembers, function (e, t) {
                            a[t] || o.push(e);
                        }),
                            angular.forEach(a, function (e, t) {
                                y.data.groupMembers[t] || n.push(e);
                            }),
                            console.log("ImGroupChange", n, o),
                            angular.isArray(o) && 0 < o.length && i.showToast("warning", v.getPhrase("LeftChatGroup", [o.join(", ")]));
                    })),
                E = d.$on("AVAILABILITY_CHANGE", function (e, t) {
                    d.$apply(function () {
                        var e = t[0];
                        parseInt(e.Number) == y.data.extension &&
                            (y.data.CanChat !== e.CanChat && ((y.data.CanChat = e.CanChat), (y.data.disableChat = !y.data.CanChat), u.addCanChatNotification(y.data.chatObj, e.CanChat)), e.CanChat || (y.data.chatObj.open = !1));
                    });
                }),
                U = d.$watch(
                    function () {
                        return m.incomingAndAnsweredCalls;
                    },
                    function (e, t) {
                        n(function () {
                            i.windowUpdated(), T();
                        }, 250);
                    }
                ),
                $ = d.$watch(
                    function () {
                        return l.chatParm;
                    },
                    function (e, t) {
                        w(l.chatParm),
                            n(function () {
                                T();
                            }, 250);
                    }
                ),
                x = d.$watch(
                    function () {
                        return c.ChatWindowHeight;
                    },
                    function (e) {
                        console.debug("ChatWindowHeight", e), T();
                    }
                );
            function j(e, t, a) {
                if (e) {
                    var n = !1;
                    "sent" === t
                        ? (e.messageStatusClass = "fas fa-check-circle text-muted")
                        : "delivered" === t
                        ? (e.messageStatusClass = "fas fa-check-circle text-primary")
                        : "undelivered" === t || a
                        ? ((e.messageStatusClass = "fas fa-times-octagon text-danger"), (n = !0))
                        : (e.messageStatusClass = null),
                        (e.messageStatusText = n ? t + " (" + a + ")" : null),
                        (e.messageErrorCode = a);
                }
            }
            var R = d.$on("SMS_STATUS", function (e, t) {
                var a = t[0];
                a.ErrorCode && console.warn("SMS Send Message Error", a.MessageSid, a.MessageStatus, a.ErrorCode);
                var n = a.MessageSid;
                if (angular.isArray(y.data.chatObj.messages)) {
                    var o = y.data.chatObj.messages.find(function (e) {
                        return n === e.MessageSid;
                    });
                    a.MessageStatus && (a.MessageStatus = a.MessageStatus.toLowerCase()), j(o, a.MessageStatus, a.ErrorCode);
                    var r = y.data.chatObj.messages.filter(function (e) {
                        return e.messageStatusClass && !e.messageErrorCode;
                    });
                    console.debug("allDeliveredMessages", r),
                        angular.forEach(r, function (e) {
                            e !== o && j(e, null, null);
                        });
                }
            });
            d.$on("$destroy", function () {
                console.debug("ChatSessionCtrl destroyed"), (l.chatParm = null), (l.backAllowed = !1), R && R(), x && x(), $ && $(), U && U(), E && E(), L && L(), V && V(), O && O(), N && N(), M && M();
            }),
                (y.hideSession = !0),
                n(function () {
                    i.windowUpdated(), T(), d.setFocusToInput();
                }, 250);
        }
        angular
            .module("ChatModule", ["ChatUserDetailsModal", "AddToContactModal"])
            .factory("$Chats", t)
            .controller("ChatCtrl", a)
            .controller("ChatListCtrl", n)
            .controller("ChatSessionCtrl", o)
            .directive("compileHtml", [
                "$ConfirmationModal",
                "$compile",
                "$dialModalService",
                "GetUsersService",
                "$rootScope",
                "UCLocaleService",
                function (r, i, s, l, c, d) {
                    return {
                        restrict: "A",
                        link: function (t, a, e) {
                            function n(e) {
                                var t = l.getUserFromExtension(e);
                                t ? s.callNumber(t, "Internal", e) : s.open({ number: e, contactType: "External", dialImmediate: !0 });
                            }
                            (t.open = function (e) {
                                console.debug("open", e), window.open(e, "_blank");
                            }),
                                (t.call = function (t) {
                                    (console.debug("call", t), c.globalVars.Settings.Is4xxDevice)
                                        ? n(t)
                                        : r.open(void 0, d.getPhrase("CallNum.Body", [t]), "YES_NO").result.then(function (e) {
                                              e && n(t);
                                          });
                                }),
                                (t.email = function (e) {
                                    console.debug("email", e), window.open("mailto:" + e, "_top");
                                });
                            var o = t.$watch(
                                function () {
                                    return t.$eval(e.compileHtml);
                                },
                                function (e) {
                                    a.html(e), i(a.contents())(t), o();
                                }
                            );
                        },
                    };
                },
            ])
            .config(e),
            (e.$inject = ["$stateProvider"]),
            (t.$inject = ["ChatService"]),
            (a.$inject = ["$AppMain", "$Chats", "$rootScope", "$scope", "$stateParams", "$timeout"]),
            (n.$inject = ["$Chats", "ChatService", "$ConfirmationModal", "$ContactsNew", "CurrentUser", "$filter", "GetUsersService", "$http", "$rootScope", "$scope", "UCLocaleService", "$Utilities", "$timeout"]),
            (o.$inject = [
                "$AddToContactModal",
                "$Chats",
                "$ChatUserDetailsModal",
                "$rootScope",
                "$scope",
                "$stateParams",
                "$timeout",
                "$document",
                "$q",
                "HttpService",
                "ChatService",
                "$Utilities",
                "GetUsersService",
                "CurrentUser",
                "$AppMain",
                "Calls",
                "$dialModalService",
                "$UCVideo",
                "$http",
                "UCLocaleService",
                "$filter",
            ]);
    })(),
    (function () {
        "use strict";
        function e(e) {
            e.state("app.callHistory", { url: "/callHistory", views: { main: { templateUrl: "views/callHistory.html", controller: "CallHistoryCtrl as callHistoryCtrl" } } });
        }
        function t(t, i, o, s, r, a, l, n, c, e, d, u, g, f) {
            s(function () {
                f.windowUpdated();
            }, 250),
                (i.resetVariables = function () {
                    (i.data = {}), (i.data.remainingRecords = !1), (i.data.deletingHistory = !1), (i.data.callHistory = []);
                }),
                i.resetVariables(),
                (i.convertStringToDate = function (e) {
                    var t = e.split("T"),
                        a = t[0].split("-"),
                        n = t[1].split(":");
                    return new Date(parseInt(a[0]), parseInt(a[1]) - 1, parseInt(a[2]), parseInt(n[0]), parseInt(n[1]), parseInt(n[2]));
                }),
                (i.getHistory = function (e, a) {
                    (i.data.readingCallHistory = !0),
                        n.GetCallHistoryAll(e, a).then(
                            function (e) {
                                angular.forEach(e.Data, function (e) {
                                    var t = c.toDate(e.CallTime);
                                    (e.Time = o("date")(t, "shortTime")), (e.Date = o("date")(t, "mediumDate")), (e.CallTime = t), (e.filterMask = e.Answered ? 8 : 4), (e.filterMask = e.filterMask | (e.Outbound ? 1 : 2));
                                }),
                                    (i.data.callHistory = i.data.callHistory.concat(e.Data)),
                                    (i.gridOptions1.data = i.data.callHistory),
                                    (i.data.remainingRecords = 0 < e.Remaining);
                                var t = e.First + e.Count;
                                (i.data.readingCallHistory = !1), i.data.remainingRecords && i.getHistory(t, a);
                            },
                            function (e) {
                                i.data.readingCallHistory = !1;
                            }
                        );
                }),
                (i.getMoreHistory = function () {
                    i.getHistory(start, limit);
                }),
                (i.getMissedCallClass = function (e) {
                    return e.Answered ? "success" : "danger";
                }),
                (i.getCallDirectionClass = function (e) {
                    return e.Outbound ? "glyphicon glyphicon-arrow-left" : "glyphicon glyphicon-arrow-right";
                }),
                (i.showCallHistory = function () {
                    return console.log("Show call history:" + t.globalVars.currentCallHistoryFilterObj.type), !1;
                }),
                (i.getExportColumns = function () {
                    return ["CallTime", "Number", "Name", "Status", "Duration", "Line"];
                }),
                (i.getArray = function () {
                    return i.lazyLoadExportData;
                }),
                (i.lazyLoadExportData = function () {
                    return i.getCallHistoryForExport();
                }),
                (i.getCallHistoryForExport = function () {
                    i.data.csvFile = "callHistory.csv";
                    var e = [];
                    return (
                        angular.forEach(i.data.callHistory, function (a) {
                            var n = {};
                            angular.forEach(i.getExportColumns(), function (e) {
                                if ("CallTime" === e) n[e] = o("date")(a.CallTime, "short");
                                else if ("Status" === e) {
                                    var t;
                                    (t = a.Outbound ? "Outgoing" : a.Answered ? "Answered" : "Missed"), (n[e] = t);
                                } else n[e] = a[e];
                            }),
                                e.push(n);
                        }),
                        e
                    );
                }),
                (i.deleteSelected = function () {
                    var r = [];
                    (i.data.deletingHistory = !0),
                        angular.forEach(i.grid1Api.selection.getSelectedRows(), function (e) {
                            r.unshift(e.Id);
                        }),
                        n.deleteCallHistory(r).then(
                            function (e) {
                                if (r.length == i.data.callHistory.length) i.data.callHistory = [];
                                else
                                    for (var t = i.data.callHistory.length - 1, a = 0; a < r.length; a++)
                                        for (var n = r[a], o = t; 0 <= o; o--) {
                                            if (n === i.data.callHistory[o].Id) {
                                                i.data.callHistory.splice(o, 1), (t = o - 1);
                                                break;
                                            }
                                        }
                                s(function () {
                                    i.$apply(function () {
                                        (i.gridOptions1.data = i.data.callHistory), (i.data.deletingHistory = !1), (i.data.selectedRowsCount = 0);
                                    });
                                }, 0);
                            },
                            function (e) {
                                i.data.deletingHistory = !1;
                            }
                        );
                }),
                (i.columnDefs = [
                    {
                        field: "CallTime",
                        type: "date",
                        sort: { direction: u.DESC },
                        enableHiding: !0,
                        displayName: e.getPhrase("Column.CallTime"),
                        cellTemplate:
                            '<div class="ui-grid-cell-contents"><span ng-class="{\'text-danger\': !row.entity.Outbound && !row.entity.Answered, \'call-connected\': !row.entity.Outbound && row.entity.Answered}">{{COL_FIELD|date:"MMM d, y h:mm a"}}</span></div>',
                    },
                    {
                        field: "Outbound",
                        enableHiding: !1,
                        enableSorting: !1,
                        width: 50,
                        displayName: " ",
                        cellTemplate:
                            "<div class=\"ui-grid-cell-contents\"><span ng-class=\"{'text-danger': !row.entity.Outbound && !row.entity.Answered, 'call-connected': !row.entity.Outbound && row.entity.Answered}\"><span ng-class=\"{'fas fa-video fa-fw': row.entity.WebRTC, 'fa fa-fw': !row.entity.WebRTC}\"></span><span ng-class=\"{'fa fa-arrow-left fa-fw fa-outbound-call': row.entity.Outbound, 'fa fa-arrow-right fa-fw fa-inbound-call': !row.entity.Outbound}\"></span></span></div>",
                    },
                    {
                        field: "Number",
                        enableHiding: !0,
                        displayName: e.getPhrase("Number"),
                        cellTemplate:
                            '<div class="ui-grid-cell-contents"><span ng-class="{\'text-danger\': !row.entity.Outbound && !row.entity.Answered, \'call-connected\': !row.entity.Outbound && row.entity.Answered}"><a ng-click="grid.appScope.dialFromCallHistory(row.entity)">{{COL_FIELD}}</a></span></div>',
                    },
                    {
                        field: "Name",
                        enableHiding: !0,
                        displayName: e.getPhrase("Column.Name"),
                        cellTemplate:
                            "<div class=\"ui-grid-cell-contents\"><span ng-class=\"{'text-danger': !row.entity.Outbound && !row.entity.Answered, 'call-connected': !row.entity.Outbound && row.entity.Answered}\">{{COL_FIELD}}</span></div>",
                    },
                    {
                        field: "Answered",
                        visible: !1,
                        enableHiding: !0,
                        displayName: e.getPhrase("Column.Answered"),
                        enableSorting: !0,
                        cellTemplate: '<div class="ui-grid-cell-contents text-center"><span ng-class="{\'fa fa-phone call-connected\': !row.entity.Outbound && row.entity.Answered}"></span></div>',
                    },
                    {
                        field: "Duration",
                        enableHiding: !0,
                        displayName: e.getPhrase("Column.Duration"),
                        cellTemplate:
                            "<div class=\"ui-grid-cell-contents\"><span ng-class=\"{'text-danger': !row.entity.Outbound && !row.entity.Answered, 'call-connected': !row.entity.Outbound && row.entity.Answered}\">{{COL_FIELD}}</span></div>",
                    },
                    { field: "Line", visible: !1, enableHiding: !0, displayName: e.getPhrase("Column.Line"), cellTemplate: '<div class="ui-grid-cell-contents text-center"><span>{{COL_FIELD}}</span></div>' },
                ]),
                (i.data.selectedRowsCount = 0),
                (i.restoringState = !1);
            (i.gridOptions1 = {
                columnDefs: i.columnDefs,
                enableColumnMenus: !1,
                enableSorting: !0,
                enableGridMenu: !0,
                gridMenuTitleFilter: function (e) {
                    var t = a.defer();
                    return (
                        s(function () {
                            t.resolve(e);
                        }, 50),
                        t.promise
                    );
                },
                gridMenuShowHideColumns: !0,
                saveWidths: !0,
                saveOrder: !0,
                saveScroll: !1,
                saveFocus: !1,
                saveVisible: !0,
                saveSort: !0,
                saveFilter: !1,
                savePinning: !1,
                multiSelect: !0,
                enableRowHeaderSelection: !0,
                modifierKeysToMultiSelect: !1,
                enableSelectionBatchEvent: !0,
                enableRowSelection: !0,
                enableSelectAll: !0,
                selectionRowHeaderWidth: 35,
                onRegisterApi: function (e) {
                    (i.grid1Api = e),
                        i.grid1Api.colResizable.on.columnSizeChanged(i, function (e, t) {
                            console.log("columnSizeChanged"), i.saveState();
                        }),
                        i.grid1Api.colMovable.on.columnPositionChanged(i, function (e, t, a) {
                            console.log("columnPositionChanged"), i.saveState();
                        }),
                        i.grid1Api.selection.on.rowSelectionChanged(i, function (e) {
                            e.isSelected ? i.data.selectedRowsCount++ : i.data.selectedRowsCount--;
                        }),
                        i.grid1Api.selection.on.rowSelectionChangedBatch(i, function (e) {
                            angular.forEach(e, function (e) {
                                e.isSelected ? i.data.selectedRowsCount++ : i.data.selectedRowsCount--;
                            });
                        }),
                        i.grid1Api.core.on.columnVisibilityChanged(i, function (e) {
                            console.log("columnVisibilityChanged: name=" + e.colDef.name + " visible: " + e.colDef.visible), i.restoringState || i.saveState();
                        }),
                        s(function () {
                            i.restoreState(t.globalVars.Settings.CallHistoryGridState);
                        }, 100);
                },
            }),
                (i.saveState = function () {
                    var e = i.grid1Api.saveState.save();
                    (t.globalVars.Settings.CallHistoryGridState = e), d.flushAllLocalApplicationSettings();
                }),
                (i.clearState = function () {
                    s(function () {
                        (t.globalVars.Settings.CallHistoryGridState = void 0),
                            d.flushAllLocalApplicationSettings(),
                            i.grid1Api.grid.buildColumns({ orderByColumnDefs: !0 }),
                            angular.forEach(i.grid1Api.grid.columns, function (e) {
                                "selectionRowHeaderCol" !== e.name && ((e.width = "*"), (e.widthType = "auto"));
                            }),
                            i.grid1Api.grid.refreshCanvas(!0).then(function () {
                                i.grid1Api.grid.refresh();
                            });
                    }, 0);
                }),
                (i.restoreState = function (e) {
                    e && ((i.restoringState = !0), i.grid1Api.saveState.restore(i, e), (i.restoringState = !1));
                }),
                (i.dialFromCallHistory = function (e) {
                    if (e.WebRTC) r.startVideo(e.Number);
                    else {
                        var t = e.Number.replace(/[^0-9]/g, ""),
                            a = parseInt(t),
                            n = l.getUsersHash()[a];
                        n ? g.dialContact(n, void 0, "Internal") : g.dialContact(e, void 0, "External");
                    }
                }),
                i.$on("HistoryAdd", function (e, t) {
                    s(function () {
                        i.resetVariables(), i.getHistory(0, 200);
                    }, 3e3);
                }),
                i.getHistory(0, 200);
        }
        angular.module("CallHistoryModule", []).controller("CallHistoryCtrl", t).config(e),
            (e.$inject = ["$stateProvider"]),
            (t.$inject = ["$rootScope", "$scope", "$filter", "$timeout", "$UCVideo", "$q", "GetUsersService", "HttpService", "$Utilities", "UCLocaleService", "UCStorageService", "uiGridConstants", "$dialModalService", "$AppMain"]);
    })(),
    angular.module("aboutModal", []).service("$aboutModalService", [
        "$uibModal",
        function (t) {
            this.open = function (e) {
                return t.open({
                    templateUrl: "modals/views/aboutModal.html",
                    controller: "aboutModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !0,
                    resolve: {
                        productVersion: function () {
                            return e;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("aboutModal").controller("aboutModalController", [
        "$rootScope",
        "$scope",
        "$uibModalInstance",
        "productVersion",
        function (e, t, a, n) {
            (t.data = {}),
                (t.data.productVersion = n),
                (t.okClicked = function () {
                    a.close(!0);
                });
        },
    ]),
    angular.module("busyInfoModal", []).service("$busyInfoModalService", [
        "$uibModal",
        function (n) {
            var o,
                e = {};
            return (
                (e.open = function (e, t) {
                    var a = t || "sm";
                    return (o = n.open({
                        templateUrl: "modals/views/busyInfoModal.html",
                        controller: "busyInfoModalController",
                        size: a,
                        backdrop: "static",
                        resolve: {
                            text: function () {
                                return e;
                            },
                        },
                        keyboard: !1,
                    }));
                }),
                (e.close = function () {
                    o && (o.close(!0), (o = null));
                }),
                e
            );
        },
    ]),
    angular.module("busyInfoModal").controller("busyInfoModalController", [
        "$scope",
        "text",
        function (e, t) {
            (e.data = {}), (e.data.text = t);
        },
    ]),
    angular.module("chooseNumberToCallModal", []).service("$chooseNumberToCallModalService", [
        "$uibModal",
        function (t) {
            this.open = function (e) {
                return t.open({
                    templateUrl: "modals/views/chooseNumberToCallModal.html",
                    controller: "chooseNumberToCallModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !1,
                    resolve: {
                        userObj: function () {
                            return e;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("chooseNumberToCallModal").controller("chooseNumberToCallModalController", [
        "$rootScope",
        "$scope",
        "$window",
        "$uibModalInstance",
        "userObj",
        function (e, t, a, n, o) {
            (t.modalHeight = (1 * a.innerHeight) / 3),
                (t.data = {}),
                (t.data.userObj = o),
                (t.closeDialog = function () {
                    n.dismiss("cancel");
                }),
                (t.chooseNumber = function (e) {
                    n.close({ userObj: t.data.userObj, altNumberIndex: e });
                });
        },
    ]),
    angular
        .module("ConfirmationModal", [])
        .constant("YES_NO", { yes: !0, no: !0, ok: !1, cancel: !1 })
        .constant("OK", { yes: !1, no: !1, ok: !0, cancel: !1 })
        .constant("OK_CANCEL", { yes: !1, no: !1, ok: !0, cancel: !0 })
        .service("$ConfirmationModal", [
            "$uibModal",
            "YES_NO",
            "OK",
            "OK_CANCEL",
            function (o, e, r, t) {
                this.open = function (e, t, a, n) {
                    a = a || r;
                    return o.open({
                        templateUrl: "modals/views/confirmationModal.html",
                        controller: "confirmationModalController",
                        backdrop: "static",
                        keyboard: !0,
                        resolve: {
                            title: function () {
                                return e;
                            },
                            message: function () {
                                return t;
                            },
                            type: function () {
                                return a;
                            },
                        },
                    });
                };
            },
        ]),
    angular.module("ConfirmationModal").controller("confirmationModalController", [
        "$scope",
        "$uibModalInstance",
        "title",
        "message",
        "type",
        "YES_NO",
        "OK",
        "OK_CANCEL",
        function (e, t, a, n, o, r, i, s) {
            (e.data = {}),
                (e.data.title = a),
                (e.data.message = n),
                (e.data.buttons = "YES_NO" === o ? r : "OK" === o ? i : "OK_CANCEL" === o ? s : i),
                (e.yesClicked = function () {
                    t.close(!0);
                }),
                (e.noClicked = function () {
                    t.close(!1);
                }),
                (e.closeDialog = function () {
                    t.dismiss("cancel");
                });
        },
    ]),
    angular.module("confirmControlExtensionModal", []).service("$confirmControlExtensionModalService", [
        "$uibModal",
        function (t) {
            this.open = function (e) {
                return t.open({
                    templateUrl: "modals/views/confirmControlExtensionModal.html",
                    controller: "confirmControlExtensionModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !1,
                    resolve: {
                        extension: function () {
                            return e;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("confirmControlExtensionModal").controller("confirmControlExtensionModalController", [
        "$scope",
        "$uibModalInstance",
        "extension",
        function (e, t, a) {
            (e.data = {}),
                (e.data.extension = a),
                (e.data.rememberChoice = !1),
                (e.overrideClicked = function () {
                    t.close({ action: "TAKE_CONTROL", rememberChoice: e.data.rememberChoice });
                }),
                (e.closeDialog = function () {
                    t.close({ action: "CONTINUE" });
                });
        },
    ]),
    angular.module("dialModal", []).service("$dialModalService", [
        "$uibModal",
        "$rootScope",
        "$filter",
        "Calls",
        "HttpService",
        "$Utilities",
        function (t, d, u, g, a, f) {
            var n,
                o,
                r,
                i,
                s,
                l,
                c,
                p,
                m,
                b,
                h,
                C,
                v = {};
            return (
                (v.open = function (e) {
                    return (
                        console.log("dialModalService data", e),
                        v.reset(),
                        angular.isObject(e) &&
                            ((o = e.isTransfer),
                            (r = e.transferMode ? e.transferMode : "IMMEDIATE"),
                            (i = e.isConference),
                            (s = e.currentCall),
                            (l = e.userObj),
                            (c = e.number),
                            (p = e.altType),
                            (m = e.contactType),
                            (C = e.voicemail),
                            (h = e.abandonedCallback),
                            (b = angular.isDefined(l) || e.dialImmediate)),
                        !e || d.globalVars.Settings.PromptOnOutgoing || e.isTransfer || e.isConference || e.voicemail
                            ? (n = t.open({
                                  templateUrl: "modals/views/dialModal.html",
                                  controller: "dialModalController",
                                  backdrop: "static",
                                  keyboard: !0,
                                  resolve: {
                                      contactType: function () {
                                          return m;
                                      },
                                      startCallNow: function () {
                                          return b;
                                      },
                                      dialContactObj: function () {
                                          return l;
                                      },
                                      numberToDial: function () {
                                          return c;
                                      },
                                      numberToDialAltType: function () {
                                          return p;
                                      },
                                      voicemail: function () {
                                          return C;
                                      },
                                      parmAbandonedCallback: function () {
                                          return h;
                                      },
                                      transferMode: function () {
                                          return r;
                                      },
                                  },
                              }))
                            : ((n = null),
                              a.dial(e.number).then(
                                  function (e) {
                                      console.log("Dial successful");
                                  },
                                  function (e) {
                                      console.log("Dial error");
                                  }
                              ),
                              null)
                    );
                }),
                (v.reset = function () {
                    (p = c = s = l = null), (m = void 0), (h = C = b = i = o = !1);
                }),
                (v.hide = function () {
                    n && (n.close(!0), (n = null));
                }),
                (v.currentCall = function () {
                    return s;
                }),
                (v.callEmployee = function () {
                    return l;
                }),
                (v.isCallTransfer = function () {
                    return o;
                }),
                (v.isConference = function () {
                    return i;
                }),
                (v.abandonedCallback = function () {
                    return h;
                }),
                (v.callNumber = function (e, t, a, n, o) {
                    if (!d.globalVars.IsCallProcessingAvailable) return console.error("Abandoned, call processing not available"), !1;
                    if ("O365" === t) a = "business" === o ? e.BusinessPhones[0] : e.MobilePhone;
                    else if (d.globalVars.IsGoogleIntegration && "GoogleContact" !== t) {
                        var r = d.globalVars.GooglePhoneNumbersHash[f.toDigits(a)];
                        r && ((e = { Number: a, name: r.googleUser.name.displayName, photo: r.googleUser.photo }), (t = "GoogleContact"), (o = r.type));
                    }
                    var i = {};
                    if (
                        (angular.isObject(e) && (i.userObj = e),
                        (i.number = a),
                        (i.altType = n),
                        (i.contactType = t),
                        (i.voicemail = !1),
                        (i.dialImmediate = !0),
                        0 < u("filterVisible")(g.getActiveCalls()).length && ((i.isTransfer = !0), (i.transferMode = "CLICK_TO_TRANSFER" === d.globalVars.DefaultTransfer.data ? "IMMEDIATE" : d.globalVars.DefaultTransfer.data)),
                        d.globalVars.Settings.Is4xxDevice)
                    ) {
                        var s = -1;
                        if (i.altType)
                            for (var l = i.userObj.AlternateNumbers, c = 0; c < l.length; c++)
                                if (i.number === l[c].Number) {
                                    s = c;
                                    break;
                                }
                        v.dialContact(i.userObj, s, i.contactType);
                    } else v.open(i);
                }),
                (v.dialInternalContact = function (e, t) {
                    v.dialContact(e, t, "Internal");
                }),
                (v.dialContact = function (e, t, a, n) {
                    var o, r, i;
                    if ((angular.isDefined(t) && 0 <= t ? ((r = (o = e.AlternateNumbers[t]).Number), (i = o.AltType)) : ((r = e.Number), (i = void 0)), d.globalVars.Settings.Is4xxDevice)) {
                        var s = d.globalVars.telScheme + f.toDigits(r);
                        console.log("window.open", s), window.open(s, "_system");
                    } else v.callNumber(e, a, r, i, n);
                }),
                (v.dialO365Contact = function (e, t, a) {
                    var n;
                    if (((n = "business" === t ? e.BusinessPhones[0] : e.MobilePhone), d.globalVars.Settings.Is4xxDevice)) {
                        var o = d.globalVars.telScheme + f.toDigits(n);
                        console.log("window.open", o), window.open(o, "_system");
                    } else v.callNumber(e, a, n, void 0, t);
                }),
                v
            );
        },
    ]),
    angular.module("dialModal").controller("dialModalController", [
        "$scope",
        "$rootScope",
        "$timeout",
        "$filter",
        "$dialModalService",
        "$location",
        "$document",
        "Calls",
        "CurrentUser",
        "GetUsersService",
        "UCLocaleService",
        "Contacts",
        "$Utilities",
        "HttpService",
        "$uibModalInstance",
        "dialContactObj",
        "numberToDial",
        "numberToDialAltType",
        "contactType",
        "voicemail",
        "startCallNow",
        "UCStorageService",
        "parmAbandonedCallback",
        "$UCVideo",
        "transferMode",
        "$ContactsNew",
        function (i, o, e, a, n, t, r, s, l, c, d, u, g, f, p, m, b, h, C, v, S, y, D, I, w, P) {
            (i.user = {}),
                (i.data = {}),
                (i.data.title = ""),
                i.data.dialButtonText,
                (i.data.cancelButtonText = ""),
                (i.data.mode = null),
                n.isCallTransfer()
                    ? ((i.data.title = d.getPhrase("TransferCall")), (i.data.mode = "TRANSFER_CALL_MODE"), (i.data.dialButtonText = d.getPhrase("TransferCall")), (i.data.cancelButtonText = d.getPhrase("Dial.EndTransfer")))
                    : n.isConference()
                    ? ((i.data.title = d.getPhrase("AddCall")), (i.data.mode = "CONFERENCE_CALL_MODE"), (i.data.dialButtonText = d.getPhrase("AddCall")), (i.data.cancelButtonText = d.getPhrase("Join")))
                    : ((i.data.title = d.getPhrase("Dial.Title.NewCall")), (i.data.mode = "MAKE_CALL_MODE"), (i.data.dialButtonText = d.getPhrase("Dial.Dial")), (i.data.cancelButtonText = d.getPhrase("Cancel"))),
                (i.data.selectedDialObject = ""),
                (i.data.dialCallObj = {}),
                (i.dialNumber = function () {
                    if ((i.buildDialCallObject(), i.data.activeCallObj.video)) return i.close(), void I.startVideo(i.data.activeCallObj.number);
                    n.isConference()
                        ? i.doConference()
                        : i.isCallTransfer()
                        ? v
                            ? f.sendToMailbox(i.data.activeCallObj.number).then(
                                  function (e) {
                                      console.log("sendToMailbox successful");
                                  },
                                  function (e) {
                                      console.log("sendToMailbox error");
                                  }
                              )
                            : i.transferCall()
                        : ((i.data.activeCallObj.isCalling = !0),
                          (i.data.activeCallObj.state = "PreDial"),
                          i.data.activeCallObj.voicemail || v
                              ? f.dialMailBox(i.data.activeCallObj.number).then(
                                    function (e) {
                                        console.log("dialMailBox successful");
                                    },
                                    function (e) {
                                        console.log("dialMailBox error");
                                    }
                                )
                              : (o.globalVars.Settings.PromptOnOutgoing || i.close(),
                                f.dial(i.data.activeCallObj.number).then(
                                    function (e) {
                                        console.log("Dial successful");
                                    },
                                    function (e) {
                                        console.log("Dial error");
                                    }
                                )));
                }),
                (i.doImmediateTransfer = function () {
                    console.info("immediate transfer"),
                        i.buildDialCallObject(),
                        i.data.activeCallObj.voicemail
                            ? f.sendToMailbox(i.data.activeCallObj.number).then(
                                  function (e) {
                                      console.log("sendToMailbox successful");
                                  },
                                  function (e) {
                                      console.log("sendToMailbox error");
                                  }
                              )
                            : ((i.data.activeCallObj.state = "PreStartTransfer"),
                              f.startTransfer(i.data.activeCallObj.number, !0).then(
                                  function (e) {
                                      console.log("startTransfer success");
                                  },
                                  function (e) {
                                      console.log("startTransfer failure");
                                  }
                              ));
                }),
                (i.doAttendedTransfer = function () {
                    console.info("attended transfer"),
                        i.buildDialCallObject(),
                        i.data.activeCallObj.voicemail
                            ? f.sendToMailbox(i.data.activeCallObj.number).then(
                                  function (e) {
                                      console.log("sendToMailbox successful");
                                  },
                                  function (e) {
                                      console.log("sendToMailbox error");
                                  }
                              )
                            : ((i.data.activeCallObj.state = "PreStartTransfer"),
                              f.startTransfer(i.data.activeCallObj.number, !1).then(
                                  function (e) {
                                      console.log("startTransfer success"), o.globalVars.Settings.PromptOnOutgoing || i.onHide();
                                  },
                                  function (e) {
                                      console.log("startTransfer failure");
                                  }
                              ));
                }),
                (i.doConference = function () {
                    (i.data.activeCallObj.state = "PreStartConference"),
                        f.startConference(i.data.activeCallObj.number).then(
                            function (e) {
                                console.log("startConference success");
                            },
                            function (e) {
                                console.log("startConference failure");
                            }
                        );
                }),
                (i.transferCall = function () {
                    "IMMEDIATE" === w ? i.doImmediateTransfer() : "ATTENDED" === w && i.doAttendedTransfer();
                }),
                (i.encodeInternalCallingLabel = function (e, t, a) {
                    var n = {};
                    if (angular.isDefined(a)) {
                        var o = a;
                        return (n.label = e + " : " + t + " (" + o + ")"), (n.dialingLabel = "<b>" + e + "</b><br/><h6>" + t + " (" + o + ")</h6>"), n;
                    }
                    return (n.label = e + " (" + t + ")"), (n.dialingLabel = "<b>" + e + "</b><br/><h6>" + t + "</h6>"), n;
                }),
                (i.encodeVoicemailLabel = function (e, t) {
                    var a = {};
                    return (a.label = e + " (" + d.getPhrase("Voicemail") + ")"), (a.dialingLabel = "<b>" + e + "</b><br/><h6>" + d.getPhrase("Voicemail") + '<span class="fa fa-caret-square-o-right"></span></h6>'), a;
                }),
                (i.encodeVideoLabel = function (e, t) {
                    var a = {};
                    return (a.label = e + " (" + d.getPhrase("Video") + ")"), (a.dialingLabel = "<b>" + e + "</b><br/><h6>" + d.getPhrase("Video") + '<span class="fas fa-video"></span></h6>'), a;
                }),
                (i.encodeExternalCallingLabel = function (e, t, a, n) {
                    n || (n = "");
                    var o = "<b>" + e + "</b><br/><h4>" + n + ' <span class="fa fa-institution"></span></h4><br/>',
                        r = e + " " + t + " : " + n + " :";
                    if (angular.isDefined(a)) {
                        (r += " (" + a + ")"), (o += "<h6>" + t + " (" + a + ")</h6>");
                    } else o += "<h6>" + t + "</h6>";
                    return { label: r, dialingLabel: o };
                }),
                (i.encodePersonalCallingLabel = function (e, t, a) {
                    var n = "<b>" + e + '</b> <h4><span class="fa fa-heart"></span></h4><br/>',
                        o = e + " (Personal)";
                    if (angular.isDefined(a)) {
                        (n += "<h6>" + t + " (" + a + ")</h6>"), (o += " " + t + " (" + a + ")");
                    } else (n += "<h6>" + t + "</h6>"), (o += " " + t);
                    return { label: o, dialingLabel: n };
                }),
                (i.encodeOutlookCallingLabel = function (e, t, a) {
                    var n = "<b>" + e + '</b> <h4><span class="fab fa-microsoft"></span> Outlook</h4><br/>',
                        o = e + " (Outlook)";
                    if (angular.isDefined(a)) {
                        (n += "<h6>" + t + " (" + a + ")</h6>"), (o += " " + t + " (" + a + ")");
                    } else (n += "<h6>" + t + "</h6>"), (o += " " + t);
                    return { label: o, dialingLabel: n };
                }),
                (i.encodeGoogleContactLabel = function (e, t, a, n) {
                    var o = "<b>" + e + '</b> <h4><span class="fa fa-google"></span>' + ("GoogleDirectory" === n ? "User" : "Contact") + "</h4><br/>",
                        r = e;
                    return angular.isDefined(a) ? ((o += "<h6>" + t + " (" + a + ")</h6>"), (r += " " + t + " (" + a + ")")) : ((o += "<h6>" + t + "</h6>"), (r += " " + t)), { label: r, dialingLabel: o };
                }),
                (i.encodeO365CallingLabel = function (e, t, a) {
                    var n = e + "<br/>",
                        o = e + " (Office 365) ";
                    if (angular.isDefined(a)) {
                        (n += "<h6>" + t + " (" + a + ")</h6>"), (o += " " + t + " (" + a + ")");
                    } else (n += "<h6>" + t + "</h6>"), (o += " " + t);
                    return { label: o, dialingLabel: n };
                }),
                (i.buildDialNumberOptions = function () {
                    var n,
                        e = [],
                        r = [];
                    angular.forEach(c.getUsers(), function (a, e) {
                        (n = i.encodeInternalCallingLabel(a.name, a.extension)),
                            r.push({ dial: g.toDigits(a.extension), name: a.name, label: n.label, dialingLabel: n.dialingLabel, imageURL: a.photo, contactType: "Internal" }),
                            o.globalVars.supportsWebRTC &&
                                a.cache.canVideo &&
                                ((n = i.encodeVideoLabel(a.name, a.extension)), r.push({ dial: a.extension, name: a.name, label: n.label, video: !0, imageURL: a.photo, contactType: "Internal" })),
                            (n = i.encodeVoicemailLabel(a.name, a.extension)),
                            r.push({ dial: a.extension, name: a.name, label: n.label, dialingLabel: n.dialingLabel, voicemail: !0, imageURL: a.photo, contactType: "Internal" }),
                            angular.forEach(a.AlternateNumbers, function (e, t) {
                                (n = i.encodeInternalCallingLabel(a.name, e.Number, e.AltType)),
                                    r.push({ dial: g.toDigits(e.Number), name: a.name, label: n.label, dialingLabel: n.dialingLabel, imageURL: a.photo, contactType: "Internal", alternateNumber: !0, alternateNumberType: e.AltType });
                            });
                    }),
                        (e = e.concat(r));
                    r = [];
                    angular.forEach(P.externalContacts(), function (a, e) {
                        var n = "";
                        angular.isDefined(a.source.FirstName) && a.source.FirstName && (n = a.source.FirstName + " "), (n += a.source.LastName), a.source.Number, a.source.Company && a.source.Company;
                        var o = i.encodeExternalCallingLabel(n, a.source.Number, void 0, a.source.Company);
                        r.push({ dial: g.toDigits(a.source.Number), name: n, label: o.label, dialingLabel: o.dialingLabel, company: a.source.Company, contactType: "External" }),
                            angular.forEach(a.source.AlternateNumbers, function (e, t) {
                                (o = i.encodeExternalCallingLabel(n, e.Number, e.AltType, a.source.Company)),
                                    r.push({ dial: g.toDigits(e.Number), name: n, label: o.label, dialingLabel: o.dialingLabel, company: a.source.Company, contactType: "External", alternateNumber: !0, alternateNumberType: e.AltType });
                            });
                    }),
                        (e = e.concat(r)),
                        (r = []);
                    var t = a("orderBy")(P.personalContacts(), "FirstName");
                    angular.forEach(t, function (e, t) {
                        var a = "";
                        angular.isDefined(e.source.FirstName) && e.source.FirstName && (a = e.source.FirstName + " "), angular.isDefined(e.source.LastName) && e.source.LastName && (a += e.source.LastName);
                        var n = i.encodePersonalCallingLabel(a, e.source.Number);
                        r.push({ dial: g.toDigits(e.source.Number), name: a, label: n.label, dialingLabel: n.dialingLabel, contactType: "Personal" }),
                            angular.forEach(e.source.AlternateNumbers, function (e, t) {
                                (n = i.encodePersonalCallingLabel(a, e.Number, e.AltType)),
                                    r.push({ dial: g.toDigits(e.altNumber), name: a, label: n.label, dialingLabel: n.dialingLabel, contactType: "Personal", alternateNumber: !0, alternateNumberType: e.AltType });
                            });
                    }),
                        (e = e.concat(r)),
                        (r = []),
                        angular.forEach(o.globalVars.GoogleContacts, function (n) {
                            var o = n.name.displayName;
                            angular.forEach(n.phoneNumbers, function (e) {
                                var t = i.encodeGoogleContactLabel(o, e.value, e.formattedType, "GoogleContact"),
                                    a = o;
                                e.formattedType && (a += " (" + e.formattedType + ")"), r.push({ name: a, imageURL: n.photo, dial: e.rawNumber, label: t.label, dialingLabel: t.dialingLabel, contactType: "GoogleContact" });
                            });
                        }),
                        (e = e.concat(r));
                    r = [];
                    angular.forEach(P.googleUsers(), function (a) {
                        angular.forEach(a.phones, function (e) {
                            var t;
                            "extension" === e.type
                                ? ((n = i.encodeInternalCallingLabel(a.name, e.rawNumber)),
                                  r.push({ name: a.name, imageURL: a.photo, dial: e.rawNumber, label: n.label, dialingLabel: n.dialingLabel, contactType: "Internal" }),
                                  (n = i.encodeVoicemailLabel(a.name, e.rawNumber)),
                                  r.push({ name: a.name, imageURL: a.photo, dial: e.rawNumber, label: n.label, dialingLabel: n.dialingLabel, voicemail: !0 }))
                                : ((n = i.encodeGoogleContactLabel(a.name, e.value, e.formattedType, "GoogleDirectory")),
                                  e.formattedType && (t = a.name + " (" + e.formattedType + ")"),
                                  r.push({ name: t, imageURL: a.photo, dial: e.rawNumber, label: n.label, dialingLabel: n.dialingLabel, contactType: "GoogleDirectory" }));
                        });
                    }),
                        (e = e.concat(r)),
                        (r = []);
                    t = a("orderBy")(P.o365Contacts(), "name");
                    angular.forEach(t, function (e, t) {
                        if (0 < e.source.BusinessPhones.length || "" !== e.source.MobilePhone) {
                            var a = "";
                            if (
                                (angular.isDefined(e.source.GivenName) && e.source.GivenName && (a = e.source.GivenName + " "),
                                angular.isDefined(e.source.Surname) && e.source.Surname && (a += e.source.Surname),
                                0 < e.source.BusinessPhones.length)
                            ) {
                                var n = i.encodeO365CallingLabel(a, e.source.BusinessPhones[0]);
                                r.push({ dial: g.toDigits(e.source.BusinessPhones[0]), name: a, label: n.label, dialingLabel: n.dialingLabel, contactType: "O365" });
                            }
                            "" !== e.source.MobilePhone &&
                                ((n = i.encodeO365CallingLabel(a, e.source.MobilePhone, "Mobile")),
                                r.push({ dial: g.toDigits(e.source.MobilePhone), name: a, label: n.label, dialingLabel: n.dialingLabel, contactType: "O365", alternateNumber: !0, alternateNumberType: "Mobile" }));
                        }
                    }),
                        (e = e.concat(r)),
                        (r = []);
                    t = a("orderBy")(P.outlookContacts(), "name");
                    angular.forEach(t, function (e, t) {
                        var a = e.name,
                            n = i.encodeOutlookCallingLabel(a, e.source.Number);
                        r.push({ dial: g.toDigits(e.source.Number), name: a, label: n.label, dialingLabel: n.dialingLabel, contactType: "Outlook" }),
                            angular.forEach(e.source.AlternateNumbers, function (e, t) {
                                (n = i.encodeOutlookCallingLabel(a, e.Number, e.AltType)),
                                    r.push({ dial: g.toDigits(e.Number), name: a, label: n.label, dialingLabel: n.dialingLabel, contactType: "Outlook", alternateNumber: !0, alternateNumberType: e.AltType });
                            });
                    }),
                        (e = e.concat(r)),
                        (i.data.dialNumberOptions = a("orderBy")(e, "name"));
                }),
                i.buildDialNumberOptions(),
                (i.data.dialMode = "DIAL_NUMBER"),
                (i.data.activeCallObj = {}),
                (i.clickDigit = function (e) {
                    angular.isObject(i.data.selectedDialObject) ? (i.data.selectedDialObject = e) : (null === i.data.selectedDialObject && (i.data.selectedDialObject = ""), (i.data.selectedDialObject += e));
                }),
                (i.setToActiveCallsTab = function () {}),
                (i.getActiveCallObj = function () {
                    return i.data.activeCallObj;
                }),
                (i.campOn = function () {
                    console.log("campOn"),
                        f.dial("#").then(
                            function (e) {
                                console.log("Dial # successful");
                            },
                            function (e) {
                                console.log("Dial # error");
                            }
                        );
                }),
                (i.buildDialCallObject = function () {
                    var e;
                    if (
                        ((i.data.dialMode = "DIALING"),
                        (i.data.activeCallObj = {}),
                        (i.data.activeCallObj.callConnected = !1),
                        (i.data.activeCallObj.onHold = !1),
                        (i.data.activeCallObj.inbound = !1),
                        (i.data.activeCallObj.duration = 0),
                        (i.data.activeCallObj.abandonedCallback = D),
                        i.data.selectedDialObject && !angular.isObject(i.data.selectedDialObject))
                    ) {
                        e = g.toDigits(i.data.selectedDialObject);
                        for (var t = 0; t < i.data.dialNumberOptions.length; t++) {
                            var a = i.data.dialNumberOptions[t];
                            if (a.dial === e) {
                                i.data.selectedDialObject = a;
                                break;
                            }
                        }
                    }
                    angular.isObject(i.data.selectedDialObject)
                        ? ((i.data.activeCallObj.name = i.data.selectedDialObject.name),
                          (e = i.data.selectedDialObject.dial),
                          ("Internal" !== i.data.selectedDialObject.contactType && "GoogleContact" !== i.data.selectedDialObject.contactType) || (i.data.activeCallObj.imageURL = i.data.selectedDialObject.imageURL),
                          i.data.selectedDialObject.alternateNumber && (i.data.activeCallObj.phoneType = i.data.selectedDialObject.alternateNumberType),
                          (i.data.activeCallObj.voicemail = i.data.selectedDialObject.voicemail),
                          (i.data.activeCallObj.video = i.data.selectedDialObject.video))
                        : ((i.data.activeCallObj.name = "Unknown"), (e = i.data.selectedDialObject), (i.data.activeCallObj.imageURL = "resources/images/unknown.png")),
                        angular.isDefined(i.data.selectedDialObject.dialingLabel)
                            ? (i.data.activeCallObj.dialingLabel = i.data.selectedDialObject.dialingLabel)
                            : angular.isDefined(i.data.selectedDialObject.label)
                            ? (i.data.activeCallObj.dialingLabel = i.data.selectedDialObject.label)
                            : (i.data.activeCallObj.dialingLabel = e);
                    var n = e + "";
                    return (n = n.replace(/[^0-9]/g, "")), (i.data.activeCallObj.number = n), i.data.activeCallObj;
                }),
                i.$on("CLOSE_DIAL_MODAL", function (e, t) {
                    console.log("Received CLOSE_DIAL_MODAL"),
                        i.close(),
                        angular.isObject(t) && t.setToActiveCallsTab && i.setToActiveCallsTab(),
                        i.data.isDialpadCollapsedOrig !== o.globalVars.Settings.DialerCollapsed && (console.log("Update settings with new dialer collapse value."), y.flushAllLocalApplicationSettings());
                }),
                (i.close = function () {
                    n.hide();
                }),
                (i.onHide = function () {
                    n.hide(), i.setToActiveCallsTab(), i.setPromptOnOutgoing();
                }),
                (i.onComplete = function () {
                    f.completeTransfer(i.data.activeCallObj.callID).then(
                        function (e) {},
                        function (e) {}
                    );
                }),
                (i.onResume = function () {
                    var t = n.currentCall();
                    f.resumeCall(t.callID).then(
                        function (e) {
                            (t.onHold = !1), i.close();
                        },
                        function (e) {}
                    );
                }),
                (i.onStopTransfer = function () {
                    f.stopTransfer().then(
                        function (e) {
                            (n.currentCall().onHold = !1), i.close();
                        },
                        function (e) {}
                    );
                }),
                (i.setPromptOnOutgoing = function () {
                    i.data.doNotShowAgain && (o.globalVars.Settings.PromptOnOutgoing = !1);
                }),
                (i.onHangup = function () {
                    f.hangup(i.data.activeCallObj.callID).then(
                        function (e) {
                            i.close(), i.setPromptOnOutgoing();
                        },
                        function (e) {}
                    );
                }),
                (i.isCallTransfer = function () {
                    return n.isCallTransfer();
                }),
                (i.buildSelectedDialObject = function (e) {
                    (i.data.selectedDialObject = {}), (i.data.selectedDialObject.dial = b);
                    var t,
                        a = "",
                        n = "";
                    if (
                        ("GoogleContact" === C
                            ? (a = e.name)
                            : angular.isDefined(e) &&
                              (angular.isDefined(e.FirstName) && (e.FirstName && (a = e.FirstName + " "), (a += e.LastName), (n = e.Company ? e.Company : "")),
                              angular.isDefined(e.GivenName) && (e.GivenName && (a = e.GivenName + " "), (a += e.Surname), (n = ""))),
                        (i.data.selectedDialObject.name = a),
                        "Internal" === (i.data.selectedDialObject.contactType = C))
                    ) {
                        var o = c.getUsersHash()[parseInt(e.Number)];
                        (i.data.selectedDialObject.imageURL = o.photo), (t = i.encodeInternalCallingLabel(a, b, h));
                    } else
                        "External" === C
                            ? (t = i.encodeInternalCallingLabel(a, b, h, n))
                            : "Personal" === C
                            ? (t = i.encodeInternalCallingLabel(a, b, h))
                            : "O365" === C
                            ? (t = i.encodeInternalCallingLabel(a, b, h))
                            : "GoogleContact" === C
                            ? ((i.data.selectedDialObject.imageURL = e.photo), (t = i.encodeInternalCallingLabel(a, b, h)))
                            : (t = { label: b + " (Unknown Contact Type)", dialingLabel: "Unknown Contact Type<br/>" + b });
                    (i.data.selectedDialObject.dialingLabel = t.dialingLabel), (i.data.selectedDialObject.label = t.label), (i.data.selectedDialObject.alternateNumber = b), (i.data.selectedDialObject.alternateNumberType = h);
                }),
                (i.data.isDialpadCollapsedOrig = o.globalVars.Settings.DialerCollapsed),
                (i.toggleDialpad = function () {
                    o.globalVars.Settings.DialerCollapsed = !o.globalVars.Settings.DialerCollapsed;
                }),
                S && (i.buildSelectedDialObject(m), !n.isCallTransfer() || v ? i.dialNumber() : n.isCallTransfer() && i.transferCall()),
                (i.closeDialog = function () {
                    p.dismiss("cancel");
                }),
                (i.setFocusToInput = function () {
                    try {
                        angular.element(r[0].querySelector("#idInputNameOrExtension"))[0].focus();
                    } catch (e) {}
                }),
                (i.keyPressed = function (e) {
                    13 === e.which && i.dialNumber();
                }),
                e(function () {
                    i.setFocusToInput();
                }, 500);
        },
    ]),
    angular.module("editContactsModal", []).service("$editContactsModalService", [
        "$uibModal",
        function (n) {
            this.open = function (e, t, a) {
                return n.open({
                    templateUrl: "modals/views/editContactsModal.html",
                    controller: "editContactsModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !0,
                    resolve: {
                        contactObj: function () {
                            return t;
                        },
                        type: function () {
                            return e;
                        },
                        addingExtension: function () {
                            return a;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("editContactsModal").controller("editContactsModalController", [
        "addingExtension",
        "$rootScope",
        "$scope",
        "$uibModalInstance",
        "$timeout",
        "$document",
        "contactObj",
        "type",
        "HttpService",
        "GetUsersService",
        "UCLocaleService",
        "$Utilities",
        "$window",
        "FileUploader",
        function (e, a, n, t, o, r, i, s, l, c, d, u, g, f) {
            var p = angular.isDefined(i) && null !== i;
            if (((n.data = {}), (n.data.contact = {}), e && (n.data.contact.Number = e), (n.modalHeight = (65 * g.innerHeight) / 100), "Internal" === s && i)) {
                var m = c.getUsersHash();
                (userObj = m[parseInt(i.Number)]), (n.data.photo = userObj.photo ? userObj.photo : null), (i.Not_IsHidden = !i.IsHidden);
            }
            (n.data.contactType = s),
                p
                    ? (angular.copy(i, n.data.contact),
                      (n.data.savedAlternateNumbers = []),
                      angular.copy(n.data.contact.AlternateNumbers, n.data.savedAlternateNumbers),
                      (n.dialogTitle = "Internal" === s ? d.getPhrase("Contact.EditEmployee", [n.data.contact.Number, n.data.contact.ExtName]) : "External" === s ? d.getPhrase("Contact.EditBusiness") : d.getPhrase("Contact.EditPersonal")))
                    : "Internal" === s
                    ? ((n.dialogTitle = d.getPhrase("Contact.AddEmployee", e)), (n.data.contact.Not_IsHidden = !0), (n.data.contact.BlfEnabled = !0))
                    : (n.dialogTitle = "External" === s ? d.getPhrase("Contact.AddBusiness") : d.getPhrase("Contact.AddPersonal")),
                (n.saveDialog = function () {
                    "Internal" === s && (n.data.contact.IsHidden = !n.data.contact.Not_IsHidden),
                        p
                            ? l.updateContact(s, n.data.contact).then(
                                  function (e) {
                                      angular.copy(e.Data, i), "Internal" === s && c.massageInternalContact(i, u.generateRandomVersion()), t.close({ contactObj: i });
                                  },
                                  function (e) {
                                      t.dismiss("cancel");
                                  }
                              )
                            : l.addContact(s, n.data.contact).then(
                                  function (e) {
                                      t.close({ contactObj: e.Data });
                                  },
                                  function (e) {
                                      t.dismiss("cancel");
                                  }
                              );
                }),
                (n.closeDialog = function () {
                    t.dismiss("cancel");
                }),
                (n.getAltNumTypes = function () {
                    return u.getAltNumTypes();
                }),
                (n.altNumsChanged = !1),
                (n.cancelAlternateNumberChanges = function () {
                    (n.altNumsChanged = !1), angular.copy(n.data.savedAlternateNumbers, n.data.contact.AlternateNumbers);
                }),
                (n.addAlternateNumber = function () {
                    (n.altNumsChanged = !0), n.data.contact.AlternateNumbers.push({ Number: "", AltType: "Mobile", isNew: !0 });
                }),
                (n.addRowIfEmpty = function () {
                    (n.altNumsChanged = !0), angular.isDefined(n.data.contact.AlternateNumbers) || (n.data.contact.AlternateNumbers = []), 0 == n.data.contact.AlternateNumbers.length && n.addAlternateNumber();
                }),
                (n.deleteAlternateNumber = function (e) {
                    (n.altNumsChanged = !0), n.data.contact.AlternateNumbers.splice(e, 1);
                }),
                (n.saveAlternateNumberChanges = function () {
                    (n.altNumsChanged = !1), angular.copy(n.data.contact.AlternateNumbers, n.data.savedAlternateNumbers);
                }),
                (n.checkNumber = function (e) {
                    return e ? ((e = u.toDigits(e)) ? void 0 : d.getPhrase("Err.PhoneNumInvalid")) : d.getPhrase("Err.PhoneNumRequired");
                }),
                (n.changePhoto = function (e) {
                    o(function () {
                        angular.element(document.querySelector("#idPhoto2")).trigger("click");
                    }, 100);
                }),
                (n.clearPhoto = function (e) {
                    u.removeProfilePhoto(userObj.extension).then(function (e) {
                        o(function () {
                            n.$apply(function () {
                                (n.data.photo = n.noProfileImage()), (n.data.contact.photo = n.noProfileImage());
                            });
                        }, 250);
                    });
                });
            var b = null;
            n.onPhotoUpdatedHandler = function (e, t) {
                var a = t.extension;
                a === n.data.contact.extension &&
                    (o(function () {
                        n.$apply(function () {
                            (n.data.uploadingPicture = !1), (n.data.photo = t.Photo);
                            var e = c.getUsersHash()[a];
                            e && ((n.data.contact.Photo = e.Photo), (n.data.contact.Thumbnail = e.Thumbnail), (n.data.contact.photo = n.data.photo), (n.data.contact.thumbnail = n.data.photo), (n.data.contact.PhotoVersion = e.PhotoVersion));
                        });
                    }, 0),
                    b && (b(), (b = null)));
            };
            var h = (n.uploader = new f({}));
            h.filters.push({
                name: "imageFilter",
                fn: function (e, t) {
                    var a = "|" + e.type.slice(e.type.lastIndexOf("/") + 1) + "|";
                    return -1 !== "|jpg|png|jpeg|bmp|gif|".indexOf(a);
                },
            }),
                (h.onAfterAddingFile = function (e) {
                    console.info("onAfterAddingFile", e), (n.data.uploadingPicture = !0), (b = a.$on("PhotoUpdated", n.onPhotoUpdatedHandler));
                    var t = e._file;
                    u.uploadProfilePhoto(n.data.contact.Number, t).then(
                        function (e) {
                            console.log("success");
                        },
                        function (e) {
                            console.log("failure"), (n.data.uploadingPicture = !1), b && (b(), (b = null));
                        }
                    );
                });
        },
    ]),
    angular.module("editPresenceEventModal", []).service("$editPresenceEventService", [
        "$uibModal",
        function (a) {
            this.open = function (e, t) {
                return a.open({
                    templateUrl: "modals/views/editPresenceEventModal.html",
                    controller: "editPresenceEventModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !1,
                    resolve: {
                        contactID: function () {
                            return e;
                        },
                        scheduleObj: function () {
                            return t;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("editPresenceEventModal").controller("editPresenceEventModalController", [
        "$rootScope",
        "$scope",
        "$uibModalInstance",
        "$Utilities",
        "CurrentUser",
        "contactID",
        "scheduleObj",
        "UCLocaleService",
        function (e, n, o, r, t, a, s, l) {
            if (((n.data = {}), (n.data.errorStartTime = !1), (n.data.errorReturnTime = !1), (n.data.scheduleObj = {}), s))
                (n.data.dialogTitle = l.getPhrase("PresenceEvents.EditScheduledEvent")),
                    angular.copy(s, n.data.scheduleObj),
                    (n.data.scheduleObj.startTime = r.toDate(n.data.scheduleObj.StartTime)),
                    (n.data.scheduleObj.returnTime = r.toDate(n.data.scheduleObj.ReturnTime));
            else {
                n.data.dialogTitle = l.getPhrase("PresenceEvents.AddScheduledEvent");
                var c = new Date();
                c.setTime(c.getTime() + 36e5), c.setMinutes(0, 0), (n.data.scheduleObj.startTime = c);
                var d = angular.copy(c);
                d.setTime(d.getTime() + 36e5),
                    (n.data.scheduleObj.returnTime = d),
                    (n.data.scheduleObj.Status = t.getUser().presence.status),
                    (n.data.scheduleObj.ApplyEndStatus = !1),
                    (n.data.scheduleObj.EndStatus = "Unknown"),
                    (n.data.scheduleObj.ForwardSetting = {}),
                    (n.data.scheduleObj.ForwardSetting.Mode = "DoNotChangeForward"),
                    (n.data.scheduleObj.ForwardSetting.Number = null),
                    (n.data.scheduleObj.EndForwardSetting = {}),
                    (n.data.scheduleObj.EndForwardSetting.Mode = "DoNotChangeForward"),
                    (n.data.scheduleObj.EndForwardSetting.Number = null);
            }
            (n.startDate = { opened: !1 }),
                (n.endDate = { opened: !1 }),
                (n.dateOptions = { formatYear: "yyyy", startingDay: 1, showWeeks: !1, minDate: new Date() }),
                (n.format = "MMMM DD, YYYY"),
                (n.data.callHandlingOptions = [
                    { label: l.getPhrase("Forward.DoNotChangeForward"), data: "DoNotChangeForward" },
                    { label: l.getPhrase("Forward.DoNotForward2"), data: "DoNotForward" },
                    { label: l.getPhrase("Forward.ForwardImmediate"), data: "ForwardImmediate", needsNumber: !0, color: "text-info", icon: "fa fa-arrow-right" },
                    { label: l.getPhrase("Forward.ForwardBothRinging"), data: "ForwardBothRinging", needsNumber: !0, color: "text-info", icon: "fa fa-arrow-right" },
                    { label: l.getPhrase("Forward.DoNotDisturb"), data: "DoNotDisturb", color: "text-danger", icon: "fa fa-ban text-danger" },
                ]),
                (n.getCallHandlingOptionsByValue = function (e) {
                    var t = n.data.callHandlingOptions;
                    for (i = 0; i < t.length; i++) if (t[i].data === e) return t[i];
                    return t[0];
                }),
                (n.data.forwardSetting = {}),
                (n.data.forwardSetting.obj = n.getCallHandlingOptionsByValue(n.data.scheduleObj.ForwardSetting.Mode)),
                (n.data.endForwardSetting = {}),
                n.data.scheduleObj.EndForwardSetting && (n.data.endForwardSetting.obj = n.getCallHandlingOptionsByValue(n.data.scheduleObj.EndForwardSetting.Mode)),
                (n.forwardSettingChanged = function (e, t) {
                    "ForwardSetting" === t ? ((n.data.forwardSetting.obj = e), (n.data.scheduleObj.ForwardSetting.Mode = e.data)) : ((n.data.endForwardSetting.obj = e), (n.data.scheduleObj.EndForwardSetting.Mode = e.data));
                }),
                (n.updateReturnTime = function () {
                    if (n.data.scheduleObj.startTime >= n.data.scheduleObj.returnTime) {
                        var e = angular.copy(n.data.scheduleObj.returnTime);
                        e.setTime(e.getTime() - 36e5), (n.data.scheduleObj.startTime = e);
                    }
                }),
                (n.updateStartTime = function () {
                    if (n.data.scheduleObj.startTime >= n.data.scheduleObj.returnTime) {
                        var e = angular.copy(n.data.scheduleObj.startTime);
                        e.setTime(e.getTime() + 36e5), (n.data.scheduleObj.returnTime = e);
                    }
                }),
                (n.data.errors = ""),
                (n.validateForm = function () {
                    var e = [];
                    return (
                        (n.data.errorStartTime = !1),
                        (n.data.errorReturnTime = !1),
                        n.data.scheduleObj.Status || (e.push(l.getPhrase("PresenceEvents.Err.RequiredStartEvent")), (n.data.errorStartTime = !0)),
                        n.data.scheduleObj.startTime || (e.push(l.getPhrase("PresenceEvents.Err.RequiredStartTime")), (n.data.errorStartTime = !0)),
                        n.data.scheduleObj.returnTime || (e.push(l.getPhrase("PresenceEvents.Err.RequiredFinishTime")), (n.data.errorReturnTime = !0)),
                        n.data.scheduleObj.startTime >= n.data.scheduleObj.returnTime && (e.push(l.getPhrase("PresenceEvents.Err.StartTimeBad")), (n.data.errorStartTime = !0)),
                        n.data.forwardSetting.obj.needsNumber && !n.data.scheduleObj.ForwardSetting.Number && (e.push(l.getPhrase("PresenceEvents.Err.RequiredForwardDest")), (n.data.errorStartTime = !0)),
                        n.data.scheduleObj.ApplyEndStatus &&
                            (n.data.scheduleObj.EndStatus || (e.push(l.getPhrase("PresenceEvents.Err.RequiredFinishStatus")), (n.data.errorReturnTime = !0)),
                            n.data.endForwardSetting.obj.needsNumber && !n.data.scheduleObj.EndForwardSetting.Number && (e.push(l.getPhrase("PresenceEvents.Err.RequiredEndForwardDest")), (n.data.errorReturnTime = !0))),
                        (n.data.errors = e.join("<br/>")),
                        n.data.errors
                    );
                }),
                (n.saveDialog = function () {
                    if (!n.validateForm()) {
                        var e = n.data.scheduleObj,
                            t = e.startTime,
                            a = e.returnTime;
                        (n.data.scheduleObj.StartTime = r.toDateString(t)), (n.data.scheduleObj.ReturnTime = r.toDateString(a)), o.close(n.data.scheduleObj);
                    }
                }),
                (n.closeDialog = function () {
                    o.dismiss("cancel");
                });
        },
    ]),
    angular.module("emptyBuddyListModal", []).service("$emptyBuddyListModalService", [
        "$uibModal",
        function (o) {
            this.show = function (e, t, a) {
                var n = a || "lg";
                return o.open({ templateUrl: "modals/views/emptyBuddyListModal.html", controller: "emptyBuddyListModalController", size: n, backdrop: "static", keyboard: !0 });
            };
        },
    ]),
    angular.module("emptyBuddyListModal").controller("emptyBuddyListModalController", [
        "$scope",
        "$uibModalInstance",
        function (e, t) {
            (e.data = {}),
                (e.data.doNotShowAgain = !1),
                (e.buddyListUpdateClicked = function () {
                    t.close({ goToEditPersonalBuddyList: !0, doNotShowAgain: e.data.doNotShowAgain });
                }),
                (e.closeDialog = function () {
                    t.close({ goToEditPersonalBuddyList: !1, doNotShowAgain: e.data.doNotShowAgain });
                });
        },
    ]),
    angular.module("helpModal", []).service("$helpModalService", [
        "$uibModal",
        function (t) {
            this.open = function (e) {
                return t.open({
                    templateUrl: "modals/views/helpModal.html",
                    controller: "helpModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !0,
                    resolve: {
                        locale: function () {
                            return e;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("helpModal").controller("helpModalController", [
        "$rootScope",
        "$scope",
        "$uibModalInstance",
        "$window",
        "locale",
        function (e, t, a, n, o) {
            (t.modalHeight = (70 * n.innerHeight) / 100),
                (t.data = {}),
                (t.data.help_url = "i18n/help/" + o.toLowerCase() + "/Welcome.htm"),
                (t.closeDialog = function () {
                    a.close(!0);
                }),
                (t.expandHelp = function () {
                    n.open(t.data.help_url, "_blank"), a.close(!0);
                });
        },
    ]),
    angular.module("incomingCallModal", []).service("$incomingCallModalService", [
        "Calls",
        "$rootScope",
        "$timeout",
        "$uibModal",
        function (t, e, a, n) {
            var o,
                r = !1,
                i = {};
            return (
                (i.hide = l),
                (i.ignoreAll = d),
                (i.ignoreCall = c),
                (i.open = s),
                (i.show = function () {
                    if ((console.debug("incomingCallModal::show", r, e.globalVars.WindowIsActive), (!e.globalVars.WindowIsActive && !e.globalVars.WindowIsInFocus) || !e.globalVars.Settings.PromptOnIncoming))
                        return void a(function () {
                            d();
                        }, 0);
                    r || s();
                }),
                i
            );
            function s() {
                return (o = n.open({ templateUrl: "modals/views/incomingCallModal.html", controller: "incomingCallModalController", backdrop: "static", keyboard: !1 })), (r = !0), o;
            }
            function l() {
                console.debug("incomingCallModal::hide", r), o && o.close(!0), (r = !1);
            }
            function c(e) {
                t.ignoreIncomingCall(e), e.isChild || e.parent || t.setVisibility(e, !0), 0 == t.incomingCalls().length && l();
            }
            function d() {
                angular.forEach(t.incomingCalls(), function (e) {
                    c(e);
                });
            }
        },
    ]),
    angular.module("incomingCallModal").controller("incomingCallModalController", [
        "$scope",
        "$rootScope",
        "$timeout",
        "$incomingCallModalService",
        "$location",
        "$uibModalInstance",
        "HttpService",
        "Calls",
        "AudioService",
        function (n, e, t, o, a, r, i, s, l) {
            (n.data = {}),
                (n.incomingCallsArr = []),
                (n.setToActiveCallsTab = function () {}),
                (n.answer = function (t, a) {
                    i.answer(t.callID).then(
                        function (e) {
                            s.answerIncomingCall(t, a), 0 == s.incomingCalls().length && (o.hide(), n.setToActiveCallsTab());
                        },
                        function (e) {
                            console.log("answer failed, reason=" + e);
                        }
                    );
                }),
                (n.ignore = function (e, t) {
                    o.ignoreCall(e), l.stopIncomingCallAudio();
                }),
                (n.ignoreAll = function () {
                    o.ignoreAll();
                }),
                (n.redirectToVM = function (t, a) {
                    i.redirectToVM(t.callID).then(
                        function (e) {
                            s.ignoreIncomingCall(t, a), 0 == s.incomingCalls().length && o.hide();
                        },
                        function (e) {
                            console.log("redirectToVM failed, reason=" + e);
                        }
                    );
                });
            var c = n.$watch(
                function () {
                    return s.incomingCalls();
                },
                function (e) {
                    (n.incomingCallsArr = e), console.debug("incomingCallsArr changed", angular.toJson(n.incomingCallsArr)), n.$applyAsync();
                },
                !0
            );
            n.$on("$destroy", function () {
                (n.data = void 0), (n.incomingCallsArr = []), c();
            });
        },
    ]),
    angular.module("mobileDeviceDetectedModal", []).service("$mobileDeviceDetectedModalService", [
        "$uibModal",
        function (a) {
            this.open = function (e, t) {
                return a.open({
                    templateUrl: "modals/views/mobileDeviceDetectedModal.html",
                    controller: "mobileDeviceDetectedModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !1,
                    resolve: {
                        extension: function () {
                            return e;
                        },
                        cpMode: function () {
                            return t;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("mobileDeviceDetectedModal").controller("mobileDeviceDetectedModalController", [
        "$scope",
        "$uibModalInstance",
        "extension",
        "cpMode",
        function (e, t, a, n) {
            (e.data = {}),
                (e.data.extension = a),
                (e.data.cpMode = n || "USE_APP_CP"),
                (e.closeDialog = function () {
                    t.close({ cpMode: e.data.cpMode });
                });
        },
    ]),
    angular.module("presenceEventsModal", []).service("$presenceEventsModalService", [
        "$uibModal",
        function (n) {
            this.open = function (e, t, a) {
                return n.open({
                    templateUrl: "modals/views/presenceEventsModal.html",
                    controller: "presenceEventsModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !1,
                    resolve: {
                        userObj: function () {
                            return t;
                        },
                        contactID: function () {
                            return e;
                        },
                        futureEvents: function () {
                            return a;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("presenceEventsModal").controller("presenceEventsModalController", [
        "$scope",
        "$uibModalInstance",
        "$timeout",
        "contactID",
        "userObj",
        "futureEvents",
        "HttpService",
        "$editPresenceEventService",
        function (o, e, r, n, t, a, i, s) {
            (o.data = {}),
                (o.data.alerts = []),
                (o.data.schedules = []),
                angular.copy(a, o.data.schedules),
                (o.closeAlert = function (e) {
                    e < 0 || o.data.alerts.splice(e, 1);
                }),
                (o.addAlert = function (e, t, a) {
                    var n = { type: e, msg: t };
                    o.data.alerts.push(n),
                        a &&
                            r(function () {
                                o.closeAlert(o.data.alerts.indexOf(n));
                            }, 3e3);
                }),
                (o.displayCallForwardSummary = function (e, t) {
                    return "ForwardImmediate" === e || "ForwardBothRinging" === e
                        ? '<span class="text-info"><i class="fa fa-arrow-right"></i> <span>Forward to ' + t + "</span></span>"
                        : "DoNotDisturb" === e
                        ? '<span class="text-danger"><i class="fa fa-ban"></i> <span>Do not disturb</span></span>'
                        : "";
                }),
                (o.editPresenceEvent = function (e) {
                    var a = s.open(n, e);
                    a.result.then(function (t) {
                        a.result.then(function (e) {
                            i.updateAppointment(n, t).then(
                                function (e) {
                                    o.addAlert("success", "Scheduled presence event was updated.", !0), angular.copy(e.Data.FutureEvents, o.data.schedules);
                                },
                                function (e) {
                                    o.addAlert("danger", "Error updating the scheduled presence event.", !1);
                                }
                            );
                        });
                    });
                }),
                (o.addPresenceEvent = function (e) {
                    s.open(n, e).result.then(function (e) {
                        i.addAppointment(n, e).then(
                            function (e) {
                                o.addAlert("success", "Scheduled presence event was added.", !0), angular.copy(e.Data.FutureEvents, o.data.schedules);
                            },
                            function (e) {
                                o.addAlert("danger", "Error adding the scheduled presence event.", !1);
                            }
                        );
                    });
                }),
                (o.copyPresenceEvent = function (e) {
                    delete e.Id, o.addPresenceEvent(e);
                }),
                (o.deletePresenceEvent = function (e) {
                    (scheduleObjUnderEdit = e),
                        i.deleteAppointment(n, e).then(
                            function (e) {
                                o.addAlert("success", "Scheduled presence event was removed.", !0), angular.copy(e.Data.FutureEvents, o.data.schedules);
                            },
                            function (e) {
                                o.addAlert("danger", "Error removing the scheduled presence event.", !1);
                            }
                        );
                }),
                (o.closeDialog = function () {
                    e.close({ schedules: o.data.schedules });
                });
        },
    ]),
    angular.module("presenceLoginWarningModal", []).service("$presenceLoginWarningModalService", [
        "$uibModal",
        function (t) {
            this.open = function (e) {
                return t.open({
                    templateUrl: "modals/views/presenceLoginWarningModal.html",
                    controller: "presenceLoginWarningModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !1,
                    resolve: {
                        userObj: function () {
                            return e;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("presenceLoginWarningModal").controller("presenceLoginWarningModalController", [
        "$rootScope",
        "$scope",
        "$window",
        "$uibModalInstance",
        "userObj",
        "ProfileService",
        function (e, t, a, n, o, r) {
            (t.modalHeight = (40 * a.innerHeight) / 100),
                (t.data = {}),
                (t.data.userObj = o),
                (t.data.presenceUpdateOptions = "SET_IN_THE_OFFICE"),
                (t.data.doNotShowAgainToday = !1),
                (t.data.profileObj = { name: "" }),
                (t.data.presenceProfiles = r.getProfiles()),
                (t.data.currentStatusHTML = "<span class='" + t.data.userObj.cache.presenceColor + "'><span class='" + t.data.userObj.cache.presenceIcon + "'></span><span>" + t.data.userObj.cache.presenceLabel + "</span></span>"),
                (t.data.inTheOfficeStatusHTML = "<span class='" + t.presenceStatusColor("InTheOffice") + "'><span class='" + t.presenceStatusIcon("InTheOffice") + "'></span><span>" + t.presenceStatusLabel("InTheOffice") + "</span></span>"),
                (t.setPresenceProfile = function (e) {
                    t.data.profileObj = e;
                }),
                (t.saveDialog = function () {
                    n.close({ option: t.data.presenceUpdateOptions, profileObj: t.data.profileObj, doNotShowAgainToday: t.data.doNotShowAgainToday });
                });
        },
    ]),
    angular
        .module("AddContactModal", ["formly", "formlyBootstrap"])
        .run([
            "formlyConfig",
            "formlyValidationMessages",
            function (e, t) {
                t.messages.required = 'to.label + " is required"';
            },
        ])
        .service("$AddContactModal", [
            "$uibModal",
            function (e) {
                this.open = function () {
                    return e.open({ templateUrl: "modals/addContact.html", controller: "AddContactController as vm", size: "lg", backdrop: "static", keyboard: !1 });
                };
            },
        ]),
    angular.module("AddContactModal").controller("AddContactController", [
        "GetUsersService",
        "$rootScope",
        "$uibModalInstance",
        "UCLocaleService",
        function (e, t, a, n) {
            var o = this,
                r = e.getUsersHash();
            (o.model = { contactType: "Internal", extension: null, errors: {} }),
                (o.saveDialog = function () {
                    a.close({ contactType: o.model.contactType, extension: o.model.extension });
                }),
                (o.validateExtension = function () {
                    var e = o.model.extension;
                    e
                        ? r[e]
                            ? (o.model.errors.extension = n.getPhrase("extensionInUse"))
                            : e.replace(/[0-9]/g, "")
                            ? (o.model.errors.extension = n.getPhrase("invalidExtension"))
                            : delete o.model.errors.extension
                        : "Internal" === o.model.contactType
                        ? (o.model.errors.extension = n.getPhrase("Error.Required"))
                        : delete o.model.errors.extension;
                }),
                (o.closeDialog = function () {
                    a.dismiss("cancel");
                });
        },
    ]),
    angular
        .module("AddToContactModal", ["formly", "formlyBootstrap"])
        .run([
            "formlyConfig",
            "formlyValidationMessages",
            function (e, t) {
                t.messages.required = 'to.label + " is required"';
            },
        ])
        .service("$AddToContactModal", [
            "$uibModal",
            function (t) {
                this.open = function (e) {
                    return t.open({
                        templateUrl: "modals/addToContact.html",
                        controller: "AddToContactController as vm",
                        size: "lg",
                        backdrop: "static",
                        keyboard: !1,
                        resolve: {
                            smsNumber: function () {
                                return e;
                            },
                        },
                    });
                };
            },
        ]),
    angular.module("AddToContactModal").controller("AddToContactController", [
        "$ContactsNew",
        "GetUsersService",
        "$http",
        "$rootScope",
        "smsNumber",
        "$uibModalInstance",
        "UCLocaleService",
        "$window",
        function (t, e, a, n, o, r, i, s) {
            var l = this;
            function c(n) {
                (l.model.contactChoices = []),
                    angular.forEach(t.contacts, function (e) {
                        if (e.contactType === n) {
                            var t,
                                a = e.firstName + " " + e.lastName;
                            (t = "Internal" === n ? (e.name == e.extension ? a : a + " (" + e.extension + ")") : a),
                                l.model.contactChoices.push({ isContact: !0, initials: e.initials, name: a, extension: e.extension, imageURL: e.photo, label: t, company: e.source.Company, contact: e });
                        }
                    });
            }
            (l.closeDialog = function () {
                r.dismiss("cancel");
            }),
                (l.contactSelected = function (e) {
                    console.debug("contactObj", e);
                }),
                (l.saveDialog = function () {
                    if ((console.debug("vm.model", l.model), "NEW" === l.model.operation)) {
                        var e = { dirName: l.model.contactType, item: { FirstName: l.model.firstName, LastName: l.model.lastName, Company: l.model.company, AlternateNumbers: [{ Number: o, AltType: "Mobile", isNew: !0 }] } };
                        a.post("/ucapi/dir/AddContact", e).then(
                            function (e) {
                                t.addContactBasic(l.model.contactType, e.data.Data), r.close(!0);
                            },
                            function (e) {
                                console.error("AddContact headers: failed, HTTP status ", e), r.close(!0);
                            }
                        );
                    } else
                        angular.isArray(l.model.selectedContact.contact.source.AlternateNumbers) || (l.model.selectedContact.contact.source.AlternateNumbers = []),
                            l.model.selectedContact.contact.source.AlternateNumbers.push({ Number: o, AltType: "Mobile", isNew: !0 }),
                            a.post("/ucapi/dir/UpdateContact", { dirName: l.model.contactType, item: l.model.selectedContact.contact.source }).then(
                                function (e) {
                                    t.fillContact(l.model.selectedContact.contact, e.data.Data), r.close({});
                                },
                                function (e) {
                                    console.error("UpdateContact headers: failed, HTTP status ", e), r.close({});
                                }
                            );
                }),
                (l.modalHeight = (70 * s.innerHeight) / 100),
                (l.model = { pageTitle: i.getPhrase("AddToContact", [o]), contactType: n.globalVars.IsAttendant ? "External" : "Personal", isAttendant: n.globalVars.IsAttendant, operation: "NEW", smsNumber: o, contactChoices: [] }),
                (l.fields = [
                    {
                        type: "radio",
                        key: "contactType",
                        hideExpression: "!model.isAttendant",
                        templateOptions: {
                            label: i.getPhrase("ContactType"),
                            options: [
                                { name: i.getPhrase("ContactType.Internal"), value: "Internal" },
                                { name: i.getPhrase("ContactType.External"), value: "External" },
                                { name: i.getPhrase("ContactType.Personal"), value: "Personal" },
                            ],
                            onChange: function (e) {
                                c(e);
                            },
                        },
                    },
                    { noFormControl: !0, template: "<hr/>" },
                    {
                        type: "radio",
                        key: "operation",
                        templateOptions: {
                            label: i.getPhrase("ContactType"),
                            options: [
                                { name: i.getPhrase("CreateNew"), value: "NEW" },
                                { name: i.getPhrase("AddExisting"), value: "EXISTING" },
                            ],
                            onChange: function (e) {
                                c(l.model.contactType);
                            },
                        },
                    },
                    { noFormControl: !0, template: "<hr/>" },
                    { type: "input", key: "firstName", hideExpression: "model.operation === 'EXISTING'", templateOptions: { type: "text", label: i.getPhrase("Contact.FirstName"), required: !0 } },
                    { type: "input", key: "lastName", hideExpression: "model.operation === 'EXISTING'", templateOptions: { type: "text", label: i.getPhrase("Contact.LastName"), required: !0 } },
                    { type: "input", key: "company", hideExpression: "model.operation === 'EXISTING' || model.contactType !== 'External'", templateOptions: { type: "text", label: i.getPhrase("Company"), required: !0 } },
                ]);
        },
    ]),
    angular
        .module("AgentLoginModal", ["formly", "formlyBootstrap"])
        .run([
            "formlyConfig",
            "formlyValidationMessages",
            function (e, t) {
                e.setType({
                    name: "typeahead",
                    template: '<input type="text" ng-model="model[options.key]" uib-typeahead="item for item in to.options | filter:$viewValue | limitTo:10" class="form-control" autocomplete="off">',
                    wrapper: ["bootstrapLabel", "bootstrapHasError"],
                }),
                    (e.removeChromeAutoComplete = !0),
                    e.setWrapper([
                        {
                            types: ["typeahead"],
                            template: [
                                "<formly-transclude></formly-transclude>",
                                '<div class="validation"',
                                '  ng-if="options.validation.errorExistsAndShouldBeVisible"',
                                '  ng-messages="fc.$error">',
                                '  <div ng-message="{{::name}}" ng-repeat="(name, message) in ::options.validation.messages">',
                                "    {{message(fc.$viewValue, fc.$modelValue, this)}}",
                                "  </div>",
                                "</div>",
                            ].join(" "),
                        },
                    ]),
                    (t.messages.required = 'to.label + " is required"');
            },
        ])
        .service("$AgentLoginModal", [
            "$uibModal",
            function (i) {
                this.open = function (e, t, a, n, o, r) {
                    return i.open({
                        templateUrl: "modals/agentLogin.html",
                        controller: "AgentLoginController as agentLoginCtrl",
                        backdrop: "static",
                        keyboard: !1,
                        resolve: {
                            firstLogin: function () {
                                return e;
                            },
                            idRequired: function () {
                                return t;
                            },
                            aicRequired: function () {
                                return a;
                            },
                            lastID: function () {
                                return n;
                            },
                            lastAIC: function () {
                                return o;
                            },
                            aicHistory: function () {
                                return r;
                            },
                        },
                    });
                };
            },
        ]),
    angular.module("AgentLoginModal").controller("AgentLoginController", [
        "$rootScope",
        "$uibModalInstance",
        "$log",
        "$window",
        "$http",
        "UCLocaleService",
        "firstLogin",
        "idRequired",
        "aicRequired",
        "lastID",
        "lastAIC",
        "aicHistory",
        function (e, n, o, t, r, a, i, s, l, c, d, u) {
            var g = this;
            (g.errorMsg = ""),
                (g.model = { pageTitle: a.getPhrase("AgentLogin"), id: c, aic: d, idRequired: s, aicRequired: l, firstLogin: i }),
                s || (g.model.id = void 0),
                l || (g.model.aic = void 0),
                (g.saveDialog = function () {
                    g.errorMsg = "";
                    var t = g.model.id,
                        a = g.model.aic;
                    r.post("/ucapi/agent/Login", { id: t, aic: a }).then(
                        function (e) {
                            o.info("Login", e.data.Data), n.close({ id: g.model.id, aic: g.model.aic });
                        },
                        function (e) {
                            410 == e.status
                                ? (g.errorMsg =
                                      "Agent login failed. Login to extra queues is not supported.  Recommend that you logout of the current queue before joining the new queue, or use an AIC code which includes the queues you need to join.")
                                : t && a
                                ? (g.errorMsg = "Agent login failed. Agent ID and/or AIC may be incorrect.")
                                : t
                                ? (g.errorMsg = "Agent login failed using that Agent ID")
                                : a && (g.errorMsg = "Agent login failed using that AIC code");
                        }
                    );
                }),
                (g.closeDialog = function () {
                    n.dismiss("cancel");
                }),
                (g.fields = [
                    {
                        type: "input",
                        key: "id",
                        hideExpression: "!model.idRequired",
                        templateOptions: { type: "text", required: !0, placeholder: "Enter Agent ID", label: "Agent ID", description: "The Agent ID field is a unique field used to identify you as an agent in the system" },
                        expressionProperties: { "templateOptions.disabled": "!model.firstLogin" },
                    },
                    {
                        type: "typeahead",
                        key: "aic",
                        hideExpression: "!model.aicRequired",
                        templateOptions: { options: u, required: !0, placeholder: "Enter the AIC code of the queue to enter", label: "AIC", description: "The AIC code is used to describe a group of one or more queues" },
                        validators: {
                            valid_aic_code: {
                                expression: function (e, t, a) {
                                    var n = t || e;
                                    if (n) return /\d+$/.test(n);
                                },
                                message: "'AIC code should be all digits'",
                            },
                        },
                    },
                ]);
        },
    ]),
    angular.module("ChatUserDetailsModal", []).service("$ChatUserDetailsModal", [
        "$uibModal",
        function (t) {
            this.open = function (e) {
                return t.open({
                    templateUrl: "modals/chatUserDetails.html",
                    controller: "ChatUserDetailsModalController as vm",
                    size: "sm",
                    backdrop: !0,
                    keyboard: !0,
                    resolve: {
                        extension: function () {
                            return e;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("ChatUserDetailsModal").controller("ChatUserDetailsModalController", [
        "$dialModalService",
        "extension",
        "GetUsersService",
        "$rootScope",
        "$scope",
        "$state",
        "$UCVideo",
        "$uibModalInstance",
        "$window",
        function (o, e, t, a, n, r, i, s, l) {
            var c = this;
            c.modalHeight = (2 * l.innerHeight) / 5;
            var d = t.getUsersHash();
            function u() {
                s.dismiss("cancel");
            }
            (c.data = {}),
                (c.data.userObj = d[e]),
                (n.userObj = c.data.userObj),
                (c.onClose = u),
                (n.callNumber = function (e, t, a, n) {
                    o.callNumber(e, t, a, n), u();
                }),
                (n.doEmail = function (e) {
                    window.open("mailto:" + e, "_top"), u();
                }),
                (n.doVideo = function (e, t) {
                    a.globalVars.supportsWebRTC ? e && 0 === i.numConnections && ($("html").trigger("click"), n.startVideo(t)) : $("html").trigger("click");
                }),
                (n.startChatSession = function (e) {
                    r.go("app.newChat", { chatParm: e }), u();
                }),
                (n.toggledDeviceStatus = function (e, t) {});
        },
    ]),
    angular
        .module("EditMultiRingModal", [])
        .run([
            "formlyConfig",
            "formlyValidationMessages",
            function (e, t) {
                e.setWrapper([
                    {
                        types: ["datepicker", "input", "select", "radio"],
                        template: [
                            "<formly-transclude></formly-transclude>",
                            '<div class="validation"',
                            '  ng-if="options.validation.errorExistsAndShouldBeVisible"',
                            '  ng-messages="fc.$error">',
                            '  <div ng-message="{{::name}}" ng-repeat="(name, message) in ::options.validation.messages">',
                            "    {{message(fc.$viewValue, fc.$modelValue, this)}}",
                            "  </div>",
                            "</div>",
                        ].join(" "),
                    },
                ]),
                    t.addTemplateOptionValueMessage("minlength", "minlength", "", "is the minimum length", "Too short"),
                    (t.messages.required = 'to.label + " is required"');
            },
        ])
        .service("$EditMultiRingModal", [
            "$uibModal",
            function (n) {
                this.open = function (e, t, a) {
                    return n.open({
                        templateUrl: "modals/editMultiRingModal.html",
                        controller: "editMultiRingModalController as EditMultiRingCtrl",
                        size: "lg",
                        backdrop: "static",
                        keyboard: !1,
                        resolve: {
                            snrObj: function () {
                                return e;
                            },
                            multiDevRingingMembers: function () {
                                return t;
                            },
                            extension: function () {
                                return a;
                            },
                        },
                    });
                };
            },
        ]),
    angular.module("EditMultiRingModal").controller("editMultiRingModalController", [
        "$rootScope",
        "$uibModalInstance",
        "$log",
        "snrObj",
        "multiDevRingingMembers",
        "extension",
        "GetUsersService",
        "UCLocaleService",
        "$Utilities",
        function (e, t, a, n, o, r, i, s, l) {
            var c = this;
            (c.snrObj = n), (c.model = { extension: r });
            var d = [];
            angular.forEach(o, function (e) {
                var t;
                e !== c.snrObj && (e.IsMobile && e.SpeedDial.Destination ? (t = e.SpeedDial.Destination) : !e.IsMobile && e.DN && (t = e.DN), t && d.push(l.toDigits(t)));
            });
            var u = i.getUsersHash();
            n
                ? (angular.extend(c.model, { enabled: n.IsEnabled, external: n.IsMobile }),
                  c.model.external ? (c.model.number = c.snrObj.SpeedDial.Destination) : (c.model.number = c.snrObj.DN),
                  (c.model.pageTitle = s.getPhrase("EditMultiRing.EditTitle")))
                : ((c.model.adding = !0), (c.model.enabled = !0), (c.model.pageTitle = s.getPhrase("EditMultiRing.AddTitle"))),
                (c.isNumberInUse = function (e) {
                    return !!(e = l.toDigits(e)) && 0 <= d.indexOf(e);
                }),
                (c.isExtension = function (e) {
                    if (angular.isString(e))
                        try {
                            e = parseInt(e);
                        } catch (e) {
                            return !1;
                        }
                    return angular.isObject(u[e]);
                }),
                (c.getAvailableMember = function (e) {
                    var t = { external: [], internal: [] };
                    if (
                        (angular.forEach(o, function (e) {
                            e.IsMobile ? ("" !== e.SpeedDial.Destination && null !== e.SpeedDial.Destination) || t.external.push(e) : ("" !== e.DN && null !== e.DN) || t.internal.push(e);
                        }),
                        e)
                    ) {
                        if (t.internal.length) return t.internal[0];
                    } else if (t.external.length) return t.external[0];
                    return null;
                }),
                (c.saveDialog = function () {
                    c.model.external
                        ? ((!c.model.adding && c.snrObj.IsMobile) || (c.snrObj && !c.snrObj.IsMobile && (c.snrObj.DN = ""), (c.snrObj = c.getAvailableMember(!1))), (c.snrObj.SpeedDial.Destination = c.model.number))
                        : ((c.model.adding || c.snrObj.IsMobile) && (c.snrObj && c.snrObj.IsMobile && (c.snrObj.SpeedDial.Destination = ""), (c.snrObj = c.getAvailableMember(!0))), (c.snrObj.DN = c.model.number)),
                        (c.snrObj.IsEnabled = c.model.enabled),
                        t.close({});
                }),
                (c.closeDialog = function () {
                    t.dismiss("cancel");
                }),
                (c.fields = [
                    { noFormControl: !0, template: "<h5><strong>Setup an additional phone to ring when extension " + r + " is called</strong></h5>" },
                    { type: "checkbox", key: "enabled", templateOptions: { label: "Enable this phone number to ring" } },
                    {
                        type: "input",
                        key: "number",
                        templateOptions: { placeholder: "Enter a phone number", label: "Phone number", required: !0, description: "", minlength: 3 },
                        validators: {
                            enoughInternal: {
                                expression: function (e, t, a) {
                                    var n = e || t;
                                    if (c.isExtension(n)) {
                                        if (a.model.adding || a.model.external) if (!c.getAvailableMember(!0)) return !1;
                                        a.model.external = !1;
                                    }
                                    return !0;
                                },
                                message: "'Exceeds the number of internal phone number destinations allocated.'",
                            },
                            enoughExternal: {
                                expression: function (e, t, a) {
                                    var n = e || t;
                                    if (!c.isExtension(n)) {
                                        if (a.model.adding || a.model.internal) if (!c.getAvailableMember(!1)) return !1;
                                        a.model.external = !0;
                                    }
                                    return !0;
                                },
                                message: "'Exceeds the number of external phone number destinations allocated.'",
                            },
                            numberInUse: {
                                expression: function (e, t, a) {
                                    var n = e || t;
                                    return !c.isNumberInUse(n);
                                },
                                message: "'Phone number is already in use.'",
                            },
                        },
                        validation: { errorExistsAndShouldBeVisible: !0 },
                        expressionProperties: { "validation.errorExistsAndShouldBeVisible": "form.$invalid && form.$dirty" },
                    },
                ]);
        },
    ]),
    angular.module("FullContactModal", []).service("$FullContactModal", [
        "$uibModal",
        function (t) {
            this.open = function (e) {
                return t.open({
                    templateUrl: "modals/fullContactModal.html",
                    controller: "FullContactModalController as fullContactCtrl",
                    backdrop: "static",
                    keyboard: !0,
                    resolve: {
                        fullContactItem: function () {
                            return e;
                        },
                    },
                });
            };
        },
    ]),
    angular.module("FullContactModal").controller("FullContactModalController", [
        "$dialModalService",
        "fullContactItem",
        "GetUsersService",
        "$rootScope",
        "UCLocaleService",
        "$uibModalInstance",
        function (o, e, r, t, a, i) {
            var s = this;
            (s.contact = angular.copy(e)),
                (s.closeDialog = function () {
                    i.dismiss("cancel");
                }),
                (s.dial = function (e, t) {
                    var a = r.getUsersHash()[s.contact.extension];
                    if ("extension" === t.type) o.callNumber(a, "Internal", t.value);
                    else {
                        var n = s.contact.phones.find(function (e) {
                            return t.value === e.value;
                        });
                        if (!n) return;
                        o.callNumber(a, "Internal", n.value, n.type);
                    }
                    i.dismiss("cancel");
                }),
                (s.editContact = function () {
                    i.close({ edit: s.contact });
                }),
                "Internal" === s.contact.contactType
                    ? (s.title = a.getPhrase("Contact.EditEmployee", [s.contact.extension, s.contact.extName]))
                    : "External" === s.contact.contactType
                    ? (s.title = a.getPhrase("Contact.EditBusiness"))
                    : "Personal" === s.contact.contactType
                    ? (s.title = a.getPhrase("Contact.EditPersonal"))
                    : (s.title = a.getPhrase(s.contact.contactType + ".title")),
                (function () {
                    if ("Internal" === s.contact.contactType || "External" === s.contact.contactType || "Personal" === s.contact.contactType || "Outlook" === s.contact.contactType) {
                        var e = [];
                        if (
                            (s.contact.source.Street && e.push(s.contact.source.Street),
                            s.contact.source.City && e.push(s.contact.source.City),
                            s.contact.source.State && e.push(s.contact.source.State),
                            s.contact.source.PostalCode && e.push(s.contact.source.PostalCode),
                            e.length)
                        ) {
                            var t = { type: "work", formatted: e.join("\r\n"), urlAddress: e.join("+") };
                            s.contact.addresses = [t];
                        }
                    } else "GoogleUser" === s.contact.contactType && (s.contact.addresses = s.contact.source.addresses);
                })(),
                (s.canEdit = "Personal" === s.contact.contactType || (t.globalVars.CanEditContacts && ("Internal" === s.contact.contactType || "External" === s.contact.contactType)));
        },
    ]),
    angular.module("InactiveToActiveModule", []).service("$InactiveToActiveModal", [
        "$uibModal",
        function (e) {
            (this.modalInstance = null),
                (this.open = function () {
                    if (!this.modalInstance)
                        return (
                            (this.modalInstance = e.open({ templateUrl: "modals/inactiveToActiveModal.html", controller: "InactiveToActiveModalController as vm", size: "lg", backdrop: "static", keyboard: !1, resolve: {} })),
                            this.modalInstance
                        );
                }),
                (this.close = function () {
                    this.modalInstance && (this.modalInstance.close(!0), (this.modalInstance = null));
                });
        },
    ]),
    angular.module("InactiveToActiveModule").controller("InactiveToActiveModalController", [
        "CurrentUser",
        "$InactiveToActiveModal",
        "$Presence",
        "ProfileService",
        "$uibModalInstance",
        "$window",
        function (e, t, a, n, o, r) {
            var i = this;
            (i.modalHeight = (60 * r.innerHeight) / 100),
                (i.saveDialog = function () {
                    if ("DO_NOTHING" === i.presenceUpdateOptions) return void t.close();
                    i.currentSetting.isProfile
                        ? a.setPresenceUsingProfile(i.currentSetting).then(
                              function (e) {
                                  t.close();
                              },
                              function (e) {
                                  console.error("set presence profile", e);
                              }
                          )
                        : (n.setCurrentProfile(null),
                          a.setPresenceToStatus(i.currentSetting.data).then(
                              function (e) {
                                  t.close();
                              },
                              function (e) {
                                  console.error("set presence status", e);
                              }
                          ));
                }),
                (i.selectOption = function (e) {
                    i.currentSetting = e;
                }),
                (i.presenceUpdateOptions = "CHANGE_PRESENCE"),
                (i.presenceOptions = a.presenceStatusArray());
            var s = {};
            angular.forEach(i.presenceOptions, function (e) {
                s[e.data] = e;
            }),
                (i.presenceProfiles = n.getProfiles().map(function (e) {
                    var t = angular.copy(e);
                    (t.isProfile = !0), (t.label = e.name), (t.data = e.presence.status);
                    var a = s[t.data];
                    return (t.color = a.color), t;
                })),
                (i.currentSetting = i.presenceOptions.find(function (e) {
                    return "InTheOffice" === e.data;
                }));
            var l = e.getUser(),
                c = l.PresenceStatus,
                d = null;
            c && (d = s[c]),
                (i.currentStatusHTML = d
                    ? "<span class='" + d.color + "'><span class='" + d.icon + "'></span><span>" + d.label + "</span></span>"
                    : "<span class='" + l.cache.presenceColor + "'><span class='" + l.cache.presenceIcon + "'></span><span>" + l.cache.presenceLabel + "</span></span>");
        },
    ]),
    angular
        .module("VideoModal", [])
        .service("$IncomingVideoModal", [
            "$uibModal",
            function (a) {
                var n;
                (this.open = function (e, t) {
                    return (n = a.open({
                        templateUrl: "modals/incomingVideoModal.html",
                        controller: "IncomingVideoModalController as incomingVideoCtrl",
                        backdrop: "static",
                        keyboard: !1,
                        resolve: {
                            extension: function () {
                                return e;
                            },
                            joiningSenderToConf: function () {
                                return t;
                            },
                        },
                    }));
                }),
                    (this.dismiss = function () {
                        try {
                            n.dismiss("dismissed");
                        } catch (e) {}
                    });
            },
        ])
        .service("$OutgoingVideoModal", [
            "$uibModal",
            function (t) {
                var a = {
                    modalInstance: void 0,
                    outgoingCalls: [],
                    close: function (e) {
                        console.log("$OutgoingVideoModal close", e), angular.isString(e) && (e = parseInt(e));
                        var t = a.outgoingCalls.indexOf(e);
                        0 <= t && a.outgoingCalls.splice(t, 1);
                        console.log("$OutgoingVideoModal close numberCalls", o()), 0 === o() && n();
                    },
                };
                return (
                    (a.dismiss = n),
                    (a.numberOfOutgoingCalls = o),
                    (a.open = function (e) {
                        console.log("$OutgoingVideoModal open", e),
                            a.modalInstance ||
                                (a.modalInstance = t.open({
                                    templateUrl: "modals/outgoingVideoModal.html",
                                    controller: "OutgoingVideoModalController as outgoingVideoCtrl",
                                    backdrop: "static",
                                    keyboard: !1,
                                    resolve: {
                                        extension: function () {
                                            return e;
                                        },
                                    },
                                }));
                        angular.isString(e) && (e = parseInt(e));
                        return a.outgoingCalls.push(e), console.log("$OutgoingVideoModal open numberCalls", o()), a.modalInstance;
                    }),
                    a
                );
                function n() {
                    try {
                        a.modalInstance.dismiss("dismissed");
                    } catch (e) {
                        console.error(e);
                    } finally {
                        a.modalInstance = null;
                    }
                }
                function o() {
                    return a.outgoingCalls.length;
                }
            },
        ])
        .controller("IncomingVideoModalController", [
            "$uibModalInstance",
            "$log",
            "extension",
            "GetUsersService",
            "joiningSenderToConf",
            function (e, t, a, n, o) {
                var r = n.getUsersHash();
                angular.isString(a) && (a = parseInt(a)),
                    (this.userObj = r[a]),
                    (this.acceptButtonText = o ? "Join" : "Accept"),
                    (this.acceptCall = function () {
                        e.close("accepted");
                    }),
                    (this.rejectCall = function () {
                        e.dismiss("rejected");
                    });
            },
        ])
        .controller("OutgoingVideoModalController", [
            "$scope",
            "$uibModalInstance",
            "$log",
            "extension",
            "GetUsersService",
            "$UCVideo",
            "$OutgoingVideoModal",
            function (t, e, a, n, o, r, i) {
                var s = this,
                    l = o.getUsersHash();
                angular.isString(n) && (n = parseInt(n)),
                    (s.outgoingCalls = []),
                    (s.userObj = l[n]),
                    (s.endCall = function (e) {
                        console.log("outgoingVideoCtrl.endCall", e), i.close(e), r.cancelOutgoingCall(e, 0 === i.numberOfOutgoingCalls());
                    }),
                    t.$watch(
                        function () {
                            return i.outgoingCalls.length;
                        },
                        function (e) {
                            (s.outgoingCalls = i.outgoingCalls.map(function (e) {
                                return o.getUserFromExtension(e);
                            })),
                                console.debug("outgoingVideoCtrl.outgoingCalls", s.outgoingCalls),
                                t.$applyAsync();
                        }
                    );
            },
        ]),
    angular
        .module("PageModal", [])
        .run([
            "formlyConfig",
            function (e) {
                e.setType({
                    name: "button",
                    template: '<div><button type="{{::to.type}}" class="btn btn-{{::to.btnType}}" ng-click="onClick($event)" ng-disabled="to.disabled"><span ng-bind-html="to.text"></span></button></div>',
                    defaultOptions: { templateOptions: { btnType: "default", type: "button" }, extras: { skipNgModelAttrsManipulator: !0 } },
                    controller: [
                        "$scope",
                        function (t) {
                            t.onClick = function (e) {
                                return angular.isString(t.to.onClick) ? t.$eval(t.to.onClick, { $event: e }) : t.to.onClick(e);
                            };
                        },
                    ],
                });
            },
        ])
        .service("$PageModal", [
            "$uibModal",
            function (e) {
                this.open = function () {
                    return e.open({ templateUrl: "modals/pageModal.html", controller: "pageModalController as PageCtrl", backdrop: "static", keyboard: !1 });
                };
            },
        ]),
    angular.module("PageModal").controller("pageModalController", [
        "$rootScope",
        "$uibModalInstance",
        "UCLocaleService",
        function (o, t, e) {
            var r = this;
            (r.model = { pageTitle: e.getPhrase("PerformPage") }),
                angular.forEach(["Internal", "External", "Combined"], function (e) {
                    var t = o.globalVars.Settings.Paging[e];
                    angular.isObject(t) && (r.model[e] = t.number);
                }),
                (r.saveDialog = function (e) {
                    t.close({ pageObj: e });
                }),
                (r.closeDialog = function () {
                    t.dismiss("cancel");
                }),
                (r.clickedPage = function (e) {
                    var t, a;
                    "Internal" === e
                        ? ((t = o.globalVars.PageZonesInternal), (a = r.model.Internal))
                        : "External" === e
                        ? ((t = o.globalVars.PageZonesExternal), (a = r.model.External))
                        : "Combined" === e && ((t = o.globalVars.PageZonesCombined), (a = r.model.Combined));
                    var n = t.filter(function (e) {
                        return e.number == a;
                    });
                    r.saveDialog(n[0]);
                }),
                (r.fields = [
                    { key: "Internal", type: "select", templateOptions: { label: e.getPhrase("InternalPageZones"), options: o.globalVars.PageZonesInternal, labelProp: "label", valueProp: "number", placeholder: e.getPhrase("Select") } },
                    {
                        type: "button",
                        templateOptions: {
                            label: "     ",
                            text: '<i class="fa fa-bullhorn"></i> ' + e.getPhrase("Page"),
                            onClick: function (e) {
                                r.clickedPage("Internal");
                            },
                        },
                        expressionProperties: { "templateOptions.disabled": "model.Internal===undefined || model.Internal===null" },
                    },
                    { noFormControl: !0, template: "<hr />" },
                    { key: "External", type: "select", templateOptions: { label: e.getPhrase("ExternalPageZones"), options: o.globalVars.PageZonesExternal, labelProp: "label", valueProp: "number", placeholder: e.getPhrase("Select") } },
                    {
                        type: "button",
                        templateOptions: {
                            label: "     ",
                            text: '<i class="fa fa-bullhorn"></i> ' + e.getPhrase("Page"),
                            disabled: "!model.External",
                            onClick: function (e) {
                                r.clickedPage("External");
                            },
                        },
                        expressionProperties: { "templateOptions.disabled": "!model.External" },
                    },
                    { noFormControl: !0, template: "<hr />" },
                    { key: "Combined", type: "select", templateOptions: { label: e.getPhrase("CombinedPageZones"), options: o.globalVars.PageZonesCombined, labelProp: "label", valueProp: "number", placeholder: e.getPhrase("Select") } },
                    {
                        type: "button",
                        templateOptions: {
                            label: "     ",
                            text: '<i class="fa fa-bullhorn"></i> ' + e.getPhrase("Page"),
                            disabled: "!model.Combined",
                            onClick: function (e) {
                                r.clickedPage("Combined");
                            },
                        },
                        expressionProperties: { "templateOptions.disabled": "!model.Combined" },
                    },
                ]);
        },
    ]),
    angular
        .module("ParkCallModal", [])
        .run([
            "formlyConfig",
            "formlyValidationMessages",
            function (e, t) {
                t.messages.required = 'to.label + " is required"';
            },
        ])
        .service("$ParkCallModal", [
            "$uibModal",
            function (a) {
                this.open = function (e, t) {
                    return a.open({
                        templateUrl: "modals/parkCallModal.html",
                        controller: "parkCallModalController as ParkCallCtrl",
                        size: "sm",
                        backdrop: "static",
                        keyboard: !1,
                        resolve: {
                            activeCallObj: function () {
                                return e;
                            },
                            parkedCallStatus: function () {
                                return t;
                            },
                        },
                    });
                };
            },
        ]),
    angular.module("ParkCallModal").controller("parkCallModalController", [
        "$rootScope",
        "$uibModalInstance",
        "$log",
        "$window",
        "activeCallObj",
        "parkedCallStatus",
        function (e, t, a, n, o, r) {
            var i = this;
            i.modalHeight = (2 * n.innerHeight) / 5;
            for (var s = [], l = 1; l < 65; l++) angular.isUndefined(r[l]) && s.push(l);
            (i.model = { pageTitle: "Park this call", parkedCallOptions: s }),
                (i.saveDialog = function () {
                    t.close({ orbit: i.model.orbit });
                }),
                (i.closeDialog = function () {
                    t.dismiss("cancel");
                }),
                (i.fields = [
                    { noFormControl: !0, template: "<h5><strong>Choose a Park Orbit</strong></h5>" },
                    {
                        key: "orbit",
                        type: "typeahead",
                        templateOptions: { label: "Select an orbit", options: i.model.parkedCallOptions, description: "Specify location to park call", placeholder: "Enter a value between 1 and 64", required: !0 },
                        validators: {
                            validChars: {
                                expression: function (e, t, a) {
                                    var n = e || t;
                                    if (angular.isDefined(n)) {
                                        if (!/\d{1,2}/.test(n)) return !1;
                                        if (n < 1 || 64 < n) return !1;
                                    }
                                    return !0;
                                },
                                message: "'A valid park orbit consists of numbers in the range 1-64'",
                            },
                        },
                    },
                ]);
        },
    ]),
    angular
        .module("SetLogoutStatusModal", [])
        .run(["formlyConfig", function (e) {}])
        .service("$SetLogoutStatusModal", [
            "$uibModal",
            function (e) {
                this.open = function () {
                    return e.open({ templateUrl: "modals/setLogoutStatus.html", controller: "SetLogoutStatusModalController", backdrop: "static", keyboard: !1 });
                };
            },
        ]),
    angular.module("SetLogoutStatusModal").controller("SetLogoutStatusModalController", [
        "$rootScope",
        "$scope",
        "$uibModalInstance",
        "$log",
        "$window",
        "UCLocaleService",
        "$Presence",
        "ProfileService",
        "UCStorageService",
        function (e, t, a, n, o, r, i, s, l) {
            (t.modalHeight = (1 * o.innerHeight) / 4),
                t.modalHeight < 250 && (t.modalHeight = 250),
                o.innerHeight < 250 && (t.modalHeight = o.innerHeight - 10),
                (t.data = {}),
                (t.data.option = "NO_UPDATE"),
                (t.data.profile = void 0),
                (t.data.status = void 0);
            var c = e.globalVars.Settings.LastLogoutStatus;
            if (
                (c && angular.extend(t.data, angular.fromJson(c)),
                (t.data.doNotShowAgain = !1),
                (t.statusOptions = []),
                s.getProfiles(),
                angular.forEach(s.getProfiles(), function (e) {
                    "InTheOffice" !== e.presence.status && t.statusOptions.push({ label: e.name, id: e.id, group: r.getPhrase("Profiles"), type: "profile" });
                }),
                angular.forEach(i.presenceStatusArray(), function (e) {
                    "InTheOffice" !== e.data && t.statusOptions.push({ label: e.label, data: e.data, group: r.getPhrase("Status"), type: "status" });
                }),
                (t.logoutStatus = null),
                t.data.profile || t.data.status)
            ) {
                for (var d = 0; d < t.statusOptions.length; d++) {
                    var u = t.statusOptions[d];
                    if (null == t.logoutStatus && ((t.data.profile && t.data.profile === u.id) || (t.data.status && t.data.status === u.data))) {
                        t.logoutStatus = u;
                        break;
                    }
                }
                null == t.logoutStatus && (t.logoutStatus = t.statusOptions[0]);
            } else t.logoutStatus = t.statusOptions[0];
            (t.saveDialog = function () {
                "UPDATE" === t.data.option && ("profile" === t.logoutStatus.type ? ((t.data.profile = t.logoutStatus.id), (t.data.status = void 0)) : ((t.data.status = t.logoutStatus.data), (t.data.profile = void 0))),
                    a.close({ data: t.data });
            }),
                (t.closeDialog = function () {
                    a.dismiss("cancel");
                });
        },
    ]),
    angular
        .module("SetNightModeModal", [])
        .run(["formlyConfig", function (e) {}])
        .service("$SetNightModeModal", [
            "$uibModal",
            function (e) {
                this.open = function () {
                    return e.open({ templateUrl: "modals/setNightMode.html", controller: "SetNightModeModalController", backdrop: "static", keyboard: !1 });
                };
            },
        ]),
    angular.module("SetNightModeModal").controller("SetNightModeModalController", [
        "$rootScope",
        "$scope",
        "$uibModalInstance",
        "$log",
        "$window",
        function (e, t, a, n, o) {
            (t.modalHeight = (4 * o.innerHeight) / 9),
                (t.data = {}),
                (t.data.nightMode = e.globalVars.NightMode),
                (t.saveDialog = function () {
                    a.close({ data: t.data });
                }),
                (t.closeDialog = function () {
                    a.dismiss("cancel");
                });
        },
    ]),
    angular
        .module("ShowRecentCallsModal", ["ui.grid", "ui.grid.edit"])
        .service("$ShowRecentCallsModal", [
            "$uibModal",
            function (a) {
                var n;
                (this.open = function (e, t) {
                    return (n = a.open({ templateUrl: "modals/showRecentCalls.html", controller: "ShowRecentCallsModalController as showRecentCallsCtrl", size: "lg", backdrop: "static", keyboard: !0 }));
                }),
                    (this.dismiss = function () {
                        try {
                            n.dismiss("dismissed");
                        } catch (e) {}
                    });
            },
        ])
        .controller("ShowRecentCallsModalController", [
            "$AgentUtils",
            "$http",
            "$q",
            "$rootScope",
            "$scope",
            "$timeout",
            "UCLocaleService",
            "UCStorageService",
            "$uibModalInstance",
            "uiGridConstants",
            "$Utilities",
            function (n, r, a, t, o, i, s, l, e, c, d) {
                var u = this;
                function g(e) {
                    e && ((b = !0), p.saveState.restore(o, e), (b = !1));
                }
                function f() {
                    var e = p.saveState.save();
                    (t.globalVars.Settings.RecentCallsGridState = e), l.flushAllLocalApplicationSettings();
                }
                (u.clearState = function () {
                    i(function () {
                        (t.globalVars.Settings.RecentCallsGridState = void 0),
                            l.flushAllLocalApplicationSettings(),
                            p.grid.buildColumns({ orderByColumnDefs: !0 }),
                            angular.forEach(p.grid.columns, function (e) {
                                "selectionRowHeaderCol" !== e.name && ((e.width = "*"), (e.widthType = "auto"));
                            }),
                            p.grid.refreshCanvas(!0).then(function () {
                                p.grid.refresh();
                            });
                    }, 0);
                }),
                    (u.closeDialog = function () {
                        e.close("closed");
                    }),
                    (u.restoreState = g),
                    (u.saveState = f);
                var p,
                    m = [
                        {
                            field: "arrivalTime",
                            type: "date",
                            sort: { direction: c.DESC },
                            enableCellEdit: !1,
                            enableHiding: !1,
                            displayName: s.getPhrase("Column.CallTime"),
                            cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD|date:"MMM d, y h:mm a"}}</span></div>',
                        },
                        { field: "QueueName", enableCellEdit: !1, enableHiding: !1, cellTemplate: '<div class="ui-grid-cell-contents text-center"><span>{{COL_FIELD}}</span></div>' },
                        { field: "CallerID", enableCellEdit: !1, enableHiding: !0, displayName: s.getPhrase("Number"), cellTemplate: '<div class="ui-grid-cell-contents text-center"><span>{{COL_FIELD}}</span></div>' },
                        { field: "CallerName", enableCellEdit: !1, enableHiding: !0, displayName: s.getPhrase("Column.Name"), cellTemplate: '<div class="ui-grid-cell-contents text-center"><span>{{COL_FIELD}}</span></div>' },
                        { field: "Duration", enableCellEdit: !1, enableHiding: !0, displayName: s.getPhrase("Column.Duration"), cellTemplate: '<div class="ui-grid-cell-contents text-center"><span>{{COL_FIELD}}</span></div>' },
                        {
                            field: "Disposition",
                            enableCellEdit: !0,
                            enableCellEditOnFocus: !0,
                            enableHiding: !1,
                            displayName: s.getPhrase("CallDispTitle"),
                            editableCellTemplate: "ui-grid/dropdownEditor",
                            editDropdownOptionsFunction: function (e, t) {
                                return e.tallyCodes
                                    ? e.tallyCodes.Codes.map(function (e) {
                                          return { id: e.ID, value: e.Code };
                                      })
                                    : [{ id: -1, value: s.getPhrase("NotValid") }];
                            },
                        },
                    ],
                    b = !1;
                (u.gridOptions1 = {
                    columnDefs: m,
                    enableColumnMenus: !1,
                    enableSorting: !0,
                    enableGridMenu: !0,
                    gridMenuTitleFilter: function (e) {
                        var t = a.defer();
                        return (
                            i(function () {
                                t.resolve(e);
                            }, 50),
                            t.promise
                        );
                    },
                    gridMenuShowHideColumns: !0,
                    saveWidths: !0,
                    saveOrder: !0,
                    saveScroll: !1,
                    saveFocus: !1,
                    saveVisible: !0,
                    saveSort: !0,
                    saveFilter: !1,
                    savePinning: !1,
                    multiSelect: !0,
                    enableRowHeaderSelection: !0,
                    modifierKeysToMultiSelect: !1,
                    enableSelectionBatchEvent: !0,
                    enableRowSelection: !0,
                    enableSelectAll: !0,
                    selectionRowHeaderWidth: 35,
                    onRegisterApi: function (e) {
                        (p = e).edit.on.afterCellEdit(o, function (t, e, a, n) {
                            if (t.tallyCodes) {
                                if (d.isDigits(a)) {
                                    var o = t.tallyCodes.Codes.find(function (e) {
                                        return a == e.ID;
                                    });
                                    o
                                        ? r.post("/api/callDisposition/" + t.RecordID, o).then(
                                              function (e) {
                                                  t.Disposition = o.Code;
                                              },
                                              function (e) {
                                                  console.error("setting disp code", e), (t.Disposition = null);
                                              }
                                          )
                                        : (t.Disposition = null);
                                }
                            } else t.Disposition = null;
                        }),
                            p.colResizable.on.columnSizeChanged(o, function (e, t) {
                                console.log("columnSizeChanged"), f();
                            }),
                            p.core.on.columnVisibilityChanged(o, function (e) {
                                console.log("columnVisibilityChanged: name=" + e.colDef.name + " visible: " + e.colDef.visible), b || f();
                            }),
                            i(function () {
                                g(t.globalVars.Settings.RecentCallsGridState);
                            }, 100);
                    },
                }),
                    (u.gridOptions1.data = []),
                    r.get("/api/callDisposition").then(
                        function (e) {
                            u.gridOptions1.data = e.data.map(function (e) {
                                var t = moment(e.ArrivalTime);
                                e.arrivalTime = t.toDate();
                                var a = parseInt(e.QueueID);
                                return (e.tallyCodes = n.tallyCodes[a]), e;
                            });
                        },
                        function (e) {
                            console.error("reading recent agent calls", e);
                        }
                    );
            },
        ]),
    angular
        .module("TestDriverModal", [])
        .run(["formlyConfig", function (e) {}])
        .service("$TestDriverModal", [
            "$uibModal",
            function (e) {
                this.open = function () {
                    return e.open({ templateUrl: "modals/testDriver.html", controller: "TestDriverModalController as vm", backdrop: "static", keyboard: !1 });
                };
            },
        ]),
    angular.module("TestDriverModal").controller("TestDriverModalController", [
        "CurrentUser",
        "$rootScope",
        "$scope",
        "$ServerEventsCP",
        "$uibModalInstance",
        function (e, t, a, n, o) {
            var r = this;
            (r.data = {}),
                (r.onClose = function () {
                    i(), o.dismiss("cancel");
                }),
                (r.onStart = function () {
                    n.startTestDriver();
                }),
                (r.onStop = function () {
                    n.stopTestDriver();
                }),
                t.globalVars.TestDriverRunning || (r.data.status = "Driver is currently off"),
                (r.data.extension = e.getExtension());
            var i = t.$on("TEST_DRIVER_EVENT", function (e, t) {
                var a = t.action;
                t = t.args;
                angular.isObject(t) ? console.log("received TEST_DRIVER_EVENT", a, t.State, t.IsInbound, t.CallerID, t.CalledID) : console.log("received TEST_DRIVER_EVENT", a, t),
                    "SLEEPING" === a
                        ? (r.data.status = "Call to " + t.number + " scheduled in " + t.idleTime + " seconds")
                        : "CallChanged" === a
                        ? "Connected" === t.state
                            ? t.IsInbound
                                ? (r.data.status = "Connected on inbound call from " + t.CallerID)
                                : (r.data.status = "Connected on outbound call to " + t.CallerID)
                            : (r.data.status = t.State + ": " + t.CalledID)
                        : "CallRemoved" === a
                        ? (r.data.status = "")
                        : "ConnectedCallWatchdog" === a
                        ? (r.data.status += " (scheduled to be disconnected in " + t.hangupTime + " seconds)")
                        : (r.data.status = "action:" + a + angular.toJson(t));
            });
        },
    ]),
    angular.module("UpdateContactFilterModal", []).service("$UpdateContactFilterModal", [
        "$uibModal",
        function (e) {
            this.open = function () {
                return e.open({ templateUrl: "modals/updateContactFilterModal.html", controller: "UpdateContactFilterModalController as vm", backdrop: "static", keyboard: !0 });
            };
        },
    ]),
    angular.module("UpdateContactFilterModal").controller("UpdateContactFilterModalController", [
        "$ContactsNew",
        "$rootScope",
        "UCLocaleService",
        "$uibModalInstance",
        function (e, t, a, n) {
            var o = this;
            (o.change = function (e) {
                console.log("change", e);
            }),
                (o.closeDialog = function () {
                    n.dismiss("cancel");
                }),
                (o.saveDialog = function () {
                    var t = [];
                    angular.forEach(o.model.types, function (e) {
                        e.value && t.push(e.data);
                    }),
                        n.close(t);
                }),
                (o.model = { pageTitle: a.getPhrase("UpdateContactFilter"), extension: null, types: {} });
            var r = e.getContactFilter(),
                i = e.getSupportedContacts();
            o.model.types = e.getPossibleFilters().map(function (e) {
                var t = i[e];
                return (t.value = 0 <= r.indexOf(e)), t;
            });
        },
    ]),
    angular.module("VideoConferenceModal", ["WebConferenceWarningModal"]).service("$VideoConferenceModal", [
        "$uibModal",
        function (e) {
            this.open = function () {
                return e.open({ templateUrl: "modals/videoConference.html", controller: "VideoConferenceController as videoConferenceCtrl", size: "lg", backdrop: "static", keyboard: !1, resolve: {} });
            };
        },
    ]),
    angular.module("VideoConferenceModal").controller("VideoConferenceController", [
        "$rootScope",
        "$scope",
        "$window",
        "$uibModalInstance",
        "$filter",
        "$timeout",
        "GetUsersService",
        "$UCVideo",
        "ChatService",
        "CurrentUser",
        "$AppMain",
        "$WebConferenceWarningModal",
        "UCStorageService",
        function (o, a, e, i, t, s, n, l, c, d, r, u, g) {
            function f() {
                var e,
                    r,
                    t = 0;
                if ("WebConf" === p.type) {
                    if (!p.webConfUserID || !p.webConfPassword)
                        return p.webConfUserID || (p.webConfUserIDError = "A UC Web Conference user name is required"), void (p.webConfPassword || (p.webConfPasswordError = "A UC Web Conference password is required"));
                    e = d.getExtension() + (+new Date()).toString().substr(-5);
                    var a = (r = o.globalVars.SwitchURL + "uc/conf?id=" + e) + "&u=" + p.webConfUserID + "&p=" + p.webConfPassword,
                        n = window.open(a, "_blank");
                    console.debug("webConfWin", n),
                        p.webConfRememberSettings
                            ? ((o.globalVars.Settings.WebConfUserID = p.webConfUserID), (o.globalVars.Settings.WebConfPassword = p.webConfPassword))
                            : ((o.globalVars.Settings.WebConfUserID = void 0), (o.globalVars.Settings.WebConfPassword = void 0)),
                        g.flushAllLocalApplicationSettings(),
                        (t = 6e3);
                }
                (o.globalVars.VideoCallType = p.type),
                    s(function () {
                        angular.forEach(p.invitees, function (e, t) {
                            if ("Chat" === p.type)
                                0 == t
                                    ? l.startVideo(e.userObj.extension)
                                    : s(function () {
                                          l.addVideo(e.userObj.extension);
                                      }, 250);
                            else if (e.userObj) {
                                var a = e.userObj.extension,
                                    n = "Please join UC Web Conference by clicking " + r,
                                    o = c.getChat(a);
                                o
                                    ? c.sendMessage(c.addChat(a), n)
                                    : c.inviteToChat(a).then(
                                          function (e) {
                                              c.sendMessage(o, n);
                                          },
                                          function (e) {
                                              console.error("inviteToChat", e);
                                          }
                                      );
                            }
                        });
                    }, t),
                    i.close({});
            }
            var p = this;
            (p.modalHeight = (3 * e.innerHeight) / 5),
                (p.type = o.globalVars.VideoCallType),
                (p.maxInvitees = void 0),
                (p.selectedInvitee = void 0),
                (p.inviteeChoices = []),
                (p.invitees = []),
                (p.selectedInvitees = {}),
                (p.webConfUserID = o.globalVars.Settings.WebConfUserID),
                (p.webConfPassword = o.globalVars.Settings.WebConfPassword);
            var m = angular.isString(p.webConfUserID) && 0 < p.webConfUserID.length && angular.isString(p.webConfPassword) && 0 < p.webConfPassword.length;
            (p.isCollapsed = m),
                (p.webConfRememberSettings = m),
                (p.close = function () {
                    i.dismiss("cancel");
                }),
                (p.invite = function () {
                    p.invitees.push({ userObj: void 0 });
                }),
                (p.start = function () {
                    "WebConf" !== p.type || o.globalVars.Settings.SuppressWebConferenceWarning
                        ? f()
                        : u.open().result.then(function (e) {
                              console.log(e), (o.globalVars.Settings.SuppressWebConferenceWarning = e.doNotShowAgain), g.flushAllLocalApplicationSettings(), f();
                          });
                }),
                (p.uninvite = function (e) {
                    var t = p.invitees.indexOf(e);
                    t < 0 || (p.invitees.splice(t, 1), e.userObj && (p.selectedInvitees[e.userObj.extension] = 0));
                }),
                (p.inviteeChoiceOnFocus = function (e) {
                    (p.inviteeChoices = []),
                        angular.forEach(n.getUsers(), function (e) {
                            var t;
                            (("Chat" === p.type && e.cache.canVideo) || ("WebConf" === p.type && e.cache.canChat)) &&
                                !p.selectedInvitees[e.extension] &&
                                p.inviteeChoices.push({ obj: (t = e), name: t.name, extension: t.extension, imageURL: t.photo, label: t.name + " (" + t.extension + ")" });
                        }),
                        (p.inviteeChoices = t("orderBy")(p.inviteeChoices, "name"));
                }),
                (p.inviteeSelected = function (e, t) {
                    (p.selectedInvitee = void 0), (e.userObj = n.getUserFromExtension(t.extension)), (p.selectedInvitees[t.extension] = 1), a.$applyAsync();
                }),
                a.$watch(
                    function () {
                        return p.type;
                    },
                    function (e) {
                        angular.isDefined(e) &&
                            (console.debug("videoConferenceCtrl.type", e),
                            "Chat" === p.type ? (p.maxInvitees = 3) : (p.maxInvitees = 6),
                            (p.invitees = p.invitees.filter(function (e) {
                                return "Chat" === p.type ? e.userObj.cache.canVideo : e.userObj.cache.canChat;
                            })),
                            a.$applyAsync());
                    }
                );
        },
    ]),
    angular
        .module("WebConferenceWarningModal", [])
        .run(["formlyConfig", function (e) {}])
        .service("$WebConferenceWarningModal", [
            "$uibModal",
            function (e) {
                this.open = function () {
                    return e.open({ templateUrl: "modals/webConferenceWarning.html", controller: "WebConferenceWarningModalController as webConfWarningCtrl", size: "sm", backdrop: "static", keyboard: !1 });
                };
            },
        ]),
    angular.module("WebConferenceWarningModal").controller("WebConferenceWarningModalController", [
        "$uibModalInstance",
        function (e) {
            var t = this;
            (t.doNotShowAgain = !1),
                (t.start = function () {
                    e.close({ doNotShowAgain: t.doNotShowAgain });
                }),
                (t.close = function () {
                    e.dismiss("cancel");
                });
        },
    ]),
    angular.module("UserSettingsModal", []).service("$UserSettings", [
        "$rootScope",
        "UCLocaleService",
        "$uibModal",
        function (e, t, n) {
            (this.open = function (e, t, a) {
                return n.open({
                    templateUrl: "app-modals/userSettingsModal.html",
                    controller: "userSettingsModalController",
                    size: "lg",
                    backdrop: "static",
                    keyboard: !1,
                    resolve: {
                        userObj: function () {
                            return e;
                        },
                        currentSettings: function () {
                            return t;
                        },
                        fromAdmin: function () {
                            return a;
                        },
                    },
                });
            }),
                (e.globalVars.NameDisplayOptions = [
                    { label: t.getPhrase("Name.ExtName"), data: "EXT_NAME" },
                    { label: t.getPhrase("Name.Ext"), data: "EXT" },
                    { label: t.getPhrase("Name.FirstLast"), data: "FIRST_LAST" },
                    { label: t.getPhrase("Name.LastFirst"), data: "LAST_FIRST" },
                    { label: t.getPhrase("Name.FirstOnly"), data: "FIRST_ONLY" },
                ]),
                (e.globalVars.HomePageDisplayOptions = [
                    { label: t.getPhrase("Home.Default"), data: "DEFAULT", image: "" },
                    { label: t.getPhrase("Home.SingleColumn"), data: "ONE_COLUMN", image: "fa fa-align-justify" },
                    { label: t.getPhrase("Home.MultipleColumns"), data: "MULTI_COLUMN", image: "fa fa-th-large" },
                ]),
                (e.globalVars.NotificationOptions = [
                    { label: t.getPhrase("Button.Off"), data: "OFF" },
                    { label: t.getPhrase("AutoClose"), data: "AUTO_CLOSE" },
                    { label: t.getPhrase("ManualClose"), data: "MANUAL_CLOSE" },
                ]);
        },
    ]),
    angular.module("UserSettingsModal").controller("userSettingsModalController", [
        "userObj",
        "currentSettings",
        "fromAdmin",
        "$rootScope",
        "$scope",
        "$window",
        "$http",
        "$q",
        "$uibModalInstance",
        "$timeout",
        "UCLocaleService",
        "$ConfirmationModal",
        "$Utilities",
        "$Agent",
        "FileUploader",
        "ProfileService",
        "$UCVideo",
        "$notification",
        "$AppMain",
        "$ServerEventsCP",
        function (e, a, n, o, r, t, i, s, l, c, d, u, g, f, p, m, b, h, C, v) {
            (r.modalHeight = (60 * t.innerHeight) / 100),
                (r.data = {}),
                (r.data.fromAdmin = n),
                r.data.fromAdmin ? (r.data.title = d.getPhrase("UserSettings.Profile.Title", e.name)) : (r.data.title = d.getPhrase("Menu.Settings")),
                (r.data.debugCount = 0),
                (r.data.usingVideo = 0 < b.numConnections),
                n ||
                    ((r.data.extension = e.extension),
                    (r.data.user = e),
                    (r.data.alternateNumbers = []),
                    angular.copy(r.data.user.AlternateNumbers, r.data.alternateNumbers),
                    (r.data.presenceProfiles = angular.copy(m.getProfiles())),
                    r.data.presenceProfiles.unshift({ name: d.getPhrase("NoneSelected") }),
                    (r.data.videoPresenceProfileObj = r.data.presenceProfiles[0])),
                (r.data.currentPassword = ""),
                (r.data.newPassword = ""),
                (r.data.confirmPassword = ""),
                (r.data.showPreviewError = ""),
                (r.data.showPreview = !1),
                (r.data.showPreviewText = d.getPhrase("DisplaySelfView")),
                (r.altNumsChanged = !1),
                (r.data.formError = !1),
                (r.data.parkOrbitError = ""),
                (r.setVideoPresenceProfile = function (e) {
                    r.data.videoPresenceProfileObj = e;
                }),
                (r.debugInc = function () {
                    r.data.fromAdmin ||
                        (r.data.debugCount++, r.data.showDebugOptions ? ((r.data.showDebugOptions = !1), (r.data.settings.TestDriver.enabled = !1), (r.data.debugCount = 0)) : 5 <= r.data.debugCount && (r.data.showDebugOptions = !0));
                }),
                (r.onStart = function () {
                    v.startTestDriver();
                }),
                (r.onStop = function () {
                    v.stopTestDriver();
                }),
                (r.setLocalTemporarySettings = function () {
                    (r.data.settings = {}),
                        angular.copy(a, r.data.settings),
                        ((r.data.settings.TestDriver && r.data.settings.TestDriver.enabled) || r.data.settings.DebugLogging) && (r.data.showDebugOptions = !0),
                        (r.data.cpMode = o.globalVars.Settings.CP_Mode),
                        (r.data.parkOrbits = g.getRanges(r.data.settings.ParksToMonitor).join(" ")),
                        (r.data.IsAdvancedUser = o.globalVars.IsAdvancedUser || r.data.fromAdmin),
                        (r.data.IsAttendant = o.globalVars.IsAttendant || r.data.fromAdmin),
                        (r.data.IsGlobalRelease = o.globalVars.IsGlobalRelease),
                        (r.data.IsSLTPhone = o.globalVars.IsSLTPhone),
                        (r.data.IsMobile = o.globalVars.IsMobile),
                        (r.data.IsAgent = o.globalVars.IsAgent || r.data.fromAdmin),
                        (r.data.TestDriverRunning = o.globalVars.TestDriverRunning),
                        (r.data.IsUT880 = o.globalVars.IsUT880),
                        (r.data.HasHeadset = o.globalVars.HasHeadset),
                        (r.data.agents = angular.copy(f.agents)),
                        (r.data.queues = angular.copy(f.queues));
                    var e = r.data.settings.VideoCallProfile;
                    if (e) {
                        var t = m.findProfile(e);
                        t && (r.data.videoPresenceProfileObj = t);
                    }
                    r.onEnableVideoChanged(),
                        (r.data.smsNumbers = n
                            ? []
                            : o.globalVars.SmsNumbers.map(function (e) {
                                  return { number: e.number, rawNumber: e.rawNumber, autoReply: e.autoReply, country: e.country };
                              }));
                }),
                (r.getMissedCallNotification = function () {
                    var e = o.globalVars.NotificationOptions.find(function (e) {
                        return e.data === r.data.settings.MissedCallNotifications;
                    });
                    return e || o.globalVars.NotificationOptions[1];
                }),
                (r.selectMissedCallNotification = function (e) {
                    r.data.settings.MissedCallNotifications = e.data;
                }),
                (r.getAbandonedCallNotification = function () {
                    var e = o.globalVars.NotificationOptions.find(function (e) {
                        return e.data === r.data.settings.AbandonedCallNotifications;
                    });
                    return e || o.globalVars.NotificationOptions[1];
                }),
                (r.selectAbandonedCallNotification = function (e) {
                    r.data.settings.AbandonedCallNotifications = e.data;
                }),
                (r.onEnableVideoChanged = function () {
                    r.data.settings.EnableVideo && !r.data.IsAdvancedUser ? (r.data.enableVideoNoAdvancedUser = d.getPhrase("NeedAdvancedLicenseForVideo")) : (r.data.enableVideoNoAdvancedUser = "");
                }),
                (r.setSelfView = function (e) {
                    r.data.selfViewSetting = e;
                }),
                (r.changePassword = function () {
                    var t = s.defer();
                    if (r.data.currentPassword && r.data.newPassword)
                        return (
                            i.post("/ucapi/cti/ChangePassword", { user: C.username, current: r.data.currentPassword, password: r.data.newPassword }).then(
                                function (e) {
                                    console.log("ChangePassword success"), (r.data.currentPassword = ""), (r.data.newPassword = ""), (r.data.confirmPassword = ""), C.showToast("success", r.getLocalPhrase("PWChangeSuccess")), t.resolve(!0);
                                },
                                function (e) {
                                    console.error("ChangePassword error", e), 403 === e.status ? C.showToast("error", r.getLocalPhrase("WrongCurPW")) : C.showToast("error", r.getLocalPhrase("PWChangeError", [e.status])), t.reject(e);
                                }
                            ),
                            t.promise
                        );
                }),
                (r.doSaveDialog = function () {
                    (r.data.settings.CP_Mode = r.data.cpMode),
                        r.data.videoPresenceProfileObj && r.data.videoPresenceProfileObj.id ? (r.data.settings.VideoCallProfile = r.data.videoPresenceProfileObj.id) : (r.data.settings.VideoCallProfile = null);
                    var e = g.splitRanges(r.data.parkOrbits, !0);
                    angular.copy(e, r.data.settings.ParksToMonitor), l.close({ data: r.data });
                }),
                (r.saveDialog = function () {
                    0 < r.data.currentPassword.length && 0 < r.data.newPassword.length && 0 < r.data.confirmPassword.length
                        ? r.data.newPassword === r.data.confirmPassword
                            ? r.changePassword().then(function (e) {
                                  r.doSaveDialog();
                              })
                            : u.open("Password Update Issues", "Discard password changes and continue with the save?", "YES_NO").result.then(
                                  function (e) {
                                      e && r.doSaveDialog();
                                  },
                                  function (e) {}
                              )
                        : r.doSaveDialog();
                }),
                (r.closeDialog = function () {
                    l.dismiss("cancel");
                }),
                (r.getUserMedia = function () {
                    getUserMedia(
                        { audio: !0, video: !0 },
                        function (e) {
                            console.log("Local stream created"), (r.data.localStream = e);
                            var t = document.getElementById("localVideo");
                            (t.onloadedmetadata = function (e) {
                                console.log("Local video loaded"), (r.data.videoLoaded = !0);
                            }),
                                (t.src = window.URL.createObjectURL(e)),
                                (r.data.showPreviewText = d.getPhrase("Button.Close"));
                        },
                        function (e) {
                            console.log("getUserMedia error", e);
                        }
                    );
                }),
                (r.toggleSelfView = function () {
                    if (((r.data.showPreview = !r.data.showPreview), r.data.showPreview)) r.getUserMedia();
                    else {
                        void 0 === r.data.localStream.getTracks
                            ? r.data.localStream.stop()
                            : r.data.localStream.getTracks().forEach(function (e) {
                                  e.stop();
                              });
                        var e = document.getElementById("localVideo");
                        e && (e.pause(), (e.src = "")), (r.data.localStream = null), (r.data.videoLoaded = !1), (r.data.showPreviewText = d.getPhrase("DisplaySelfView"));
                    }
                }),
                (r.getHomeDisplayObject = function (e) {
                    for (var t = 0; t < o.globalVars.HomePageDisplayOptions.length; t++) {
                        var a = o.globalVars.HomePageDisplayOptions[t];
                        if (e === a.data) return a;
                    }
                    return o.globalVars.HomePageDisplayOptions[0];
                }),
                (r.selectHomeDisplayOption = function (e) {
                    r.data.settings.HomePageDisplaySetting = e.data;
                }),
                (r.getNameDisplayObject = function (e) {
                    for (var t = 0; t < o.globalVars.NameDisplayOptions.length; t++) {
                        var a = o.globalVars.NameDisplayOptions[t];
                        if (e === a.data) return a;
                    }
                    return o.globalVars.NameDisplayOptions[0];
                }),
                (r.selectNameDisplayPreference = function (e) {
                    r.data.settings.NameDisplayPreference = e.data;
                }),
                (r.resetSettings = function () {
                    u.open(d.getPhrase("Settings.ResetSettingsTitle"), d.getPhrase(o.globalVars.ExtendedProperties.ucProfile ? "ResetSettingsConfirmTextWithProfile" : "Settings.ResetSettingsConfirmText"), "YES_NO").result.then(
                        function (e) {
                            e &&
                                (r.resetApplicationSettings(),
                                C.applyProfileSettings().then(
                                    function (e) {
                                        (a = angular.copy(o.globalVars.Settings)), r.setLocalTemporarySettings();
                                    },
                                    function (e) {
                                        r.setLocalTemporarySettings();
                                    }
                                ));
                        },
                        function (e) {}
                    );
                }),
                (r.changePhoto = function (e) {
                    c(function () {
                        angular.element(document.querySelector("#idFilePhoto")).trigger("click");
                    }, 50);
                }),
                (r.clearPhoto = function () {
                    u.open(d.getPhrase("ClearPhotoTitle"), d.getPhrase("ClearPhotoText"), "YES_NO").result.then(function (e) {
                        e &&
                            g.removeProfilePhoto(r.data.user.extension).then(function (e) {
                                c(function () {
                                    r.$apply(function () {
                                        r.data.user.photo = r.noProfileImage();
                                    });
                                }, 250);
                            });
                    });
                });
            var S = null;
            r.onPhotoUpdatedHandler = function (e, t) {
                t.extension === r.data.user.extension &&
                    (c(function () {
                        r.$apply(function () {
                            r.data.uploadingPicture = !1;
                        });
                    }, 0),
                    S && (S(), (S = null)));
            };
            var y = (r.uploader = new p({}));
            y.filters.push({
                name: "imageFilter",
                fn: function (e, t) {
                    var a = "|" + e.type.slice(e.type.lastIndexOf("/") + 1) + "|";
                    return -1 !== "|jpg|png|jpeg|bmp|gif|".indexOf(a);
                },
            }),
                (y.onAfterAddingFile = function (e) {
                    console.info("onAfterAddingFile", e), (r.data.uploadingPicture = !0), (S = o.$on("PhotoUpdated", r.onPhotoUpdatedHandler));
                    var t = e._file;
                    g.uploadProfilePhoto(r.data.user.extension, t).then(
                        function (e) {
                            console.log("success");
                        },
                        function (e) {
                            console.log("failure"), (r.data.uploadingPicture = !1), S && (S(), (S = null));
                        }
                    );
                }),
                (o.getAltNumTypes = function () {
                    return g.getAltNumTypes();
                }),
                (r.cancelAlternateNumberChanges = function () {
                    (r.altNumsChanged = !1), angular.copy(r.data.user.AlternateNumbers, r.data.alternateNumbers);
                }),
                (r.addUser = function () {
                    (r.altNumsChanged = !0), r.data.alternateNumbers.push({ Number: "", AltType: "Business", isNew: !0 });
                }),
                (r.deleteUser = function (e) {
                    (r.altNumsChanged = !0), r.data.alternateNumbers.splice(e, 1);
                }),
                (r.addRowIfEmpty = function () {
                    (r.altNumsChanged = !0), 0 == r.data.alternateNumbers.length && r.addUser();
                }),
                (r.checkNumber = function (e) {
                    return e ? ((e = g.toDigits(e)) ? void 0 : d.getPhrase("Err.PhoneNumInvalid")) : d.getPhrase("Err.PhoneNumRequired");
                }),
                (r.saveAlternateNumberChanges = function () {
                    (r.data.jsContact = {}),
                        angular.isArray(r.data.user.AlternateNumbers) || (r.data.user.AlternateNumbers = []),
                        angular.copy(r.data.user, r.data.jsContact),
                        0 == r.data.alternateNumbers.length
                            ? (r.data.jsContact.AlternateNumbers = null)
                            : (null == r.data.jsContact.AlternateNumbers && (r.data.jsContact.AlternateNumbers = []), angular.copy(r.data.alternateNumbers, r.data.jsContact.AlternateNumbers)),
                        i.post("/ucapi/dir/UpdateContact", { dirName: "Internal", item: r.data.jsContact }).then(
                            function (e) {
                                angular.copy(r.data.alternateNumbers, r.data.user.AlternateNumbers), (r.altNumsChanged = !1);
                            },
                            function (e) {}
                        );
                }),
                (r.onBlurParkOrbits = function () {
                    var e = g.splitRanges(r.data.parkOrbits, !0);
                    if (angular.isArray(e))
                        if (e[0] < 1 || 64 < e[e.length - 1]) r.data.parkOrbitError = "Valid park orbits are 1 to 64";
                        else {
                            for (var t = [], a = 0; a < e.length; a++) {
                                var n = e[a];
                                t.indexOf(n) < 0 && t.push(n);
                            }
                            8 < (e = t).length
                                ? (r.data.parkOrbitError = "A maximum of 8 park orbits can be monitored.")
                                : ((r.data.parkOrbitError = ""), e.length ? (r.data.parkOrbits = g.getRanges(e).join(" ")) : (r.data.parkOrbits = ""));
                        }
                    else r.data.parkOrbitError = "INVALID_RANGE" === e ? "Invalid range specified." : "INVALID_ITEM" === e ? "Invalid park orbit or range entered." : "Unknown error parsing park orbit list.";
                }),
                (r.getSelectedNightModeLabel = function (e) {
                    return o.getSelectedNightModeLabel(e);
                }),
                (r.canMonitor = function () {
                    return f.features.canMonitor && !r.data.IsMobile;
                }),
                (r.queues = function () {
                    return r.data.queues;
                }),
                (r.agents = function () {
                    return r.data.agents;
                }),
                (r.colors = function () {
                    return f.colors;
                }),
                (r.goBackToMainMenu = function (e) {
                    (r.data.page = ""), e.preventDefault();
                }),
                (r.checkThreshold = function (e) {
                    if (e) {
                        var t = e.replace(/[^0-9]/g, "");
                        if (e.length != t.length) return "Value should be a positive number";
                    }
                }),
                (r.requestPermission = function () {
                    h.requestPermission().then(function (e) {
                        console.log("requestPermission:", e), (o.globalVars.NotificationsAvailable = "granted" !== e);
                    });
                }),
                o.globalVars.isEdge && (r.data.requestPermission = !h.isEnabled()),
                r.setLocalTemporarySettings();
        },
    ]),
    angular.module("ucsuite_wc").controller("ActiveCallsCtrl", [
        "$scope",
        "$rootScope",
        "HttpService",
        "$dialModalService",
        "Calls",
        "$UCVideo",
        "$incomingCallModalService",
        function (a, n, o, r, i, t, e) {
            var s = this;
            (s.visibleCallsArr = []),
                (a.getMainBorderWidth = function (e) {
                    return e.callConnected, null;
                }),
                (a.getMainBorderColor = function (e) {
                    return e.callConnected ? (e.conferencePartiesArr ? "text-info" : null) : "#A94442";
                }),
                (a.getMainBackgroundColor = function (e) {
                    return e.callConnected ? null : "#A94442";
                }),
                (a.getDurationClass = function (e) {
                    return e.callConnected ? (e.onHold ? "text-danger" : null) : "animated flash" + (e.inbound ? " dialing" : " ringing");
                }),
                (a.getPhoneImageClass = function (e) {
                    return e.callConnected ? "fa fa-phone call-connected" : "glyphicon glyphicon-phone-alt animated flash" + (e.inbound ? " dialing" : " ringing");
                }),
                (a.getCallDirectionClasses = function (e) {
                    var t;
                    return (t = e.inbound ? "fa fa-arrow-right fa-inbound-call" : "fa fa-arrow-left fa-outbound-call"), e.callConnected || (t += " text-danger animated flash" + (e.inbound ? " ringing" : " dialing")), t;
                }),
                (a.onHangup = function (e, t) {
                    o.hangup(e.callID).then(
                        function (e) {},
                        function (e) {}
                    );
                }),
                (a.onResume = function (t) {
                    o.resumeCall(t.callID).then(
                        function (e) {
                            t.onHold = !1;
                        },
                        function (e) {}
                    );
                }),
                (a.onHold = function (e) {
                    o.holdCall(e.callID).then(
                        function (e) {},
                        function (e) {}
                    );
                }),
                (a.onStopTransfer = function (e, t) {
                    e.isChild && e.parent
                        ? o.stopConference().then(
                              function (e) {},
                              function (e) {}
                          )
                        : (o.stopTransfer(e.callID).then(
                              function (e) {},
                              function (e) {}
                          ),
                          i.removeActiveCallByIndex(t));
                }),
                (a.onIgnore = function (e, t) {
                    i.removeActiveCallByIndex(t);
                }),
                (a.onTransfer = function (e, t) {
                    var a = { isTransfer: !0 };
                    (a.transferMode = t.data), (a.currentCall = e), r.open(a);
                }),
                (a.setTransfer = function (e) {
                    (n.globalVars.DefaultTransfer = e),
                        (n.globalVars.Settings.DefaultTransferMode = e.data),
                        o.saveUserSettings(),
                        "CLICK_TO_TRANSFER" !== e.data ? (n.globalVars.CLICK_TO_TRANSFER = !1) : (n.globalVars.CLICK_TO_TRANSFER = !n.globalVars.CLICK_TO_TRANSFER);
                }),
                (a.onAddCall = function (e, t) {
                    var a = { isConference: !(n.globalVars.CLICK_TO_TRANSFER = !1) };
                    (a.currentCall = e), r.open(a);
                }),
                (a.onAnswer = function (e, t) {
                    console.log("activeCallsController: onAnswer callObj" + JSON.stringify(e)),
                        o.answer(e.callID).then(
                            function (e) {},
                            function (e) {}
                        );
                }),
                (a.onRedirectToVM = function (e, t) {
                    console.log("activeCallsController: onRedirectToVM callObj" + JSON.stringify(e)),
                        o.redirectToVM(e.callID).then(
                            function (e) {},
                            function (e) {
                                console.log("redirectToVM failed, reason=" + e);
                            }
                        );
                }),
                (a.seeIncomingAndActive = function () {
                    return { incomingCalls: i.incomingCalls(), getActiveCalls: i.getActiveCalls() };
                }),
                (a.onComplete = function (e, t) {
                    console.log("activeCallsController: onComplete callObj" + JSON.stringify(e)),
                        a.isCallTransfer()
                            ? o.completeTransfer(e.callID).then(
                                  function (e) {},
                                  function (e) {}
                              )
                            : a.isConference() &&
                              o.joinConference(e.callID).then(
                                  function (e) {},
                                  function (e) {}
                              );
                }),
                (a.getActiveCalls = function () {
                    return i.getActiveCalls();
                }),
                (a.isCallTransfer = function () {
                    return r.isCallTransfer();
                }),
                (a.isConference = function () {
                    return r.isConference();
                }),
                (a.showObject = function (e) {
                    return JSON.stringify(e).split(",").join("\n");
                }),
                (a.getConferenceEntries = function (e) {
                    var t = [];
                    if (angular.isArray(e.children))
                        for (var a = 0; a < e.children.length; a++) {
                            var n = e.children[a],
                                o = i.getActiveCallByCallID(n);
                            o && t.push(o);
                        }
                    return t;
                }),
                (a.onAddVideo = function (e) {
                    t.addVideo(e.number);
                }),
                a.$watch(
                    function () {
                        return i.incomingAndAnsweredCalls;
                    },
                    function (e, t) {
                        s.visibleCallsArr = e;
                    }
                );
        },
    ]),
    angular.module("ucsuite_wc").controller("buddyListsCtrl", [
        "$scope",
        "$state",
        "CurrentUser",
        "$timeout",
        "$AppMain",
        function (e, t, a, n, o) {
            (e.addBuddyList = function () {
                t.go("app.buddyList", { name: "" });
            }),
                n(function () {
                    o.windowUpdated();
                }, 250),
                (e.buddyLists = a.getBuddyLists());
        },
    ]),
    angular.module("ucsuite_wc").controller("buddyListItemCtrl", [
        "$scope",
        "$state",
        "CurrentUser",
        "HttpService",
        "UCLocaleService",
        "$ConfirmationModal",
        "$AppMain",
        "ChatService",
        function (a, n, o, t, e, r, i, s) {
            (a.toggleSelection = function () {
                a.buddyListObj.default ||
                    angular.forEach(o.getBuddyLists(), function (e, t) {
                        e === a.buddyListObj ? ((e.default = !0), (localStorage.defaultBuddyListID = e.ID), i.setBuddyList(e)) : (e.default = !1);
                    });
            }),
                (a.deleteBuddyList = function (a) {
                    a &&
                        r.open(e.getPhrase("BuddyList.DeleteConfirmTitle"), e.getPhrase("BuddyList.DeleteConfirmText", [a.name]), "YES_NO").result.then(function (e) {
                            e &&
                                t.removeBuddyList(a).then(
                                    function (e) {
                                        if (a.current) {
                                            var t = o.getNextBuddyList();
                                            t && i.setBuddyList(t);
                                        }
                                        o.removeBuddyList(a), i.showToast("success", "", "Buddy List: " + a.name + " was deleted.");
                                    },
                                    function (e) {
                                        i.showToast("error", "", "Buddy List: " + a.name + " was not deleted.");
                                    }
                                );
                        });
                }),
                (a.editBuddyList = function (e) {
                    n.go("app.buddyList", { name: e });
                }),
                (a.goToBuddyList = function (e, t) {
                    i.goToBuddyListName(e, t);
                }),
                (a.startBuddyListChat = function (t) {
                    var e = s.getChats().find(function (e) {
                        return e.group && e.group.IsBuddyList && e.group.ID === t.ID;
                    });
                    e && n.go("app.newChat", { chatParm: e });
                });
        },
    ]),
    angular.module("ucsuite_wc").controller("buddyListCtrl", [
        "$scope",
        "$rootScope",
        "$filter",
        "$stateParams",
        "$document",
        "GetUsersService",
        "CurrentUser",
        "HttpService",
        "UCLocaleService",
        "$AppMain",
        function (i, e, t, a, n, o, s, r, l, c) {
            var d = a.name,
                u = "PERSONAL" === d,
                g = [];
            angular.forEach(s.getBuddyLists(), function (e, t) {
                g.push(e.name);
            }),
                (i.data = {}),
                (i.data.buddyListObj = s.getBuddyList(d)),
                (i.data.buddyListObj_copy = null),
                (i.addBuddyError = ""),
                (i.buddyListNameError = ""),
                (i.data.membersToDelete = []),
                (i.data.changes = !1),
                (i.data.selectedUserObject = ""),
                (i.data.pageTitle = ""),
                (i.data.buddyChoices = []),
                (i.editMode = !1),
                (i.isNewBuddyList = function () {
                    return null === i.data.buddyListObj;
                }),
                (i.onBlurDidNumber = function (t) {
                    for (var e = s.getBuddyLists(), a = 0; a < e.length; a++) {
                        var n = e[a];
                        if (i.data.buddyListObj !== n && angular.isArray(n.didList)) {
                            var o = n.didList.find(function (e) {
                                return e == t;
                            });
                            if (o) {
                                i.data.didErrorMsg = l.getPhrase("DupeDIDError", [t, n.name]);
                                var r = i.data.buddyListObj_copy.didList.indexOf(o);
                                return void (0 <= r && i.data.buddyListObj_copy.didList.splice(r, 1));
                            }
                        }
                    }
                    (i.data.didErrorMsg = ""), (i.data.changes = !0);
                }),
                (i.didNumberRemoved = function (e) {
                    i.data.changes = !0;
                }),
                (i.createBuddyChoiceItem = function (e) {
                    return { obj: e, name: e.name, extension: e.extension, imageURL: e.photo, label: e.name + " (" + e.extension + ")" };
                }),
                (i.changesToSave = function () {
                    return i.data.changes && i.isValidBuddyListName();
                }),
                (i.importAll = function () {
                    (i.data.buddyListObj_copy.list = []),
                        angular.forEach(o.getUsers(), function (e, t) {
                            i.data.buddyListObj_copy.list.push(e.extension);
                        }),
                        i.initBuddyList(),
                        (i.data.changes = !0);
                }),
                (i.initBuddyList = function () {
                    var n = o.getUsersHash();
                    (i.data.buddyListMembers = []),
                        angular.forEach(i.data.buddyListObj_copy.list, function (e, t) {
                            var a = n[e];
                            angular.isDefined(a) && i.data.buddyListMembers.push(a);
                        }),
                        (i.data.buddyChoices = []),
                        angular.forEach(o.getRealUsers(), function (e) {
                            e.chatCapable && i.data.buddyListObj_copy.list.indexOf(e.extension) < 0 && i.data.buddyChoices.push(i.createBuddyChoiceItem(e));
                        }),
                        (i.data.buddyChoices = t("orderBy")(i.data.buddyChoices, "extension"));
                    i.data.buddyChoices.filter(function (e) {
                        return 0 <= e.label.toLowerCase().indexOf("dale");
                    });
                    (i.editMode = !1), (i.data.membersToDelete = []), (i.buddyListNameError = ""), (i.data.changes = !1);
                }),
                (i.restoreBuddyList = function () {
                    i.isNewBuddyList()
                        ? ((i.data.buddyListObj_copy = { name: "", list: [], didList: [] }),
                          u && ((i.data.buddyListObj_copy.name = l.getPhrase("Personal")), i.isNewBuddyList() && (i.data.buddyListObj_copy.ID = "PERSONAL")),
                          (i.data.pageTitle = l.getPhrase("AddBuddyList")),
                          (i.data.buddyListObj_copy.didList = []))
                        : ((i.data.buddyListObj_copy = angular.copy(i.data.buddyListObj)),
                          (i.data.pageTitle = l.getPhrase("BuddyList.EditList")),
                          e.globalVars.IsAttendant && !i.data.buddyListObj.didList && (i.data.buddyListObj_copy.didList = [])),
                        i.initBuddyList();
                }),
                (i.saveBuddyList = function () {
                    i.data.didErrorMsg ||
                        r.saveBuddyList(i.data.buddyListObj_copy).then(
                            function (e) {
                                i.isNewBuddyList() && ((i.data.buddyListObj_copy.ID = e.Data.ID), (i.data.buddyListObj = {}), s.addBuddyList(i.data.buddyListObj)),
                                    angular.copy(i.data.buddyListObj_copy, i.data.buddyListObj),
                                    i.restoreBuddyList(),
                                    1 == s.getBuddyLists().length && ((i.data.buddyListObj.current = !0), i.initBuddyList(i.data.buddyListObj)),
                                    i.data.buddyListObj.current && c.setBuddyList(i.data.buddyListObj),
                                    c.showToast("success", "", "Buddy List: " + i.data.buddyListObj.name + " was successfully saved.");
                            },
                            function (e) {
                                c.showToast("error", "", "Buddy List: " + i.data.buddyListObj_copy.name + " was not saved.");
                            }
                        );
                }),
                (i.isValidBuddyListName = function () {
                    return angular.isDefined(i.data.buddyListObj_copy.name) && 0 != i.data.buddyListObj_copy.name.length
                        ? i.isNewBuddyList() && 0 <= g.indexOf(i.data.buddyListObj_copy.name)
                            ? !(i.buddyListNameError = "This buddy list name already exists.")
                            : ((i.buddyListNameError = ""), (i.data.changes = !0))
                        : !(i.buddyListNameError = "Buddy list name is required.");
                }),
                (i.addBuddy = function (e) {
                    if (angular.isUndefined(e) || null === e) return console.log("ERROR: Field is required"), void (i.addBuddyError = "Please select a buddy from the list.");
                    if (!angular.isObject(e)) return console.log("ERROR: Please choose a user from the list."), void (i.addBuddyError = "Please select a buddy from the list and then click 'Add'.");
                    var t = i.data.buddyListMembers.indexOf(e);
                    if (0 <= t) return console.log("ERROR: Not added since this user is already in the buddy list"), void (i.addBuddyError = "This Buddy is already in this Buddy List so it will not be added..");
                    for (i.data.buddyListMembers.push(e.obj), i.data.buddyListObj_copy.list.push(e.obj.extension), t = 0; t < i.data.buddyChoices.length; t++)
                        if (i.data.buddyChoices[t].obj === e.obj) {
                            i.data.buddyChoices.splice(t, 1), (i.data.selectedUserObject = ""), angular.element(n[0].querySelector("#addUser"))[0].focus();
                            break;
                        }
                    (i.addBuddyError = ""), (i.data.changes = !0);
                }),
                (i.removeBuddy = function (e) {
                    var t;
                    null !== e &&
                        (0 <= (t = i.data.buddyListMembers.indexOf(e)) && i.data.buddyListMembers.splice(t, 1),
                        0 <= (t = i.data.buddyListObj_copy.list.indexOf(e.extension)) && i.data.buddyListObj_copy.list.splice(t, 1),
                        i.data.buddyChoices.push(i.createBuddyChoiceItem(e)),
                        (i.data.changes = !0));
                }),
                (i.editMembers = function () {
                    (i.editMode = !0), (i.data.membersToDelete = []);
                }),
                (i.deleteMembers = function () {
                    for (var e = i.data.membersToDelete.length - 1; 0 <= e; e--) i.removeBuddy(i.data.membersToDelete[e]), i.data.membersToDelete.splice(e, 1);
                    i.editMode = !1;
                }),
                (i.deleteMembersDone = function () {
                    (i.editMode = !1), (i.data.membersToDelete = []), i.unselectAll();
                }),
                (i.selectAll = function () {
                    e.$broadcast("SELECT_BUDDY", { value: !0 });
                }),
                (i.unselectAll = function () {
                    e.$broadcast("SELECT_BUDDY", { value: !1 });
                }),
                (i.deselectMember = function (e) {
                    var t = i.data.membersToDelete.indexOf(e);
                    0 <= t && i.data.membersToDelete.splice(t, 1);
                }),
                (i.selectMember = function (e) {
                    i.data.membersToDelete.push(e);
                }),
                i.restoreBuddyList();
        },
    ]),
    angular.module("ucsuite_wc").controller("buddyMemberCtrl", [
        "$scope",
        "$rootScope",
        "$timeout",
        function (a, e, n) {
            (a.selected = !1),
                a.$on("SELECT_BUDDY", function (e, t) {
                    t.value && !a.selected
                        ? n(function () {
                              a.$apply(function () {
                                  (a.selected = !0), a.selectMember(a.userObj);
                              });
                          }, 0)
                        : !t.value &&
                          a.selected &&
                          n(function () {
                              a.$apply(function () {
                                  (a.selected = !1), a.deselectMember(a.userObj);
                              });
                          }, 0);
                }),
                (a.toggleSelection = function () {
                    a.selected ? a.deselectMember(a.userObj) : a.selectMember(a.userObj), (a.selected = !a.selected);
                });
        },
    ]),
    angular.module("ucsuite_wc").controller("employeeDetailCtrl", [
        "$rootScope",
        "$scope",
        "$document",
        "$stateParams",
        "$filter",
        "$timeout",
        "$http",
        "$q",
        "$presenceEventsModalService",
        "$ConfirmationModal",
        "UCLocaleService",
        "UCStorageService",
        "HttpService",
        "GetUsersService",
        "Contacts",
        "$Utilities",
        "$EditMultiRingModal",
        "ProfileService",
        "$Presence",
        "$dialModalService",
        "CurrentUser",
        "$AppMain",
        function (l, c, t, e, a, o, r, d, n, s, u, g, f, p, m, b, h, C, v, S, y, D) {
            (c.data = {}), (c.data.uploadingPicture = !1);
            var I = e.id;
            (c.data.user = p.getUsersHash()[I]),
                (c.data.presence = {}),
                (c.data.savedPresence = {}),
                (c.data.presenceChanged = !1),
                (c.data.differentProfileChosen = !1),
                (c.data.newProfile = !1),
                D.isLoggedInUser(c.data.user) && ((c.data.currentProfile = C.getCurrentProfile()), c.data.currentProfile && (c.data.currentProfileName = c.data.currentProfile.name), (c.data.presenceProfiles = C.getProfiles())),
                (c.data.callForwardDestinationChanged = !1),
                (c.data.callForwardDestinationIsExtension = !1),
                (c.data.jsContact = null),
                (c.data.callForwardDestinationOptions = []),
                (c.data.forwardingDestination = null),
                (c.data.forwardingDestinationObj = null),
                (c.data.lastForwardDestination = null),
                (c.data.lastForwardBothRingingDestination = null),
                (c.data.mostRecentlyUsedCallForwards = []),
                (c.dateOptions = { formatYear: "yyyy", startingDay: 0, showWeeks: !1, minDate: new Date() }),
                (c.returnDate = { opened: !1 }),
                (c.format = "MMMM DD, YYYY"),
                (c.openReturnTime = function () {
                    ((c.returnDate.opened = !0), null == c.data.presence.expectedReturn || c.data.presence.expectedReturn < new Date()) &&
                        ((c.data.presence.expectedReturn = new Date()),
                        c.data.presence.expectedReturn.getMinutes() < 30 ? c.data.presence.expectedReturn.setMinutes(0) : c.data.presence.expectedReturn.setMinutes(30),
                        c.data.presence.expectedReturn.setTime(c.data.presence.expectedReturn.getTime() + 36e5));
                }),
                (c.updatePresenceThenGoHome = function () {
                    c.updatePresence().then(
                        function (e) {
                            o(function () {
                                D.goToHomePage();
                            }, 1e3);
                        },
                        function (e) {}
                    );
                }),
                (c.isLoggedInUser = function (e) {
                    return D.isLoggedInUser(e);
                }),
                (c.enableChangePresence = function (e) {
                    return c.isLoggedInUser(e) || (!c.isLoggedInUser(e) && l.globalVars.CanEditPresence);
                }),
                (c.resetMobility = function () {
                    (c.data.mobilityUpdated = !1),
                        l.globalVars.HasMultiDevice && l.globalVars.MultiDevRinging.Members && ((c.data.multiDevRingingMembers = []), angular.copy(l.globalVars.MultiDevRinging.Members, c.data.multiDevRingingMembers));
                }),
                (c.data.multiDevRingingViewState = void 0),
                l.globalVars.HasMultiDevice && c.isLoggedInUser(c.data.user)
                    ? (console.log("GetMultiDevRinging -- start"),
                      (c.data.multiDevRingingViewState = "READING"),
                      r.post("/ucapi/device/GetMultiDevRinging", {}).then(
                          function (e) {
                              if ((console.log("GetMultiDevRinging -- end"), !e.data.Data)) throw ((c.data.multiDevRingingViewState = "ERROR"), new error("HasMultiDevice with no GetMultiDevRinging data"));
                              (l.globalVars.MultiDevRinging = {}), angular.copy(e.data.Data, l.globalVars.MultiDevRinging), c.resetMobility(), (c.data.multiDevRingingViewState = "ON");
                          },
                          function (e) {
                              console.error("GetMultiDevRinging", e);
                          }
                      ))
                    : (c.data.multiDevRingingViewState = "OFF"),
                (c.updateMobility = function () {
                    var n = d.defer();
                    return (
                        o(function () {
                            var e = {};
                            angular.copy(l.globalVars.MultiDevRinging, e),
                                (e.Members = []),
                                angular.copy(c.data.multiDevRingingMembers, e.Members),
                                r.post("/ucapi/device/PutMultiDevRinging", { details: e }).then(
                                    function (e) {
                                        n.resolve("success");
                                    },
                                    function (e) {
                                        var t, a;
                                        console.error("PutMultiDevRinging", e);
                                        try {
                                            (a = e.data.Data[0].Error), (t = u.getPhrase("MultiRing." + a + ".Error")) || (t = u.getPhrase("MultiRing.Generic.Error", [status, a]));
                                        } catch (e) {
                                            t = u.getPhrase("MultiRing.Generic.Error", [status, "N/A"]);
                                        } finally {
                                            n.reject(t);
                                        }
                                    }
                                );
                        }, 0),
                        n.promise
                    );
                }),
                (c.getSetupMultiRingDevices = function () {
                    var e = [];
                    return (
                        angular.forEach(c.data.multiDevRingingMembers, function (t) {
                            try {
                                t.IsMobile && t.SpeedDial.Destination ? e.push(t) : !t.IsMobile && t.DN && e.push(t);
                            } catch (e) {
                                console.log("Invalid Multi-Ring Member " + JSON.stringify(t));
                            }
                        }),
                        e
                    );
                }),
                (c.deleteMultiRing = function (e) {
                    e.IsMobile ? (e.SpeedDial.Destination = "") : (e.DN = ""), (e.IsEnabled = !1), (c.data.mobilityUpdated = !0);
                }),
                (c.editMultiRing = function (e) {
                    h.open(e, c.data.multiDevRingingMembers, c.data.user.extension).result.then(function (e) {
                        c.data.mobilityUpdated = !0;
                    });
                }),
                (c.enableAllMultiRing = function () {
                    angular.forEach(c.data.multiDevRingingMembers, function (t) {
                        try {
                            t.IsMobile && t.SpeedDial.Destination ? (t.IsEnabled = !0) : !t.IsMobile && t.DN && (t.IsEnabled = !0);
                        } catch (e) {
                            console.log("Invalid Multi-Ring Member " + JSON.stringify(t));
                        }
                    }),
                        (c.data.mobilityUpdated = !0);
                }),
                (c.disableAllMultiRing = function () {
                    angular.forEach(c.data.multiDevRingingMembers, function (t) {
                        try {
                            t.IsMobile && t.SpeedDial.Destination ? (t.IsEnabled = !1) : !t.IsMobile && t.DN && (t.IsEnabled = !1);
                        } catch (e) {
                            console.log("Invalid Multi-Ring Member " + JSON.stringify(t));
                        }
                    }),
                        (c.data.mobilityUpdated = !0);
                }),
                (c.availableMultiRingDevices = function () {
                    var t = 0;
                    return (
                        angular.forEach(c.data.multiDevRingingMembers, function (e) {
                            e.DN || t++;
                        }),
                        0 < t
                    );
                }),
                (c.resetPresence = function () {
                    (c.data.presence = {}),
                        angular.copy(c.data.savedPresence, c.data.presence),
                        c.resetMobility(),
                        c.resetCallHandling(),
                        (c.data.presenceChanged = !1),
                        (c.data.currentProfile = C.getCurrentProfile()),
                        c.data.currentProfile && (c.data.currentProfileName = c.data.currentProfile.name),
                        (c.data.differentProfileChosen = !1);
                }),
                (c.clearOtherPresence = function () {
                    (c.data.presence.remarks = ""), (c.data.presence.subject = ""), (c.data.presence.location = ""), (c.data.presence.expectedReturn = "");
                }),
                (c.setPresenceStatus = function (e) {
                    if (c.data.presence.status !== e.data) {
                        if (((c.data.presence.status = e.data), c.data.currentProfile)) {
                            if (!c.data.presenceChanged)
                                s.open(u.getPhrase("UpdateProfile.Title"), u.getPhrase("UpdateProfile", [c.data.currentProfileName]), "YES_NO", "lg").result.then(function (e) {
                                    e || ((c.data.currentProfileName = ""), (c.data.currentProfile = null), (c.data.differentProfileChosen = !1), c.flushPresenceProfiles(!0), c.clearOtherPresence());
                                });
                        } else c.clearOtherPresence();
                        c.data.presenceChanged = !0;
                    }
                }),
                (c.data.callHandlingOptions = [
                    { label: u.getPhrase("Forward.DoNotChangeForward"), data: "DoNotChangeForward" },
                    { label: u.getPhrase("Forward.DoNotForward"), data: "DoNotForward" },
                    { label: u.getPhrase("Forward.ForwardImmediate"), data: "ForwardImmediate", needsNumber: !0, color: "text-info", icon: "fa fa-arrow-right" },
                    { label: u.getPhrase("Forward.ForwardBothRinging"), data: "ForwardBothRinging", needsNumber: !0, color: "text-info", icon: "fa fa-arrow-right" },
                    { label: u.getPhrase("Forward.DoNotDisturb"), data: "DoNotDisturb", color: "text-danger", icon: "fa fa-ban text-danger" },
                ]),
                (c.getCallHandlingOptionsByValue = function (e) {
                    var t = c.data.callHandlingOptions;
                    for (i = 0; i < t.length; i++) if (t[i].data === e) return t[i];
                    return t[0];
                }),
                (c.forwardSettingChanged = function (e) {
                    var t;
                    if (((c.data.forwardSettingObj = e), (c.data.presence.forwarding.mode = e.data), (c.data.presenceChanged = !0), "ForwardBothRinging" === c.data.presence.forwarding.mode))
                        (t = l.globalVars.Settings.lastForwardBothRingingDestination) && (c.data.presence.forwarding.destination = t), c.setCallDestinationError();
                    else if ((c.clearCallDestinationError(), "ForwardImmediate" === c.data.presence.forwarding.mode && (t = l.globalVars.Settings.LastForwardDestination))) {
                        c.data.forwardingDestinationObj = null;
                        for (var a = 0; a < c.data.callForwardDestinationOptions.length; a++) {
                            var n = c.data.callForwardDestinationOptions[a];
                            if (n.number === t) {
                                (c.data.forwardingDestinationObj = n), (t = "VM" === t ? n.label : n.number);
                                break;
                            }
                        }
                        (c.data.presence.forwarding.destination = t), (c.data.forwardingDestination = t);
                    }
                }),
                (c.getCallHandlingSettings = function () {
                    return {
                        mode: c.data.forwardSettingObj.data,
                        dest: angular.isDefined(c.data.presence.forwardDestination) ? (angular.isObject(c.data.presence.forwardDestination) ? c.data.presence.forwardDestination.Number : c.data.presence.forwardDestination) : null,
                    };
                }),
                (c.updatePresence = function () {
                    var o = d.defer(),
                        r = c.data.differentProfileChosen,
                        i = c.data.presenceChanged,
                        s = c.data.mobilityUpdated,
                        e = b.toDateString(c.data.presence.expectedReturn);
                    return (
                        v
                            .updatePresence(
                                c.data.contactID,
                                c.data.presence.status,
                                c.data.presence.subject,
                                e,
                                c.data.presence.location,
                                c.data.presence.remarks,
                                c.data.presence.forwarding.mode,
                                c.data.presence.forwarding.destination,
                                !0
                            )
                            .then(
                                function (e) {
                                    if (
                                        ((c.data.presenceChanged = !1),
                                        (c.data.mobilityUpdated = !1),
                                        (c.data.callForwardDestinationChanged = !1),
                                        angular.copy(c.data.presence, c.data.savedPresence),
                                        "ForwardImmediate" === c.data.presence.forwarding.mode && "VM" !== c.data.presence.forwarding.destination && c.isAlternateNumber(c.data.presence.forwarding.destination) < 0)
                                    ) {
                                        for (var t = b.toDigits(c.data.presence.forwarding.destination), a = c.data.mostRecentlyUsedCallForwards.length - 1; 0 <= a; a--) {
                                            var n = c.data.mostRecentlyUsedCallForwards[a];
                                            t == b.toDigits(n) && c.data.mostRecentlyUsedCallForwards.splice(a, 1);
                                        }
                                        c.data.mostRecentlyUsedCallForwards.unshift(c.data.presence.forwarding.destination),
                                            5 < c.data.mostRecentlyUsedCallForwards.length && c.data.mostRecentlyUsedCallForwards.splice(5, 1),
                                            (l.globalVars.Settings.MostRecentlyUsedCallForwards = c.data.mostRecentlyUsedCallForwards),
                                            c.buildCallForwardDestinationOptions();
                                    }
                                    "ForwardImmediate" === c.data.presence.forwarding.mode
                                        ? (l.globalVars.Settings.LastForwardDestination = c.data.presence.forwarding.destination)
                                        : "ForwardBothRinging" === c.data.presence.forwarding.mode && (l.globalVars.Settings.lastForwardBothRingingDestination = c.data.presence.forwarding.destination),
                                        f.saveUserSettings(),
                                        (i || r) && (D.showToast("success", "", u.getPhrase("Toaster.PresenceUpdated")), o.resolve("success"), r && c.flushPresenceProfiles(!0)),
                                        s &&
                                            c.updateMobility().then(
                                                function (e) {
                                                    D.showToast("success", "", u.getPhrase("Toaster.MobilityUpdateSuccess")), o.resolve("success");
                                                },
                                                function (e) {
                                                    D.showToast("error", "", e, 6e4), D.showToast("warning", "", u.getPhrase("Toaster.MobilityUpdateFail"), 3e4), o.resolve("warning"), c.resetMobility();
                                                }
                                            );
                                },
                                function (e) {
                                    D.showToast("error", "", u.getPhrase("Toaster.PresenceUpdateError", [e.message])), o.reject("error");
                                }
                            ),
                        o.promise
                    );
                }),
                (c.buildPresenceStatusFromProfile = function (e) {
                    e &&
                        (angular.copy(e.presence, c.data.presence),
                        c.setupCallhandlingFromCallForwardObject(e.presence.forwarding.mode, e.presence.forwarding.destination),
                        (c.data.differentProfileChosen = !0),
                        (c.isCollapsed = !(c.data.presence.subject || c.data.presence.location || c.data.presence.expectedReturn)));
                }),
                (c.clearCallDestinationError = function () {
                    c.data.errorForwardTarget = "";
                }),
                (c.isNumberAnExtension = function (e) {
                    return !(!angular.isString(e) || 0 === e.length);
                }),
                (c.setCallDestinationError = function () {
                    return "ForwardBothRinging" !== c.data.presence.forwarding.mode || c.isNumberAnExtension(c.data.presence.forwarding.destination)
                        ? (c.clearCallDestinationError(), !1)
                        : ((c.data.errorForwardTarget = "This forward option requires the destination to be another extension."), !0);
                }),
                (c.setCallForwardDestinationChanged = function () {
                    (c.data.callForwardDestinationChanged = !0), (c.data.presenceChanged = !0);
                }),
                (c.isAlternateNumber = function (e) {
                    for (var t = b.toDigits(e), a = 0; a < c.data.alternateNumbers.length; a++) {
                        if (c.data.alternateNumbers[a].rawNumber == t) return a;
                    }
                    return -1;
                }),
                (c.setForwardingDestination = function (e) {
                    if ("VM" === e) return (c.data.forwardingDestinationObj = null), (c.data.forwardingDestination = c.data.callForwardVoicemail.label), void (c.data.presence.forwarding.destination = e);
                    var t = b.toDigits(e);
                    c.data.forwardingDestinationObj = null;
                    for (var a = 0; a < c.data.callForwardDestinationOptions.length; a++)
                        if (t == c.data.callForwardDestinationOptions[a].rawNumber) {
                            (c.data.forwardingDestinationObj = c.data.callForwardDestinationOptions[a]),
                                (c.data.forwardingDestination = c.data.forwardingDestinationObj.number),
                                (c.data.presence.forwarding.destination = c.data.forwardingDestinationObj.number);
                            break;
                        }
                    if (null === c.data.forwardingDestinationObj) {
                        c.data.forwardingDestinationObj = null;
                        var n = c.isAlternateNumber(t);
                        if (0 <= n) {
                            var o = c.data.alternateNumbers[n];
                            (c.data.forwardingDestination = o.Number), (c.data.presence.forwarding.destination = o.rawNumber);
                        } else (c.data.forwardingDestination = e), (c.data.presence.forwarding.destination = e);
                    }
                }),
                (c.buildCallForwardDestinationOptions = function () {
                    (c.data.callForwardDestinationOptions = []),
                        angular.forEach(c.data.mostRecentlyUsedCallForwards, function (e) {
                            var t = b.toDigits(e),
                                a = {},
                                n = c.isAlternateNumber(t);
                            if (0 <= n) {
                                var o = c.data.alternateNumbers[n];
                                (a.number = o.Number), (a.rawNumber = t), (a.label = o.Number);
                            } else (a.number = e), (a.rawNumber = t), (a.label = e);
                            c.data.callForwardDestinationOptions.push(a);
                        }),
                        angular.forEach(c.data.alternateNumbers, function (e) {
                            e.number = e.Number;
                        });
                }),
                (c.selectCallForwardDestination = function (e) {
                    "VM" === (c.data.forwardingDestinationObj = e).number
                        ? ((c.data.forwardingDestination = e.label), (c.data.presence.forwarding.destination = e.rawNumber))
                        : ((c.data.forwardingDestination = e.number), (c.data.presence.forwarding.destination = e.number)),
                        c.setCallForwardDestinationChanged();
                }),
                (c.selectCallForwardDestination2 = function (e) {
                    "VM" === e ? c.selectCallForwardDestination(c.data.callForwardVoicemail) : c.selectCallForwardDestination(c.data.alternateNumbers[e]);
                }),
                (c.doBlurCallForwardDestination = function () {
                    if (
                        (console.log("data.forwardingDestinationObj=" + JSON.stringify(c.data.forwardingDestinationObj)),
                        console.log("data.presence.forwarding.destination=" + c.data.presence.forwarding.destination),
                        console.log("data.forwardingDestination=" + c.data.forwardingDestination),
                        "ForwardImmediate" === c.data.presence.forwarding.mode)
                    ) {
                        if (c.data.presence.forwarding.destination !== c.data.forwardingDestination) {
                            for (var e = !1, t = 0; t < c.data.callForwardDestinationOptions.length; t++)
                                if (c.data.forwardingDestination.label === c.data.callForwardDestinationOptions[t].label) {
                                    c.selectCallForwardDestination(c.data.callForwardDestinationOptions[t].number), (e = !0);
                                    break;
                                }
                            e || ((c.data.presence.forwarding.destination = c.data.forwardingDestination), (c.data.forwardingDestinationObj = null)), c.setCallForwardDestinationChanged();
                        }
                    } else c.data.presence.forwarding.destination !== c.data.forwardingDestination && c.setCallForwardDestinationChanged(), c.setCallDestinationError();
                }),
                (c.setupCallhandlingFromCallForwardObject = function (e, t) {
                    (c.data.presence.forwarding.mode = e),
                        c.setForwardingDestination(t),
                        (c.data.dndSetting = !1),
                        (c.data.callForwardSetting = !1),
                        "DoNotDisturb" === e
                            ? (c.data.dndSetting = !0)
                            : "Forward" === e || "ForwardImmediate" === e
                            ? (c.data.callForwardSetting = !0)
                            : "ForwardBothRinging" === e && ((c.data.callForwardSetting = !0), (c.data.alsoRing = !0)),
                        (c.data.forwardSettingObj = c.getCallHandlingOptionsByValue(e)),
                        (c.data.callForwardDestinationChanged = !1);
                }),
                (c.resetCallHandling = function () {
                    c.setupCallhandlingFromCallForwardObject(c.data.presence.forwarding.mode, c.data.presence.forwarding.destination);
                }),
                (c.callNumber2 = function (e, t) {
                    if (((c.data.open.callDropdown = !1), !l.globalVars.IsCallProcessingAvailable)) return console.log("Dial number is not available since call processing is not available"), !1;
                    S.callNumber(c.data.user, "Internal", e, t);
                }),
                (c.startVideoWith = function (e) {}),
                (c.editSchedules = function () {
                    n.open(c.data.contactID, c.data.user, c.data.futureEvents).result.then(function (e) {
                        (c.data.futureEvents = []), angular.copy(e.schedules, c.data.futureEvents);
                    });
                }),
                f.getPresenceContact(c.data.user.presence.id).then(
                    function (e) {
                        (c.data.jsContact = null),
                            (c.data.userName = c.data.user.name),
                            (c.data.photo = c.data.user.photo),
                            (c.data.contactID = e.Data.ContactId),
                            (c.data.open = {}),
                            (c.data.dndSetting = null),
                            (c.data.callForwardSetting = null),
                            (c.data.presence.status = e.Data.CurrentSetting.Status),
                            (c.data.presence.subject = e.Data.CurrentSetting.Title),
                            (c.data.presence.remarks = e.Data.CurrentSetting.Note),
                            (c.data.presence.location = e.Data.CurrentSetting.Location),
                            (c.data.presence.expectedReturn = b.toDate(e.Data.CurrentSetting.ReturnTime)),
                            (c.data.presence.forwarding = {}),
                            (c.data.presence.forwarding.mode = e.Data.CurrentSetting.ForwardSetting.Mode),
                            (c.data.presence.forwarding.destination = e.Data.CurrentSetting.ForwardSetting.Number),
                            (c.data.forwardSettingObj = c.getCallHandlingOptionsByValue(c.data.presence.forwarding.mode)),
                            c.setCallDestinationError(),
                            (c.data.mostRecentlyUsedCallForwards = b.get_mru_callForwards()),
                            (c.data.alternateNumbers = []),
                            angular.copy(c.data.user.AlternateNumbers, c.data.alternateNumbers),
                            c.buildCallForwardDestinationOptions(),
                            (c.data.futureEvents = []),
                            angular.copy(e.Data.FutureEvents, c.data.futureEvents),
                            (c.data.presenceChanged = !1),
                            c.resetCallHandling(),
                            angular.copy(c.data.presence, c.data.savedPresence);
                    },
                    function (e) {}
                ),
                (handleDirtyChanges = function () {
                    s.open("Unsaved Changes", "There have been changes made which must be saved or discarded.").result.then(function (e) {});
                }),
                c.$watch("data.presenceChanged", function (e, t) {
                    console.log("data.presenceChanged newVal=" + e + " oldVal=" + t), e ? preventPageChange(handleDirtyChanges) : preventPageChange(null);
                }),
                (c.flushPresenceProfiles = function (e) {
                    e && (C.setCurrentProfile(c.data.currentProfile), c.data.currentProfile && (c.data.currentProfileName = c.data.currentProfile.name));
                }),
                (c.presenceProfiles = function () {
                    return C.getProfiles();
                }),
                (c.saveProfile = function (t) {
                    var e = c.data.currentProfile;
                    e || (e = { name: c.data.currentProfileName, presence: {} }),
                        angular.copy(c.data.presence, e.presence),
                        C.postProfile(e).then(function (e) {
                            (c.data.currentProfile = e),
                                t ? (c.flushPresenceProfiles(!0), (c.data.differentProfileChosen = !1), c.updatePresenceThenGoHome()) : (c.flushPresenceProfiles(!1), (c.data.presenceChanged = !1), (c.data.differentProfileChosen = !0)),
                                (c.data.newProfile = !1);
                        });
                }),
                (c.doBlurProfileName = function () {
                    c.data.currentProfileName
                        ? (null !== c.data.currentProfile && c.data.currentProfileName === c.data.currentProfile.name) ||
                          ((c.data.presenceChanged = !0), (c.data.newProfile = !0), (c.data.currentProfile = null), (c.data.differentProfileChosen = !0))
                        : ((c.data.presenceChanged = !0), (c.data.newProfile = !1), (c.data.currentProfile = null), (c.data.differentProfileChosen = !1));
                }),
                (c.selectProfile = function (e) {
                    "__PROFILE_CLEAR__" === e
                        ? ((c.data.currentProfileName = ""), (c.data.currentProfile = null), (c.data.differentProfileChosen = !1), c.flushPresenceProfiles(!0), angular.element(t[0].querySelector("#idProfileName"))[0].focus())
                        : (c.buildPresenceStatusFromProfile(e), (c.data.currentProfile = e), (c.data.currentProfileName = e.name));
                }),
                (c.deleteProfile = function () {
                    s.open(u.getPhrase("Profile.Delete.Title"), u.getPhrase("Profile.Delete", [c.data.currentProfileName]), "YES_NO").result.then(function (e) {
                        e && (C.deleteProfile(c.data.currentProfile.id), (c.data.currentProfileName = ""), (c.data.differentProfileChosen = !1));
                    });
                }),
                (c.event = { startDate: new Date() }),
                (c.config = { showMeridian: !0, hourSteps: 1, minuteSteps: 15 }),
                (c.clicked = function (e) {
                    e.preventDefault(), e.stopPropagation();
                }),
                (c.data.callForwardVoicemail = { number: "VM", rawNumber: "VM", label: c.getLocalPhrase("Voicemail") });
        },
    ]),
    angular.module("ucsuite_wc").controller("ManagePrefsController", [
        "$rootScope",
        "$scope",
        "LogService",
        function (e, t, a) {
            (t.debug = {}),
                (t.debug.name = "Hello World!"),
                (t.debug.serverLogMode = "BY_EXTENSION"),
                (t.debug.logExtension = ""),
                (t.debug.consoleLog = e.bufferedConsoleLog ? e.bufferedConsoleLog.join("\n") : ""),
                (t.getServerLogs = function () {
                    console.log("getServerLogs mode=" + t.debug.serverLogMode + " ext=" + t.debug.logExtension),
                        "BY_EXTENSION" === t.debug.serverLogMode
                            ? a.getByExtension(t.debug.logExtension).then(
                                  function (e) {
                                      t.debug.serverLogData = e.join("\n");
                                  },
                                  function (e) {}
                              )
                            : "ALL" === t.debug.serverLogMode &&
                              a.getAll().then(
                                  function (e) {
                                      t.debug.serverLogData = e.join("\n");
                                  },
                                  function (e) {}
                              );
                }),
                (t.clearClientLogs = function () {
                    (t.debug.consoleLog = ""), (e.bufferedConsoleLog = []);
                }),
                (t.getClientLogs = function () {
                    t.debug.consoleLog = e.bufferedConsoleLog.join("\n");
                });
        },
    ]),
    angular.module("ucsuite_wc").controller("VideoCallsCtrl", [
        "$scope",
        "$log",
        "$UCVideo",
        function (e, t, a) {
            var n = this;
            (n.endVideo = function () {
                a.endVideo();
            }),
                (n.toggleVideo = function () {
                    a.toggleVideoMute();
                }),
                (n.toggleAudio = function () {
                    a.toggleAudioMute();
                }),
                (n.startVideo = function (e) {
                    a.startVideo(e);
                }),
                e.$watch(
                    function () {
                        return a.streamMuteSettings;
                    },
                    function (e) {
                        (n.streamMuteSettings = e), t.info("new stream settings: ", n.streamMuteSettings);
                    }
                ),
                (n.displayName0 = void 0),
                e.$watch(
                    function () {
                        return a.displayName0;
                    },
                    function (e) {
                        n.displayName0 = e;
                    }
                ),
                (n.displayName1 = void 0),
                e.$watch(
                    function () {
                        return a.displayName1;
                    },
                    function (e) {
                        n.displayName1 = e;
                    }
                ),
                (n.displayName2 = void 0),
                e.$watch(
                    function () {
                        return a.displayName2;
                    },
                    function (e) {
                        n.displayName2 = e;
                    }
                ),
                (n.showSelfView = void 0),
                e.$watch(
                    function () {
                        return e.globalVars.Settings.ShowSelfView;
                    },
                    function (e) {
                        n.showSelfView = e;
                    }
                ),
                (n.video0InUse = void 0),
                e.$watch(
                    function () {
                        return a.video0InUse;
                    },
                    function (e) {
                        n.video0InUse = e;
                    }
                ),
                (n.video1InUse = void 0),
                e.$watch(
                    function () {
                        return a.video1InUse;
                    },
                    function (e) {
                        n.video1InUse = e;
                    }
                ),
                (n.video2InUse = void 0),
                e.$watch(
                    function () {
                        return a.video2InUse;
                    },
                    function (e) {
                        n.video2InUse = e;
                    }
                ),
                (n.dimensions = void 0),
                e.$watch(
                    function () {
                        return a.dimensions;
                    },
                    function (e) {
                        n.dimensions = e;
                    }
                );
        },
    ]);
